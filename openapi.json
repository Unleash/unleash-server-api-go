{
  "openapi": "3.0.3",
  "servers": [],
  "info": {
    "title": "Unleash API",
    "version": "6.1.10+main"
  },
  "security": [
    {
      "apiKey": []
    },
    {
      "bearerToken": []
    }
  ],
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "API key needed to access this API"
      },
      "bearerToken": {
        "type": "http",
        "scheme": "bearer",
        "description": "API key needed to access this API, in Bearer token format"
      }
    },
    "schemas": {
      "addonCreateUpdateSchema": {
        "type": "object",
        "required": [
          "provider",
          "enabled",
          "parameters",
          "events"
        ],
        "description": "Data required to create or update an [Unleash addon](https://docs.getunleash.io/reference/addons) instance.",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The addon provider, such as \"webhook\" or \"slack\". This string is **case sensitive** and maps to the provider's `name` property.\n\nThe list of all supported providers and their parameters for a specific Unleash instance can be found by making a GET request to the `api/admin/addons` endpoint: the `providers` property of that response will contain all available providers.\n\nThe default set of providers can be found in the [addons reference documentation](https://docs.getunleash.io/reference/addons). The default supported options are:\n- `datadog` for [Datadog](https://docs.getunleash.io/reference/addons/datadog)\n- `slack` for [Slack](https://docs.getunleash.io/reference/addons/slack)\n- `teams` for [Microsoft Teams](https://docs.getunleash.io/reference/addons/teams)\n- `webhook` for [webhooks](https://docs.getunleash.io/reference/addons/webhook)\n\nThe provider you choose for your addon dictates what properties the `parameters` object needs. Refer to the documentation for each provider for more information.\n",
            "example": "webhook"
          },
          "description": {
            "type": "string",
            "description": "A description of the addon.",
            "example": "This addon posts updates to our internal feature tracking system whenever a feature is created or updated."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the addon should be enabled or not."
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {},
            "example": {
              "url": "http://localhost:4242/webhook"
            },
            "description": "Parameters for the addon provider. This object has different required and optional properties depending on the provider you choose. Consult the documentation for details."
          },
          "events": {
            "type": "array",
            "description": "The event types that will trigger this specific addon.",
            "items": {
              "type": "string"
            },
            "example": [
              "feature-created",
              "feature-updated"
            ]
          },
          "projects": {
            "type": "array",
            "description": "The projects that this addon will listen to events from. An empty list means it will listen to events from **all** projects.",
            "example": [
              "new-landing-project",
              "signups-v2"
            ],
            "items": {
              "type": "string"
            }
          },
          "environments": {
            "type": "array",
            "description": "The list of environments that this addon will listen to events from. An empty list means it will listen to events from **all** environments.",
            "example": [
              "development",
              "production"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "addonParameterSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "displayName",
          "type",
          "required",
          "sensitive"
        ],
        "description": "An addon parameter definition.",
        "properties": {
          "name": {
            "type": "string",
            "example": "emojiIcon",
            "description": "The name of the parameter as it is used in code. References to this parameter should use this value."
          },
          "displayName": {
            "type": "string",
            "example": "Emoji Icon",
            "description": "The name of the parameter as it is shown to the end user in the Admin UI."
          },
          "type": {
            "type": "string",
            "description": "The type of the parameter. Corresponds roughly to [HTML `input` field types](https://developer.mozilla.org/docs/Web/HTML/Element/Input#input_types). Multi-line inut fields are indicated as `textfield` (equivalent to the HTML `textarea` tag).",
            "example": "text"
          },
          "description": {
            "type": "string",
            "example": "The emoji_icon to use when posting messages to slack. Defaults to \":unleash:\".",
            "description": "A description of the parameter. This should explain to the end user what the parameter is used for."
          },
          "placeholder": {
            "type": "string",
            "example": ":unleash:",
            "description": "The default value for this parameter. This value is used if no other value is provided."
          },
          "required": {
            "type": "boolean",
            "example": false,
            "description": "Whether this parameter is required or not. If a parameter is required, you must give it a value when you create the addon. If it is not required it can be left out. It may receive a default value in those cases."
          },
          "sensitive": {
            "type": "boolean",
            "example": false,
            "description": "Indicates whether this parameter is **sensitive** or not. Unleash will not return sensitive parameters to API requests. It will instead use a number of asterisks to indicate that a value is set, e.g. \"******\". The number of asterisks does not correlate to the parameter's value."
          }
        }
      },
      "addonSchema": {
        "type": "object",
        "description": "An [addon](https://docs.getunleash.io/reference/addons) instance description. Contains data about what kind of provider it uses, whether it's enabled or not, what events it listens for, and more.",
        "required": [
          "id",
          "description",
          "provider",
          "enabled",
          "parameters",
          "events"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1,
            "example": 27,
            "description": "The addon's unique identifier."
          },
          "provider": {
            "type": "string",
            "description": "The addon provider, such as \"webhook\" or \"slack\".",
            "example": "webhook"
          },
          "description": {
            "type": "string",
            "description": "A description of the addon. `null` if no description exists.",
            "example": "This addon posts updates to our internal feature tracking system whenever a feature is created or updated.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the addon is enabled or not."
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {},
            "example": {
              "url": "http://localhost:4242/webhook"
            },
            "description": "Parameters for the addon provider. This object has different required and optional properties depending on the provider you choose."
          },
          "events": {
            "type": "array",
            "description": "The event types that trigger this specific addon.",
            "items": {
              "type": "string"
            },
            "example": [
              "feature-created",
              "feature-updated"
            ]
          },
          "projects": {
            "type": "array",
            "description": "The projects that this addon listens to events from. An empty list means it listens to events from **all** projects.",
            "example": [
              "new-landing-project",
              "signups-v2"
            ],
            "items": {
              "type": "string"
            }
          },
          "environments": {
            "type": "array",
            "description": "The list of environments that this addon listens to events from. An empty list means it listens to events from **all** environments.",
            "example": [
              "development",
              "production"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "addonTypeSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "displayName",
          "documentationUrl",
          "description"
        ],
        "description": "An addon provider. Defines a specific addon type and what the end user must configure when creating a new addon of that type.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the addon type. When creating new addons, this goes in the payload's `type` field.",
            "example": "slack"
          },
          "displayName": {
            "type": "string",
            "description": "The addon type's name as it should be displayed in the admin UI.",
            "example": "Slack"
          },
          "documentationUrl": {
            "type": "string",
            "description": "A URL to where you can find more information about using this addon type.",
            "example": "https://docs.getunleash.io/docs/addons/slack"
          },
          "description": {
            "type": "string",
            "description": "A description of the addon type.",
            "example": "Allows Unleash to post updates to Slack."
          },
          "howTo": {
            "type": "string",
            "description": "A long description of how to use this addon type. This will be displayed on the top of configuration page. Can contain markdown.",
            "example": "This is **how you use** this addon type...\n  - Step 1\n  - Step 2\n  - Step 3"
          },
          "tagTypes": {
            "type": "array",
            "description": "A list of [Unleash tag types](https://docs.getunleash.io/reference/tags#tag-types) that this addon uses. These tags will be added to the Unleash instance when an addon of this type is created.",
            "example": [
              {
                "name": "slack",
                "description": "Slack tag used by the slack-addon to specify the slack channel.",
                "icon": "S"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/tagTypeSchema"
            }
          },
          "parameters": {
            "type": "array",
            "description": "The addon provider's parameters. Use these to configure an addon of this provider type. Items with `required: true` must be provided.",
            "items": {
              "$ref": "#/components/schemas/addonParameterSchema"
            },
            "example": [
              {
                "name": "url",
                "displayName": "Slack webhook URL",
                "description": "(Required)",
                "type": "url",
                "required": true,
                "sensitive": true
              },
              {
                "name": "username",
                "displayName": "Username",
                "placeholder": "Unleash",
                "description": "The username to use when posting messages to slack. Defaults to \"Unleash\".",
                "type": "text",
                "required": false,
                "sensitive": false
              },
              {
                "name": "emojiIcon",
                "displayName": "Emoji Icon",
                "placeholder": ":unleash:",
                "description": "The emoji_icon to use when posting messages to slack. Defaults to \":unleash:\".",
                "type": "text",
                "required": false,
                "sensitive": false
              },
              {
                "name": "defaultChannel",
                "displayName": "Default channel",
                "description": "(Required) Default channel to post updates to if not specified in the slack-tag",
                "type": "text",
                "required": true,
                "sensitive": false
              }
            ]
          },
          "events": {
            "type": "array",
            "description": "All the [event types](https://docs.getunleash.io/reference/api/legacy/unleash/admin/events#feature-toggle-events) that are available for this addon provider.",
            "items": {
              "type": "string"
            },
            "example": [
              "feature-created",
              "feature-updated",
              "feature-archived",
              "feature-revived",
              "feature-stale-on",
              "feature-stale-off",
              "feature-environment-enabled",
              "feature-environment-disabled",
              "feature-strategy-remove",
              "feature-strategy-update",
              "feature-strategy-add",
              "feature-metadata-updated",
              "feature-variants-updated",
              "feature-project-change"
            ]
          },
          "installation": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "url"
            ],
            "description": "The installation configuration for this addon type.",
            "properties": {
              "url": {
                "type": "string",
                "description": "A URL to where the addon configuration should redirect to install addons of this type.",
                "example": "https://unleash-slack-app.vercel.app/install"
              },
              "title": {
                "type": "string",
                "description": "The title of the installation configuration. This will be displayed to the user when installing addons of this type.",
                "example": "Slack App installation"
              },
              "helpText": {
                "type": "string",
                "description": "The help text of the installation configuration. This will be displayed to the user when installing addons of this type.",
                "example": "Clicking the Install button will send you to Slack to initiate the installation procedure for the Unleash Slack app for your workspace"
              }
            }
          },
          "alerts": {
            "type": "array",
            "description": "A list of alerts to display to the user when installing addons of this type.",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "type",
                "text"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "success",
                    "info",
                    "warning",
                    "error"
                  ],
                  "description": "The type of alert. This determines the color of the alert.",
                  "example": "info"
                },
                "text": {
                  "type": "string",
                  "description": "The text of the alert. This is what will be displayed to the user.",
                  "example": "Please ensure you have the Unleash Slack App installed in your Slack workspace if you haven't installed it already. If you want the Unleash Slack App bot to post messages to private channels, you'll need to invite it to those channels."
                }
              }
            }
          },
          "deprecated": {
            "type": "string",
            "description": "This should be used to inform the user that this addon type is deprecated and should not be used. Deprecated addons will show a badge with this information on the UI.",
            "example": "This integration is deprecated. Please try the new integration instead."
          }
        }
      },
      "addonsSchema": {
        "type": "object",
        "required": [
          "addons",
          "providers"
        ],
        "description": "An object containing two things:\n1. A list of all [addons](https://docs.getunleash.io/reference/addons) defined on this Unleash instance\n2. A list of all addon providers defined on this instance",
        "properties": {
          "addons": {
            "type": "array",
            "description": "All the addons that exist on this instance of Unleash.",
            "items": {
              "$ref": "#/components/schemas/addonSchema"
            }
          },
          "providers": {
            "type": "array",
            "description": "A list of  all available addon providers, along with their parameters and descriptions.",
            "example": [
              {
                "name": "webhook",
                "displayName": "Webhook",
                "description": "A Webhook is a generic way to post messages from Unleash to third party services.",
                "documentationUrl": "https://docs.getunleash.io/docs/addons/webhook",
                "parameters": [
                  {
                    "name": "url",
                    "displayName": "Webhook URL",
                    "description": "(Required) Unleash will perform a HTTP Post to the specified URL (one retry if first attempt fails)",
                    "type": "url",
                    "required": true,
                    "sensitive": true
                  },
                  {
                    "name": "contentType",
                    "displayName": "Content-Type",
                    "placeholder": "application/json",
                    "description": "(Optional) The Content-Type header to use. Defaults to \"application/json\".",
                    "type": "text",
                    "required": false,
                    "sensitive": false
                  },
                  {
                    "name": "authorization",
                    "displayName": "Authorization",
                    "placeholder": "",
                    "description": "(Optional) The Authorization header to use. Not used if left blank.",
                    "type": "text",
                    "required": false,
                    "sensitive": true
                  },
                  {
                    "name": "bodyTemplate",
                    "displayName": "Body template",
                    "placeholder": "{\n  \"event\": \"{{event.type}}\",\n  \"createdBy\": \"{{event.createdBy}}\",\n  \"featureToggle\": \"{{event.data.name}}\",\n  \"timestamp\": \"{{event.data.createdAt}}\"\n}",
                    "description": "(Optional) You may format the body using a mustache template. If you don't specify anything, the format will similar to the events format (https://docs.getunleash.io/reference/api/legacy/unleash/admin/events)",
                    "type": "textfield",
                    "required": false,
                    "sensitive": false
                  }
                ],
                "events": [
                  "feature-created",
                  "feature-updated",
                  "feature-archived",
                  "feature-revived",
                  "feature-stale-on",
                  "feature-stale-off",
                  "feature-environment-enabled",
                  "feature-environment-disabled",
                  "feature-strategy-remove",
                  "feature-strategy-update",
                  "feature-strategy-add",
                  "feature-metadata-updated",
                  "feature-variants-updated",
                  "feature-project-change",
                  "feature-tagged",
                  "feature-untagged",
                  "change-request-created",
                  "change-request-discarded",
                  "change-added",
                  "change-discarded",
                  "change-request-approved",
                  "change-request-approval-added",
                  "change-request-cancelled",
                  "change-request-sent-to-review",
                  "change-request-applied"
                ]
              },
              {
                "name": "slack",
                "displayName": "Slack",
                "description": "Allows Unleash to post updates to Slack.",
                "documentationUrl": "https://docs.getunleash.io/docs/addons/slack",
                "parameters": [
                  {
                    "name": "url",
                    "displayName": "Slack webhook URL",
                    "description": "(Required)",
                    "type": "url",
                    "required": true,
                    "sensitive": true
                  },
                  {
                    "name": "username",
                    "displayName": "Username",
                    "placeholder": "Unleash",
                    "description": "The username to use when posting messages to slack. Defaults to \"Unleash\".",
                    "type": "text",
                    "required": false,
                    "sensitive": false
                  },
                  {
                    "name": "emojiIcon",
                    "displayName": "Emoji Icon",
                    "placeholder": ":unleash:",
                    "description": "The emoji_icon to use when posting messages to slack. Defaults to \":unleash:\".",
                    "type": "text",
                    "required": false,
                    "sensitive": false
                  },
                  {
                    "name": "defaultChannel",
                    "displayName": "Default channel",
                    "description": "(Required) Default channel to post updates to if not specified in the slack-tag",
                    "type": "text",
                    "required": true,
                    "sensitive": false
                  }
                ],
                "events": [
                  "feature-created",
                  "feature-updated",
                  "feature-archived",
                  "feature-revived",
                  "feature-stale-on",
                  "feature-stale-off",
                  "feature-environment-enabled",
                  "feature-environment-disabled",
                  "feature-strategy-remove",
                  "feature-strategy-update",
                  "feature-strategy-add",
                  "feature-metadata-updated",
                  "feature-variants-updated",
                  "feature-project-change"
                ],
                "tagTypes": [
                  {
                    "name": "slack",
                    "description": "Slack tag used by the slack-addon to specify the slack channel.",
                    "icon": "S"
                  }
                ]
              },
              {
                "name": "teams",
                "displayName": "Microsoft Teams",
                "description": "Allows Unleash to post updates to Microsoft Teams.",
                "documentationUrl": "https://docs.getunleash.io/docs/addons/teams",
                "parameters": [
                  {
                    "name": "url",
                    "displayName": "Microsoft Teams webhook URL",
                    "description": "(Required)",
                    "type": "url",
                    "required": true,
                    "sensitive": true
                  }
                ],
                "events": [
                  "feature-created",
                  "feature-updated",
                  "feature-archived",
                  "feature-revived",
                  "feature-stale-on",
                  "feature-stale-off",
                  "feature-environment-enabled",
                  "feature-environment-disabled",
                  "feature-strategy-remove",
                  "feature-strategy-update",
                  "feature-strategy-add",
                  "feature-metadata-updated",
                  "feature-variants-updated",
                  "feature-project-change"
                ]
              },
              {
                "name": "datadog",
                "displayName": "Datadog",
                "description": "Allows Unleash to post updates to Datadog.",
                "documentationUrl": "https://docs.getunleash.io/docs/addons/datadog",
                "parameters": [
                  {
                    "name": "url",
                    "displayName": "Datadog Events URL",
                    "description": "Default URL: https://api.datadoghq.com/api/v1/events. Needs to be changed if your're not using the US1 site.",
                    "type": "url",
                    "required": false,
                    "sensitive": false
                  },
                  {
                    "name": "apiKey",
                    "displayName": "Datadog API key",
                    "placeholder": "j96c23b0f12a6b3434a8d710110bd862",
                    "description": "(Required) API key to connect to Datadog",
                    "type": "text",
                    "required": true,
                    "sensitive": true
                  }
                ],
                "events": [
                  "feature-created",
                  "feature-updated",
                  "feature-archived",
                  "feature-revived",
                  "feature-stale-on",
                  "feature-stale-off",
                  "feature-environment-enabled",
                  "feature-environment-disabled",
                  "feature-strategy-remove",
                  "feature-strategy-update",
                  "feature-strategy-add",
                  "feature-metadata-updated",
                  "feature-project-change",
                  "feature-variants-updated"
                ],
                "tagTypes": [
                  {
                    "name": "datadog",
                    "description": "All Datadog tags added to a specific feature are sent to datadog event stream.",
                    "icon": "D"
                  }
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/addonTypeSchema"
            }
          }
        }
      },
      "adminCountSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Contains total admin counts for an Unleash instance.",
        "required": [
          "password",
          "noPassword",
          "service"
        ],
        "properties": {
          "password": {
            "type": "number",
            "description": "Total number of admins that have a password set."
          },
          "noPassword": {
            "type": "number",
            "description": "Total number of admins that do not have a password set. May be SSO, but may also be users that did not set a password yet."
          },
          "service": {
            "type": "number",
            "description": "Total number of service accounts that have the admin root role."
          }
        }
      },
      "adminFeaturesQuerySchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Query parameters used to modify the list of features returned.",
        "properties": {
          "tag": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "\\w+:\\w+"
            },
            "description": "Used to filter by tags. For each entry, a TAGTYPE:TAGVALUE is expected",
            "example": [
              "simple:mytag"
            ]
          },
          "namePrefix": {
            "type": "string",
            "description": "A case-insensitive prefix filter for the names of feature flags",
            "example": "demo.part1"
          }
        }
      },
      "adminSegmentSchema": {
        "type": "object",
        "required": [
          "id",
          "name",
          "constraints",
          "createdAt"
        ],
        "description": "A description of a [segment](https://docs.getunleash.io/reference/segments)",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of this segment",
            "example": 2,
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The name of this segment",
            "example": "ios-users"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description for this segment",
            "example": "IOS users segment"
          },
          "constraints": {
            "type": "array",
            "description": "The list of constraints that are used in this segment",
            "items": {
              "$ref": "#/components/schemas/constraintSchema"
            }
          },
          "usedInFeatures": {
            "type": "integer",
            "minimum": 0,
            "description": "The number of feature flags that use this segment. The number also includes the any flags with pending change requests that would add this segment.",
            "example": 3,
            "nullable": true
          },
          "usedInProjects": {
            "type": "integer",
            "minimum": 0,
            "description": "The number of projects that use this segment. The number includes any projects with pending change requests that would add this segment.",
            "example": 2,
            "nullable": true
          },
          "project": {
            "type": "string",
            "nullable": true,
            "example": "red-vista",
            "description": "The project the segment belongs to. Only present if the segment is a project-specific segment."
          },
          "createdBy": {
            "description": "The creator's email or username",
            "example": "someone@example.com",
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the segment was created",
            "example": "2023-04-12T11:13:31.960Z"
          }
        }
      },
      "advancedPlaygroundEnvironmentFeatureSchema": {
        "description": "A simplified feature flag model intended for the Unleash playground.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "environment",
          "context",
          "projectId",
          "isEnabled",
          "isEnabledInCurrentEnvironment",
          "variant",
          "variants",
          "strategies"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "my-feature",
            "description": "The feature's name."
          },
          "environment": {
            "type": "string",
            "example": "development",
            "description": "The feature's environment."
          },
          "context": {
            "description": "The context to use when evaluating flags",
            "$ref": "#/components/schemas/sdkFlatContextSchema"
          },
          "projectId": {
            "type": "string",
            "example": "my-project",
            "description": "The ID of the project that contains this feature."
          },
          "strategies": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "result",
              "data"
            ],
            "description": "Feature's applicable strategies and cumulative results of the strategies",
            "properties": {
              "result": {
                "description": "The cumulative results of all the feature's strategies. Can be `true`,\n                                  `false`, or `unknown`.\n                                  This property will only be `unknown`\n                                  if one or more of the strategies can't be fully evaluated and the rest of the strategies\n                                  all resolve to `false`.",
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "unknown"
                    ]
                  }
                ]
              },
              "data": {
                "description": "The strategies that apply to this feature.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/playgroundStrategySchema"
                }
              }
            }
          },
          "isEnabledInCurrentEnvironment": {
            "type": "boolean",
            "description": "Whether the feature is active and would be evaluated in the provided environment in a normal SDK context."
          },
          "isEnabled": {
            "description": "Whether this feature is enabled or not in the current environment.\n                          If a feature can't be fully evaluated (that is, `strategies.result` is `unknown`),\n                          this will be `false` to align with how client SDKs treat unresolved feature states.",
            "type": "boolean",
            "example": true
          },
          "variant": {
            "description": "The feature variant you receive based on the provided context or the _disabled\n                          variant_. If a feature is disabled or doesn't have any\n                          variants, you would get the _disabled variant_.\n                          Otherwise, you'll get one of the feature's defined variants.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "name",
              "enabled"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The variant's name. If there is no variant or if the flag is disabled, this will be `disabled`",
                "example": "red-variant"
              },
              "enabled": {
                "type": "boolean",
                "description": "Whether the variant is enabled or not. If the feature is disabled or if it doesn't have variants, this property will be `false`"
              },
              "payload": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "type",
                  "value"
                ],
                "description": "An optional payload attached to the variant.",
                "properties": {
                  "type": {
                    "description": "The format of the payload.",
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "The payload value stringified.",
                    "example": "{\"property\": \"value\"}"
                  }
                }
              },
              "feature_enabled": {
                "type": "boolean",
                "description": "Whether the feature is enabled or not. If the feature is disabled, this property will be `false`"
              }
            },
            "nullable": true,
            "example": {
              "name": "green",
              "enabled": true
            }
          },
          "variants": {
            "type": "array",
            "description": "The feature variants.",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            }
          }
        }
      },
      "advancedPlaygroundFeatureSchema": {
        "description": "A simplified feature flag model intended for the Unleash playground.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "projectId",
          "environments"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "my-feature",
            "description": "The feature's name."
          },
          "projectId": {
            "type": "string",
            "example": "my-project",
            "description": "The ID of the project that contains this feature."
          },
          "environments": {
            "type": "object",
            "description": "The lists of features that have been evaluated grouped by environment.",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/advancedPlaygroundEnvironmentFeatureSchema"
              }
            }
          }
        }
      },
      "advancedPlaygroundRequestSchema": {
        "description": "Data for the playground API to evaluate toggles in advanced mode with environment and context multi selection",
        "type": "object",
        "required": [
          "environments",
          "context"
        ],
        "properties": {
          "environments": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9~_.-]+$"
            },
            "minItems": 1,
            "example": [
              "development",
              "production"
            ],
            "description": "The environments to evaluate toggles in."
          },
          "projects": {
            "description": "A list of projects to check for toggles in.",
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "my-project"
                ],
                "description": "A list of projects to check for toggles in."
              },
              {
                "type": "string",
                "enum": [
                  "*"
                ],
                "description": "Check toggles in all projects."
              }
            ]
          },
          "context": {
            "$ref": "#/components/schemas/sdkContextSchema"
          }
        }
      },
      "advancedPlaygroundResponseSchema": {
        "description": "The state of all features given the provided input.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "features",
          "input"
        ],
        "properties": {
          "input": {
            "description": "The given input used to evaluate the features.",
            "$ref": "#/components/schemas/advancedPlaygroundRequestSchema"
          },
          "features": {
            "type": "array",
            "description": "The list of features that have been evaluated.",
            "items": {
              "$ref": "#/components/schemas/advancedPlaygroundFeatureSchema"
            }
          },
          "warnings": {
            "type": "object",
            "description": "Warnings that occurred during evaluation.",
            "properties": {
              "invalidContextProperties": {
                "type": "array",
                "description": "A list of top-level context properties that were provided as input that are not valid due to being the wrong type.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "apiTokenSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "secret",
          "tokenName",
          "type",
          "project",
          "projects",
          "createdAt"
        ],
        "description": "An overview of an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys).",
        "properties": {
          "secret": {
            "type": "string",
            "description": "The token used for authentication.",
            "example": "project:environment.xyzrandomstring"
          },
          "username": {
            "type": "string",
            "deprecated": true,
            "description": "This property was deprecated in Unleash v5. Prefer the `tokenName` property instead.",
            "example": "a-name"
          },
          "tokenName": {
            "type": "string",
            "description": "A unique name for this particular token",
            "example": "some-user"
          },
          "type": {
            "type": "string",
            "enum": [
              "client",
              "admin",
              "frontend"
            ],
            "description": "The type of API token",
            "example": "client"
          },
          "environment": {
            "type": "string",
            "description": "The environment the token has access to. `*` if it has access to all environments.",
            "example": "development"
          },
          "project": {
            "type": "string",
            "description": "The project this token belongs to.",
            "example": "developerexperience"
          },
          "projects": {
            "type": "array",
            "description": "The list of projects this token has access to. If the token has access to specific projects they will be listed here. If the token has access to all projects it will be represented as `[*]`",
            "items": {
              "type": "string"
            },
            "example": [
              "developerexperience",
              "enterprisegrowth"
            ]
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The token's expiration date. NULL if the token doesn't have an expiration set.",
            "example": "2023-04-19T08:15:14.000Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-04-19T08:15:14.000Z",
            "description": "When the token was created."
          },
          "seenAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-04-19T08:15:14.000Z",
            "description": "When the token was last seen/used to authenticate with. NULL if the token has not yet been used for authentication."
          },
          "alias": {
            "type": "string",
            "nullable": true,
            "description": "Alias is no longer in active use and will often be NULL. It's kept around as a way of allowing old proxy tokens created with the old metadata format to keep working.",
            "example": "randomid-or-some-alias"
          }
        }
      },
      "apiTokensSchema": {
        "type": "object",
        "description": "An object with [Unleash API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys)",
        "additionalProperties": false,
        "required": [
          "tokens"
        ],
        "properties": {
          "tokens": {
            "type": "array",
            "description": "A list of Unleash API tokens.",
            "items": {
              "$ref": "#/components/schemas/apiTokenSchema"
            }
          }
        }
      },
      "applicationEnvironmentInstancesSchema": {
        "type": "object",
        "description": "Data about an application environment instances that are connected to Unleash via an SDK.",
        "additionalProperties": false,
        "required": [
          "instances"
        ],
        "properties": {
          "instances": {
            "type": "array",
            "description": "A list of instances",
            "items": {
              "type": "object",
              "required": [
                "instanceId"
              ],
              "additionalProperties": false,
              "properties": {
                "instanceId": {
                  "description": "A unique identifier identifying the instance of the application running the SDK. Often changes based on execution environment. For instance: two pods in Kubernetes will have two different instanceIds",
                  "type": "string",
                  "example": "b77f3d13-5f48-4a7b-a3f4-a449b97ce43a"
                },
                "sdkVersion": {
                  "type": "string",
                  "description": "An SDK version identifier. Usually formatted as \"unleash-client-<language>:<version>\"",
                  "example": "unleash-client-java:7.0.0"
                },
                "clientIp": {
                  "type": "string",
                  "description": "An IP address identifying the instance of the application running the SDK",
                  "example": "192.168.0.1"
                },
                "lastSeen": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-04-19T08:15:14.000Z",
                  "description": "The last time the application environment instance was seen"
                }
              }
            }
          }
        }
      },
      "applicationEnvironmentIssuesSchema": {
        "type": "object",
        "description": "This list of issues that might be wrong with the application",
        "additionalProperties": false,
        "required": [
          "missingFeatures",
          "outdatedSdks"
        ],
        "properties": {
          "missingFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of features that are missing in Unleash",
            "example": [
              "feature1",
              "feature2"
            ]
          },
          "outdatedSdks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of used SDKs that are outdated",
            "example": [
              "unleash-client-node:5.4.0",
              "unleash-client-node:5.3.0"
            ]
          }
        }
      },
      "applicationOverviewEnvironmentSchema": {
        "type": "object",
        "description": "Data about an application environment",
        "additionalProperties": false,
        "required": [
          "name",
          "instanceCount",
          "sdks",
          "lastSeen",
          "issues"
        ],
        "properties": {
          "name": {
            "description": "Name of the application environment",
            "type": "string",
            "example": "production"
          },
          "instanceCount": {
            "description": "The number of instances of the application environment",
            "type": "number",
            "example": 5
          },
          "sdks": {
            "description": "SDKs used in the application environment",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "unleash-client-node:5.4.0",
              "unleash-client-node:5.3.0"
            ]
          },
          "lastSeen": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "example": "2023-04-19T08:15:14.000Z",
            "description": "The last time the application environment was seen"
          },
          "issues": {
            "description": "This list of issues that might be wrong with the application",
            "$ref": "#/components/schemas/applicationEnvironmentIssuesSchema"
          }
        }
      },
      "applicationOverviewIssuesSchema": {
        "type": "object",
        "description": "This list of issues that might be wrong with the application",
        "additionalProperties": false,
        "required": [
          "missingStrategies"
        ],
        "properties": {
          "missingStrategies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of strategies that are missing from Unleash",
            "example": [
              "feature1",
              "feature2"
            ]
          }
        }
      },
      "applicationOverviewSchema": {
        "type": "object",
        "description": "Data about an application that's connected to Unleash via an SDK.",
        "additionalProperties": false,
        "required": [
          "projects",
          "featureCount",
          "environments",
          "issues"
        ],
        "properties": {
          "projects": {
            "description": "The list of projects the application has been using.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "default",
              "payment"
            ]
          },
          "featureCount": {
            "description": "The number of features the application has been using.",
            "type": "number",
            "example": 5
          },
          "environments": {
            "type": "array",
            "description": "The list of environments the application has been using.",
            "items": {
              "$ref": "#/components/schemas/applicationOverviewEnvironmentSchema"
            }
          },
          "issues": {
            "description": "This list of issues that might be wrong with the application",
            "$ref": "#/components/schemas/applicationOverviewIssuesSchema"
          }
        }
      },
      "applicationSchema": {
        "type": "object",
        "description": "Data about an application that's connected to Unleash via an SDK.",
        "additionalProperties": false,
        "required": [
          "appName"
        ],
        "properties": {
          "appName": {
            "description": "Name of the application",
            "type": "string",
            "example": "accounting"
          },
          "sdkVersion": {
            "description": "Which SDK and version the application reporting uses. Typically represented as `<identifier>:<version>`",
            "type": "string",
            "example": "unleash-client-java:8.0.0"
          },
          "strategies": {
            "description": "Which [strategies](https://docs.getunleash.io/topics/the-anatomy-of-unleash#activation-strategies) the application has loaded. Useful when trying to figure out if your [custom strategy](https://docs.getunleash.io/reference/custom-activation-strategies) has been loaded in the SDK",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "standard",
              "gradualRollout",
              "mySpecialCustomStrategy"
            ]
          },
          "description": {
            "description": "Extra information added about the application reporting the metrics. Only present if added via the Unleash Admin interface",
            "type": "string",
            "example": "Application for reporting page visits"
          },
          "url": {
            "description": "A link to reference the application reporting the metrics. Could for instance be a GitHub link to the repository of the application",
            "type": "string",
            "example": "https://github.com/Unleash/unleash-proxy-client-js"
          },
          "color": {
            "description": "The CSS color that is used to color the application's entry in the application list",
            "type": "string",
            "example": "red"
          },
          "icon": {
            "description": "An URL to an icon file to be used for the applications's entry in the application list",
            "type": "string",
            "example": "https://github.com/favicon.ico"
          },
          "usage": {
            "description": "The list of projects the application has been using.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationUsageSchema"
            }
          }
        }
      },
      "applicationUsageSchema": {
        "type": "object",
        "description": "Data about an project that have been used by applications.",
        "additionalProperties": false,
        "required": [
          "project",
          "environments"
        ],
        "properties": {
          "project": {
            "description": "Name of the project",
            "type": "string",
            "example": "main-project"
          },
          "environments": {
            "description": "Which environments have been accessed in this project.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "development",
              "production"
            ]
          }
        }
      },
      "applicationsSchema": {
        "additionalProperties": false,
        "description": "An object containing a list of applications that have connected to Unleash via an SDK.",
        "required": [
          "total",
          "applications"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "example": 50,
            "description": "The total number of project applications."
          },
          "applications": {
            "description": "The list of applications that have connected to this Unleash instance.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationSchema"
            }
          }
        }
      },
      "batchFeaturesSchema": {
        "type": "object",
        "description": "A list of feature flag names for batch operations",
        "required": [
          "features"
        ],
        "properties": {
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of feature flag names",
            "example": [
              "my-feature-4",
              "my-feature-5",
              "my-feature-6"
            ]
          }
        }
      },
      "batchStaleSchema": {
        "type": "object",
        "description": "A list of features to operate on and whether they should be marked as stale or as not stale.",
        "required": [
          "features",
          "stale"
        ],
        "properties": {
          "features": {
            "type": "array",
            "description": "A list of features to mark as (not) stale",
            "example": [
              "my-feature-1",
              "my-feature-2",
              "my-feature-3"
            ],
            "items": {
              "type": "string",
              "description": "A feature name",
              "example": "my-feature-5"
            }
          },
          "stale": {
            "type": "boolean",
            "example": true,
            "description": "Whether the list of features should be marked as stale or not stale. If `true`, the features will be marked as stale. If `false`, the features will be marked as not stale."
          }
        }
      },
      "bulkMetricsSchema": {
        "type": "object",
        "required": [
          "applications",
          "metrics"
        ],
        "description": "A batch of metrics accumulated by Edge (or other compatible applications). Includes both application registrations as well usage metrics from clients",
        "properties": {
          "applications": {
            "description": "A list of applications registered by an Unleash SDK",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bulkRegistrationSchema"
            }
          },
          "metrics": {
            "description": "a list of client usage metrics registered by downstream providers. (Typically Unleash Edge)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/clientMetricsEnvSchema"
            }
          }
        }
      },
      "bulkRegistrationSchema": {
        "type": "object",
        "required": [
          "appName",
          "instanceId",
          "environment"
        ],
        "description": "An application registration. Defines the format POSTed by our server-side SDKs when they're starting up",
        "properties": {
          "connectVia": {
            "type": "array",
            "description": "A list of applications this app registration has been registered through. If connected directly to Unleash, this is an empty list. \n This can be used in later visualizations to tell how many levels of proxy or Edge instances our SDKs have connected through",
            "items": {
              "type": "object",
              "required": [
                "appName",
                "instanceId"
              ],
              "properties": {
                "appName": {
                  "type": "string"
                },
                "instanceId": {
                  "type": "string"
                }
              }
            },
            "example": [
              {
                "appName": "unleash-edge",
                "instanceId": "edge-pod-bghzv5"
              }
            ]
          },
          "appName": {
            "description": "The name of the application that is evaluating toggles",
            "type": "string",
            "example": "Ingress load balancer"
          },
          "environment": {
            "description": "Which environment the application is running in",
            "type": "string",
            "example": "development"
          },
          "instanceId": {
            "description": "A [(somewhat) unique identifier](https://docs.getunleash.io/reference/sdks/node#advanced-usage) for the application",
            "type": "string",
            "example": "application-name-dacb1234"
          },
          "interval": {
            "description": "How often (in seconds) the application refreshes its features",
            "type": "number",
            "example": 10
          },
          "started": {
            "description": "The application started at",
            "example": "1952-03-11T12:00:00.000Z",
            "$ref": "#/components/schemas/dateSchema"
          },
          "strategies": {
            "description": "Enabled [strategies](https://docs.getunleash.io/reference/activation-strategies) in the application",
            "type": "array",
            "example": [
              "standard",
              "gradualRollout"
            ],
            "items": {
              "type": "string"
            }
          },
          "sdkVersion": {
            "description": "The version the sdk is running. Typically <client>:<version>",
            "example": "unleash-client-java:8.0.0",
            "type": "string"
          }
        }
      },
      "bulkToggleFeaturesSchema": {
        "type": "object",
        "required": [
          "features"
        ],
        "description": "The feature list used for bulk toggle operations",
        "properties": {
          "features": {
            "type": "array",
            "description": "The features that we want to bulk toggle",
            "items": {
              "type": "string",
              "description": "The feature name we want to toggle"
            },
            "example": [
              "feature-a",
              "feature-b"
            ]
          }
        }
      },
      "changePasswordSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "token",
          "password"
        ],
        "description": "Change password as long as the token is a valid token",
        "properties": {
          "token": {
            "description": "A reset token used to validate that the user is allowed to change the password.",
            "type": "string",
            "example": "$2a$15$QzeW/y5/MEppCWVEkoX5euejobYOLSd4We21LQjjKlWH9l2I3wCke"
          },
          "password": {
            "type": "string",
            "description": "The new password for the user",
            "example": "correct horse battery staple"
          }
        }
      },
      "clientApplicationSchema": {
        "type": "object",
        "required": [
          "appName",
          "interval",
          "started",
          "strategies"
        ],
        "description": "A client application is an instance of one of our SDKs",
        "properties": {
          "appName": {
            "description": "An identifier for the app that uses the sdk, should be static across SDK restarts",
            "type": "string",
            "example": "example-app"
          },
          "instanceId": {
            "description": "A unique identifier identifying the instance of the application running the SDK. Often changes based on execution environment. For instance: two pods in Kubernetes will have two different instanceIds",
            "type": "string",
            "example": "b77f3d13-5f48-4a7b-a3f4-a449b97ce43a"
          },
          "sdkVersion": {
            "type": "string",
            "description": "An SDK version identifier. Usually formatted as \"unleash-client-<language>:<version>\"",
            "example": "unleash-client-java:7.0.0"
          },
          "environment": {
            "description": "The SDK's configured 'environment' property. This property was deprecated in v5. This property  does **not** control which Unleash environment the SDK gets toggles for. To control Unleash environments, use the SDKs API key.",
            "deprecated": true,
            "type": "string",
            "example": "development"
          },
          "platformName": {
            "description": "The platform the application is running on. For languages that compile to binaries, this can be omitted",
            "type": "string",
            "example": ".NET Core"
          },
          "platformVersion": {
            "description": "The version of the platform the application is running on. Languages that compile to binaries, this is expected to be the compiler version used to assemble the binary.",
            "type": "string",
            "example": "3.1"
          },
          "yggdrasilVersion": {
            "description": "The semantic version of the Yggdrasil engine used by the client. If the client is using a native engine this can be omitted.",
            "type": "string",
            "example": "1.0.0"
          },
          "specVersion": {
            "description": "The version of the Unleash client specification the client supports",
            "type": "string",
            "example": "3.0.0"
          },
          "interval": {
            "type": "number",
            "description": "How often (in seconds) does the client refresh its toggles",
            "example": 10,
            "minimum": 0
          },
          "started": {
            "description": "Either an RFC-3339 timestamp or a unix timestamp in seconds",
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "number"
              }
            ],
            "example": "2023-06-13T16:35:00.000Z"
          },
          "strategies": {
            "description": "Which strategies the SDKs runtime knows about",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "default",
              "gradualRollout",
              "remoteAddress"
            ]
          }
        }
      },
      "clientFeatureSchema": {
        "type": "object",
        "required": [
          "name",
          "enabled"
        ],
        "description": "Feature flag configuration used by SDKs to evaluate state of a flag",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The unique name of a feature flag. Is validated to be URL safe on creation",
            "example": "new.payment.flow.stripe"
          },
          "type": {
            "type": "string",
            "description": "What kind of feature flag is this. Refer to the documentation on [feature flag types](https://docs.getunleash.io/reference/feature-toggle-types) for more information",
            "example": "release"
          },
          "description": {
            "type": "string",
            "description": "A description of the flag",
            "nullable": true,
            "example": "No variants here"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the feature flag is enabled for the current API key or not. This is ANDed with the evaluation results of the strategies list, so if this is false, the evaluation result will always be false",
            "example": true
          },
          "stale": {
            "description": "If this is true Unleash believes this feature flag has been active longer than Unleash expects a flag of this type to be active",
            "type": "boolean",
            "example": false
          },
          "impressionData": {
            "description": "Set to true if SDKs should trigger [impression events](https://docs.getunleash.io/reference/impression-data) when this flag is evaluated",
            "type": "boolean",
            "nullable": true,
            "example": false
          },
          "project": {
            "description": "Which project this feature flag belongs to",
            "type": "string",
            "example": "new.payment.flow"
          },
          "strategies": {
            "type": "array",
            "description": "Evaluation strategies for this flag. Each entry in this list will be evaluated and ORed together",
            "items": {
              "$ref": "#/components/schemas/featureStrategySchema"
            }
          },
          "variants": {
            "type": "array",
            "description": "[Variants](https://docs.getunleash.io/reference/feature-toggle-variants#what-are-variants) configured for this flag",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            },
            "nullable": true
          },
          "dependencies": {
            "type": "array",
            "description": "Feature dependencies for this flag",
            "items": {
              "$ref": "#/components/schemas/dependentFeatureSchema"
            }
          }
        }
      },
      "clientFeaturesQuerySchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Query parameters active for a client features request",
        "properties": {
          "tag": {
            "type": "array",
            "description": "Features tagged with one of these tags are included",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": [
              [
                "simple:payment",
                "simple:stripejourney"
              ]
            ]
          },
          "project": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Features that are part of these projects are included in this response. This is now handled by API tokens and was marked as deprecated in v5",
            "example": [
              "new.payment.flow"
            ],
            "deprecated": true
          },
          "namePrefix": {
            "description": "Features are filtered to only include features whose name starts with this prefix",
            "type": "string",
            "example": "payment"
          },
          "environment": {
            "type": "string",
            "description": "Strategies for the feature flag configured for this environment are included. This is now handled by API tokens and was marked as deprecated in v5",
            "deprecated": true
          },
          "inlineSegmentConstraints": {
            "description": "Set to true if requesting client does not support Unleash-Client-Specification 4.2.2 or newer. Modern SDKs will have this set to false, since they will be able to merge constraints and segments themselves",
            "type": "boolean",
            "example": true
          }
        }
      },
      "clientFeaturesSchema": {
        "type": "object",
        "required": [
          "version",
          "features"
        ],
        "description": "Configuration data for server-side SDKs for evaluating feature flags.",
        "properties": {
          "version": {
            "type": "number",
            "description": "A version number for the format used in the response. Most Unleash instances now return version 2, which includes segments as a separate array",
            "example": 2,
            "minimum": 0
          },
          "features": {
            "description": "A list of feature flags with their configuration",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/clientFeatureSchema"
            }
          },
          "segments": {
            "description": "A list of [Segments](https://docs.getunleash.io/reference/segments) configured for this Unleash instance",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/clientSegmentSchema"
            }
          },
          "query": {
            "description": "A summary of filters and parameters sent to the endpoint. Used by the server to build the features and segments response",
            "$ref": "#/components/schemas/clientFeaturesQuerySchema"
          }
        }
      },
      "clientMetricsEnvSchema": {
        "type": "object",
        "required": [
          "featureName",
          "appName",
          "environment"
        ],
        "description": "Used for reporting feature evaluation results from SDKs",
        "properties": {
          "featureName": {
            "type": "string",
            "description": "Name of the feature checked by the SDK",
            "example": "my.special.feature"
          },
          "appName": {
            "description": "The name of the application the SDK is being used in",
            "type": "string",
            "example": "accounting"
          },
          "environment": {
            "description": "Which environment the SDK is being used in",
            "type": "string",
            "example": "development"
          },
          "timestamp": {
            "description": "The start of the time window these metrics are valid for. The window is 1 hour wide",
            "example": "1926-05-08T12:00:00.000Z",
            "$ref": "#/components/schemas/dateSchema"
          },
          "yes": {
            "description": "How many times the toggle evaluated to true",
            "type": "integer",
            "example": 974,
            "minimum": 0
          },
          "no": {
            "description": "How many times the toggle evaluated to false",
            "type": "integer",
            "example": 50,
            "minimum": 0
          },
          "variants": {
            "description": "How many times each variant was returned",
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            },
            "example": {
              "variantA": 15,
              "variantB": 25,
              "variantC": 5
            }
          }
        }
      },
      "clientMetricsSchema": {
        "type": "object",
        "required": [
          "appName",
          "bucket"
        ],
        "description": "Client usage metrics, accumulated in buckets of hour by hour by default",
        "properties": {
          "appName": {
            "description": "The name of the application that is evaluating toggles",
            "type": "string",
            "example": "insurance-selector"
          },
          "instanceId": {
            "description": "A [(somewhat) unique identifier](https://docs.getunleash.io/reference/sdks/node#advanced-usage) for the application",
            "type": "string",
            "example": "application-name-dacb1234"
          },
          "environment": {
            "description": "Which environment the application is running in. This property was deprecated in v5. This can be determined by the API key calling this endpoint.",
            "type": "string",
            "example": "development",
            "deprecated": true
          },
          "sdkVersion": {
            "type": "string",
            "description": "An SDK version identifier. Usually formatted as \"unleash-client-<language>:<version>\"",
            "example": "unleash-client-java:7.0.0"
          },
          "platformName": {
            "description": "The platform the application is running on. For languages that compile to binaries, this can be omitted",
            "type": "string",
            "example": ".NET Core"
          },
          "platformVersion": {
            "description": "The version of the platform the application is running on. Languages that compile to binaries, this is expected to be the compiler version used to assemble the binary.",
            "type": "string",
            "example": "3.1"
          },
          "yggdrasilVersion": {
            "description": "The semantic version of the Yggdrasil engine used by the client. If the client is using a native engine this can be omitted.",
            "type": "string",
            "example": "1.0.0"
          },
          "specVersion": {
            "description": "The version of the Unleash client specification the client supports",
            "type": "string",
            "example": "3.0.0"
          },
          "bucket": {
            "type": "object",
            "required": [
              "start",
              "stop",
              "toggles"
            ],
            "description": "Holds all metrics gathered over a window of time. Typically 1 hour wide",
            "properties": {
              "start": {
                "$ref": "#/components/schemas/dateSchema",
                "description": "The start of the time window these metrics are valid for. The window is usually 1 hour wide",
                "example": "1926-05-08T12:00:00.000Z"
              },
              "stop": {
                "$ref": "#/components/schemas/dateSchema",
                "description": "The end of the time window these metrics are valid for. The window is 1 hour wide",
                "example": "1926-05-08T13:00:00.000Z"
              },
              "toggles": {
                "type": "object",
                "description": "an object containing feature names with yes/no plus variant usage",
                "example": {
                  "myCoolToggle": {
                    "yes": 25,
                    "no": 42,
                    "variants": {
                      "blue": 6,
                      "green": 15,
                      "red": 46
                    }
                  },
                  "myOtherToggle": {
                    "yes": 0,
                    "no": 100
                  }
                },
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "yes": {
                      "description": "How many times the toggle evaluated to true",
                      "type": "number",
                      "example": 974,
                      "minimum": 0
                    },
                    "no": {
                      "description": "How many times the toggle evaluated to false",
                      "type": "integer",
                      "example": 50,
                      "minimum": 0
                    },
                    "variants": {
                      "description": "An object describing how many times each variant was returned. Variant names are used as properties, and the number of times they were exposed is the corresponding value (i.e. `{ [variantName]: number }`).",
                      "type": "object",
                      "additionalProperties": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "example": {
                        "variantA": 15,
                        "variantB": 25,
                        "variantC": 5
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "clientSegmentSchema": {
        "type": "object",
        "description": "Represents a client API segment of users defined by a set of constraints.",
        "additionalProperties": false,
        "required": [
          "id",
          "constraints"
        ],
        "properties": {
          "id": {
            "type": "number",
            "description": "The segment's id."
          },
          "name": {
            "type": "string",
            "description": "The name of the segment.",
            "example": "segment A"
          },
          "constraints": {
            "type": "array",
            "description": "List of constraints that determine which users are part of the segment",
            "items": {
              "$ref": "#/components/schemas/constraintSchema"
            }
          }
        }
      },
      "cloneFeatureSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "description": "Copy of a feature with a new name",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the new feature",
            "example": "new-feature"
          },
          "replaceGroupId": {
            "type": "boolean",
            "example": true,
            "description": "Whether to use the new feature name as its group ID or not. Group ID is used for calculating [stickiness](https://docs.getunleash.io/reference/stickiness#calculation). Defaults to true."
          }
        }
      },
      "constraintSchema": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "contextName",
          "operator"
        ],
        "description": "A strategy constraint. For more information, refer to [the strategy constraint reference documentation](https://docs.getunleash.io/reference/strategy-constraints)",
        "properties": {
          "contextName": {
            "description": "The name of the context field that this constraint should apply to.",
            "example": "appName",
            "type": "string"
          },
          "operator": {
            "description": "The operator to use when evaluating this constraint. For more information about the various operators, refer to [the strategy constraint operator documentation](https://docs.getunleash.io/reference/strategy-constraints#strategy-constraint-operators).",
            "type": "string",
            "enum": [
              "NOT_IN",
              "IN",
              "STR_ENDS_WITH",
              "STR_STARTS_WITH",
              "STR_CONTAINS",
              "NUM_EQ",
              "NUM_GT",
              "NUM_GTE",
              "NUM_LT",
              "NUM_LTE",
              "DATE_AFTER",
              "DATE_BEFORE",
              "SEMVER_EQ",
              "SEMVER_GT",
              "SEMVER_LT"
            ],
            "example": "IN"
          },
          "caseInsensitive": {
            "description": "Whether the operator should be case sensitive or not. Defaults to `false` (being case sensitive).",
            "type": "boolean",
            "default": false
          },
          "inverted": {
            "description": "Whether the result should be negated or not. If `true`, will turn a `true` result into a `false` result and vice versa.",
            "type": "boolean",
            "default": false
          },
          "values": {
            "type": "array",
            "description": "The context values that should be used for constraint evaluation. Use this property instead of `value` for properties that accept multiple values.",
            "items": {
              "type": "string"
            },
            "example": [
              "my-app",
              "my-other-app"
            ]
          },
          "value": {
            "description": "The context value that should be used for constraint evaluation. Use this property instead of `values` for properties that only accept single values.",
            "type": "string",
            "example": "my-app"
          }
        }
      },
      "contextFieldSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "A representation of a [context field](https://docs.getunleash.io/reference/unleash-context).",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "The name of the context field",
            "type": "string",
            "example": "userId"
          },
          "description": {
            "description": "The description of the context field.",
            "type": "string",
            "nullable": true,
            "example": "Used to uniquely identify users"
          },
          "stickiness": {
            "description": "Does this context field support being used for [stickiness](https://docs.getunleash.io/reference/stickiness) calculations",
            "type": "boolean",
            "example": true
          },
          "sortOrder": {
            "description": "Used when sorting a list of context fields. Is also used as a tiebreaker if a list of context fields is sorted alphabetically.",
            "type": "integer",
            "example": 900
          },
          "createdAt": {
            "description": "When this context field was created",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-06-29T10:19:00.000Z"
          },
          "usedInFeatures": {
            "type": "integer",
            "description": "Number of projects where this context field is used in",
            "example": 3,
            "nullable": true,
            "minimum": 0
          },
          "usedInProjects": {
            "type": "integer",
            "description": "Number of projects where this context field is used in",
            "example": 2,
            "nullable": true,
            "minimum": 0
          },
          "legalValues": {
            "description": "Allowed values for this context field schema. Can be used to narrow down accepted input",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/legalValueSchema"
            }
          }
        }
      },
      "contextFieldStrategiesSchema": {
        "type": "object",
        "description": "A wrapper object containing all strategies that use a specific context field",
        "required": [
          "strategies"
        ],
        "properties": {
          "strategies": {
            "type": "array",
            "description": "List of strategies using the context field",
            "items": {
              "type": "object",
              "required": [
                "id",
                "featureName",
                "projectId",
                "environment",
                "strategyName"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "example": "433ae8d9-dd69-4ad0-bc46-414aedbe9c55",
                  "description": "The ID of the strategy."
                },
                "featureName": {
                  "type": "string",
                  "example": "best-feature",
                  "description": "The name of the feature that contains this strategy."
                },
                "projectId": {
                  "type": "string",
                  "description": "The ID of the project that contains this feature."
                },
                "environment": {
                  "type": "string",
                  "description": "The ID of the environment where this strategy is in."
                },
                "strategyName": {
                  "type": "string",
                  "description": "The name of the strategy."
                }
              }
            }
          }
        }
      },
      "contextFieldsSchema": {
        "type": "array",
        "description": "A list of context fields",
        "items": {
          "$ref": "#/components/schemas/contextFieldSchema"
        }
      },
      "createApiTokenSchema": {
        "type": "object",
        "description": "The data required to create an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys).",
        "oneOf": [
          {
            "required": [
              "type",
              "tokenName"
            ],
            "type": "object",
            "properties": {
              "expiresAt": {
                "type": "string",
                "format": "date-time",
                "description": "The time when this token should expire.",
                "example": "2023-07-04T11:26:24+02:00"
              },
              "type": {
                "type": "string",
                "pattern": "^[Aa][Dd][Mm][Ii][Nn]$",
                "description": "An admin token. Must be the string \"admin\" (not case sensitive).",
                "example": "admin"
              },
              "tokenName": {
                "type": "string",
                "description": "The name of the token.",
                "example": "token-64522"
              }
            }
          },
          {
            "required": [
              "type",
              "username"
            ],
            "type": "object",
            "properties": {
              "expiresAt": {
                "type": "string",
                "format": "date-time",
                "description": "The time when this token should expire.",
                "example": "2023-07-04T11:26:24+02:00"
              },
              "type": {
                "type": "string",
                "pattern": "^[Aa][Dd][Mm][Ii][Nn]$",
                "description": "An admin token. Must be the string \"admin\" (not case sensitive).",
                "example": "admin"
              },
              "username": {
                "deprecated": true,
                "type": "string",
                "description": "The name of the token. This property was deprecated in v5. Use `tokenName` instead.",
                "example": "token-64523"
              }
            }
          },
          {
            "required": [
              "type",
              "tokenName"
            ],
            "type": "object",
            "properties": {
              "expiresAt": {
                "type": "string",
                "format": "date-time",
                "description": "The time when this token should expire.",
                "example": "2023-07-04T11:26:24+02:00"
              },
              "type": {
                "type": "string",
                "pattern": "^([Cc][Ll][Ii][Ee][Nn][Tt]|[Ff][Rr][Oo][Nn][Tt][Ee][Nn][Dd])$",
                "description": "A client or frontend token. Must be one of the strings \"client\" or \"frontend\" (not case sensitive).",
                "example": "frontend"
              },
              "environment": {
                "type": "string",
                "description": "The environment that the token should be valid for. Defaults to \"default\"",
                "example": "development"
              },
              "project": {
                "type": "string",
                "description": "The project that the token should be valid for. Defaults to \"*\" meaning every project. This property is mutually incompatible with the `projects` property. If you specify one, you cannot specify the other.",
                "example": "project-851"
              },
              "projects": {
                "type": "array",
                "description": "A list of projects that the token should be valid for. This property is mutually incompatible with the `project` property. If you specify one, you cannot specify the other.",
                "example": [
                  "project-851",
                  "project-852"
                ],
                "items": {
                  "type": "string"
                }
              },
              "tokenName": {
                "type": "string",
                "description": "The name of the token.",
                "example": "token-64522"
              }
            }
          },
          {
            "required": [
              "type",
              "username"
            ],
            "type": "object",
            "properties": {
              "expiresAt": {
                "type": "string",
                "format": "date-time",
                "description": "The time when this token should expire.",
                "example": "2023-07-04T11:26:24+02:00"
              },
              "type": {
                "type": "string",
                "pattern": "^([Cc][Ll][Ii][Ee][Nn][Tt]|[Ff][Rr][Oo][Nn][Tt][Ee][Nn][Dd])$",
                "description": "A client or frontend token. Must be one of the strings \"client\" or \"frontend\" (not case sensitive).",
                "example": "frontend"
              },
              "environment": {
                "type": "string",
                "description": "The environment that the token should be valid for. Defaults to \"default\"",
                "example": "development"
              },
              "project": {
                "type": "string",
                "description": "The project that the token should be valid for. Defaults to \"*\" meaning every project. This property is mutually incompatible with the `projects` property. If you specify one, you cannot specify the other.",
                "example": "project-851"
              },
              "projects": {
                "type": "array",
                "description": "A list of projects that the token should be valid for. This property is mutually incompatible with the `project` property. If you specify one, you cannot specify the other.",
                "example": [
                  "project-851",
                  "project-852"
                ],
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "deprecated": true,
                "type": "string",
                "description": "The name of the token. This property was deprecated in v5. Use `tokenName` instead.",
                "example": "token-64523"
              }
            }
          }
        ]
      },
      "createApplicationSchema": {
        "type": "object",
        "description": "Reported application information from Unleash SDKs",
        "properties": {
          "appName": {
            "description": "Name of the application",
            "type": "string",
            "example": "accounting"
          },
          "sdkVersion": {
            "description": "Which SDK and version the application reporting uses. Typically represented as `<identifier>:<version>`",
            "type": "string",
            "example": "unleash-client-java:8.0.0"
          },
          "strategies": {
            "description": "Which [strategies](https://docs.getunleash.io/topics/the-anatomy-of-unleash#activation-strategies) the application has loaded. Useful when trying to figure out if your [custom strategy](https://docs.getunleash.io/reference/custom-activation-strategies) has been loaded in the SDK",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "standard",
              "gradualRollout",
              "mySpecialCustomStrategy"
            ]
          },
          "url": {
            "description": "A link to reference the application reporting the metrics. Could for instance be a GitHub link to the repository of the application",
            "type": "string",
            "example": "https://github.com/Unleash/unleash-proxy-client-js"
          },
          "color": {
            "description": "Css color to be used to color the application's entry in the application list",
            "type": "string",
            "example": "red"
          },
          "icon": {
            "description": "An URL to an icon file to be used for the applications's entry in the application list",
            "type": "string",
            "example": "https://github.com/favicon.ico"
          }
        }
      },
      "createContextFieldSchema": {
        "type": "object",
        "description": "Data used to create a context field configuration.",
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of the context field",
            "example": "The user's subscription tier"
          },
          "stickiness": {
            "type": "boolean",
            "description": "`true` if this field should be available for use with [custom stickiness](https://docs.getunleash.io/reference/stickiness#custom-stickiness), otherwise `false`",
            "example": false
          },
          "sortOrder": {
            "type": "integer",
            "description": "How this context field should be sorted if no other sort order is selected",
            "example": 2
          },
          "legalValues": {
            "type": "array",
            "description": "A list of allowed values for this context field",
            "example": [
              {
                "value": "gold"
              },
              {
                "value": "silver"
              },
              {
                "value": "crystal"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/legalValueSchema"
            }
          },
          "name": {
            "description": "The name of the context field.",
            "type": "string",
            "example": "subscriptionTier"
          }
        },
        "required": [
          "name"
        ]
      },
      "createDependentFeatureSchema": {
        "type": "object",
        "description": "Feature dependency on a parent feature in write model",
        "required": [
          "feature"
        ],
        "properties": {
          "feature": {
            "type": "string",
            "description": "The name of the feature we depend on.",
            "example": "parent_feature"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the parent feature should be enabled. When `false` variants are ignored. `true` by default.",
            "example": false
          },
          "variants": {
            "type": "array",
            "description": "The list of variants the parent feature should resolve to. Leave empty when you only want to check the `enabled` status.",
            "items": {
              "type": "string"
            },
            "example": [
              "variantA",
              "variantB"
            ]
          }
        }
      },
      "createFeatureNamingPatternSchema": {
        "type": "object",
        "description": "Create a feature naming pattern",
        "required": [
          "pattern"
        ],
        "properties": {
          "pattern": {
            "type": "string",
            "nullable": true,
            "description": "A JavaScript regular expression pattern, without the start and end delimiters. Optional flags are not allowed.",
            "example": "^[A-Za-z]+\\.[A-Za-z]+\\.[A-Za-z0-9-]+$"
          },
          "example": {
            "type": "string",
            "nullable": true,
            "description": "An example of a feature name that matches the pattern. Must itself match the pattern supplied.",
            "example": "dx.feature1.1-135"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "A description of the pattern in a human-readable format. Will be shown to users when they create a new feature flag.",
            "example": "<project>.<featureName>.<ticket>\n\nThe flag name should contain the project name, the feature name, and the ticket number, each separated by a dot."
          }
        }
      },
      "createFeatureSchema": {
        "type": "object",
        "description": "Data used to create a new feature flag.",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "disable-comments",
            "description": "Unique feature name"
          },
          "type": {
            "enum": [
              "experiment",
              "kill-switch",
              "release",
              "operational",
              "permission"
            ],
            "example": "release",
            "description": "The feature flag's [type](https://docs.getunleash.io/reference/feature-toggle-types). One of experiment, kill-switch, release, operational, or permission"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Controls disabling of the comments section in case of an incident",
            "description": "Detailed description of the feature"
          },
          "impressionData": {
            "type": "boolean",
            "example": false,
            "description": "`true` if the impression data collection is enabled for the feature, otherwise `false`."
          },
          "tags": {
            "type": "array",
            "description": "Tags to add to the feature.",
            "items": {
              "$ref": "#/components/schemas/tagSchema"
            }
          }
        }
      },
      "createFeatureStrategySchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "description": "Create a strategy configuration in a feature",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the strategy type",
            "example": "flexibleRollout"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "description": "A descriptive title for the strategy",
            "example": "Gradual Rollout 25-Prod"
          },
          "disabled": {
            "type": "boolean",
            "description": "A toggle to disable the strategy. defaults to false. Disabled strategies are not evaluated or returned to the SDKs",
            "example": false,
            "nullable": true
          },
          "sortOrder": {
            "type": "number",
            "description": "The order of the strategy in the list",
            "example": 9999
          },
          "constraints": {
            "type": "array",
            "description": "A list of the constraints attached to the strategy. See https://docs.getunleash.io/reference/strategy-constraints",
            "example": [
              {
                "values": [
                  "1",
                  "2"
                ],
                "inverted": false,
                "operator": "IN",
                "contextName": "appName",
                "caseInsensitive": false
              }
            ],
            "items": {
              "$ref": "#/components/schemas/constraintSchema"
            }
          },
          "variants": {
            "type": "array",
            "description": "Strategy level variants",
            "items": {
              "$ref": "#/components/schemas/createStrategyVariantSchema"
            }
          },
          "parameters": {
            "description": "An object containing the parameters for the strategy",
            "example": {
              "groupId": "some_new",
              "rollout": "25",
              "stickiness": "sessionId"
            },
            "$ref": "#/components/schemas/parametersSchema"
          },
          "segments": {
            "type": "array",
            "description": "Ids of segments to use for this strategy",
            "example": [
              1,
              2
            ],
            "items": {
              "type": "number"
            }
          }
        }
      },
      "createGroupSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "description": "A detailed information about a user group",
        "properties": {
          "name": {
            "description": "The name of the group",
            "type": "string",
            "example": "DX team"
          },
          "description": {
            "description": "A custom description of the group",
            "type": "string",
            "nullable": true,
            "example": "Current members of the DX squad"
          },
          "mappingsSSO": {
            "description": "A list of SSO groups that should map to this Unleash group",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SSOGroup1",
              "SSOGroup2"
            ]
          },
          "rootRole": {
            "type": "number",
            "nullable": true,
            "description": "A role id that is used as the root role for all users in this group. This can be either the id of the Viewer, Editor or Admin role.",
            "example": 1
          },
          "users": {
            "type": "array",
            "description": "A list of users belonging to this group",
            "items": {
              "type": "object",
              "description": "A minimal user object",
              "required": [
                "user"
              ],
              "properties": {
                "user": {
                  "type": "object",
                  "description": "A minimal user object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "description": "The user id",
                      "type": "integer",
                      "minimum": 0,
                      "example": 123
                    }
                  }
                }
              }
            }
          }
        }
      },
      "createInvitedUserSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email",
          "name",
          "password"
        ],
        "description": "Data used to create a user that has been invited to Unleash.",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user's username. Must be unique if provided.",
            "example": "Hunter"
          },
          "email": {
            "type": "string",
            "description": "The invited user's email address",
            "example": "hunter@example.com"
          },
          "name": {
            "type": "string",
            "description": "The user's name",
            "example": "Hunter Burgan"
          },
          "password": {
            "type": "string",
            "description": "The user's password",
            "example": "hunter2"
          }
        }
      },
      "createPatSchema": {
        "description": "Describes the properties required to create a [personal access token](https://docs.getunleash.io/how-to/how-to-create-personal-access-tokens), or PAT. PATs are automatically scoped to the authenticated user.",
        "type": "object",
        "required": [
          "description",
          "expiresAt"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "The PAT's description.",
            "example": "user:xyzrandomstring"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "The PAT's expiration date.",
            "example": "2023-04-19T08:15:14.000Z"
          }
        }
      },
      "createStrategySchema": {
        "type": "object",
        "description": "The data required to create a strategy type. Refer to the docs on [custom strategy types](https://docs.getunleash.io/reference/custom-activation-strategies) for more information.",
        "required": [
          "name",
          "parameters"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the strategy type. Must be unique.",
            "example": "my-custom-strategy"
          },
          "title": {
            "type": "string",
            "description": "The title of the strategy",
            "example": "My awesome strategy"
          },
          "description": {
            "type": "string",
            "description": "A description of the strategy type.",
            "example": "Enable the feature for users who have not logged in before."
          },
          "editable": {
            "type": "boolean",
            "description": "Whether the strategy type is editable or not. Defaults to `true`.",
            "example": false
          },
          "deprecated": {
            "type": "boolean",
            "description": "Whether the strategy type is deprecated or not. Defaults to `false`.",
            "example": true
          },
          "parameters": {
            "type": "array",
            "description": "The parameter list lets you pass arguments to your custom activation strategy. These will be made available to your custom strategy implementation.",
            "items": {
              "type": "object",
              "required": [
                "name",
                "type"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the parameter",
                  "example": "Rollout percentage"
                },
                "type": {
                  "type": "string",
                  "description": "The [type of the parameter](https://docs.getunleash.io/reference/custom-activation-strategies#parameter-types)",
                  "enum": [
                    "string",
                    "percentage",
                    "list",
                    "number",
                    "boolean"
                  ],
                  "example": "percentage"
                },
                "description": {
                  "type": "string",
                  "description": "A description of this strategy parameter. Use this to indicate to the users what the parameter does.",
                  "example": "How many percent of users should see this feature?"
                },
                "required": {
                  "type": "boolean",
                  "description": "Whether this parameter must be configured when using the strategy. Defaults to `false`",
                  "example": false
                }
              }
            }
          }
        }
      },
      "createStrategyVariantSchema": {
        "type": "object",
        "description": "This is an experimental property. It may change or be removed as we work on it. Please don't depend on it yet. A strategy variant allows you to attach any data to strategies instead of only returning `true`/`false`. Strategy variants take precedence over feature variants.",
        "required": [
          "name",
          "weight",
          "weightType",
          "stickiness"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The variant name. Must be unique for this feature flag",
            "example": "blue_group"
          },
          "weight": {
            "type": "integer",
            "description": "The weight is the likelihood of any one user getting this variant. It is an integer between 0 and 1000. See the section on [variant weights](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight) for more information",
            "minimum": 0,
            "maximum": 1000
          },
          "weightType": {
            "description": "Set to `fix` if this variant must have exactly the weight allocated to it. If the type is `variable`, the weight will adjust so that the total weight of all variants adds up to 1000. Refer to the [variant weight documentation](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight).",
            "type": "string",
            "example": "fix",
            "enum": [
              "variable",
              "fix"
            ]
          },
          "stickiness": {
            "type": "string",
            "description": "The [stickiness](https://docs.getunleash.io/reference/feature-toggle-variants#variant-stickiness) to use for distribution of this variant. Stickiness is how Unleash guarantees that the same user gets the same variant every time",
            "example": "custom.context.field"
          },
          "payload": {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "description": "Extra data configured for this variant",
            "properties": {
              "type": {
                "description": "The type of the value. Commonly used types are string, number, json and csv.",
                "type": "string",
                "enum": [
                  "json",
                  "csv",
                  "string",
                  "number"
                ]
              },
              "value": {
                "description": "The actual value of payload",
                "type": "string"
              }
            },
            "example": {
              "type": "json",
              "value": "{\"color\": \"red\"}"
            }
          }
        }
      },
      "createTagSchema": {
        "type": "object",
        "description": "Data used to create a new [tag](https://docs.getunleash.io/reference/tags)",
        "additionalProperties": false,
        "required": [
          "value",
          "type"
        ],
        "properties": {
          "value": {
            "type": "string",
            "pattern": "^\\s*\\S.{0,48}\\S\\s*$",
            "description": "The value of the tag. The value must be between 2 and 50 characters long. Leading and trailing whitespace is ignored and will be trimmed before saving the tag value.",
            "example": "a-tag-value"
          },
          "type": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "description": "The [type](https://docs.getunleash.io/reference/tags#tag-types) of the tag",
            "example": "simple"
          }
        }
      },
      "createUserResponseSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "An Unleash user after creation",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "The user id",
            "type": "integer",
            "example": 123
          },
          "isAPI": {
            "description": "Deprecated in v5. Used internally to know which operations the user should be allowed to perform",
            "type": "boolean",
            "example": true,
            "deprecated": true
          },
          "name": {
            "description": "Name of the user",
            "type": "string",
            "example": "User",
            "nullable": true
          },
          "email": {
            "description": "Email of the user",
            "type": "string",
            "example": "user@example.com"
          },
          "username": {
            "description": "A unique username for the user",
            "type": "string",
            "example": "hunter",
            "nullable": true
          },
          "imageUrl": {
            "description": "URL used for the user profile image",
            "type": "string",
            "example": "https://example.com/242x200.png"
          },
          "inviteLink": {
            "description": "If the user is actively inviting other users, this is the link that can be shared with other users",
            "type": "string",
            "example": "http://localhost:4242/invite-link/some-secret"
          },
          "loginAttempts": {
            "description": "How many unsuccessful attempts at logging in has the user made",
            "type": "integer",
            "minimum": 0,
            "example": 3
          },
          "emailSent": {
            "description": "Is the welcome email sent to the user or not",
            "type": "boolean",
            "example": false
          },
          "rootRole": {
            "description": "Which [root role](https://docs.getunleash.io/reference/rbac#predefined-roles) this user is assigned. Usually a numeric role ID, but can be a string when returning newly created user with an explicit string role.",
            "oneOf": [
              {
                "type": "integer",
                "example": 1,
                "minimum": 0
              },
              {
                "type": "string",
                "example": "Admin",
                "enum": [
                  "Admin",
                  "Editor",
                  "Viewer",
                  "Owner",
                  "Member"
                ]
              }
            ]
          },
          "seenAt": {
            "description": "The last time this user logged in",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-06-30T11:42:00.345Z"
          },
          "createdAt": {
            "description": "The user was created at this time",
            "type": "string",
            "format": "date-time",
            "example": "2023-06-30T11:41:00.123Z"
          },
          "accountType": {
            "description": "A user is either an actual User or a Service Account",
            "type": "string",
            "example": "User"
          },
          "permissions": {
            "description": "Deprecated",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scimId": {
            "description": "The SCIM ID of the user, only present if managed by SCIM",
            "type": "string",
            "nullable": true,
            "example": "01HTMEXAMPLESCIMID7SWWGHN6"
          }
        }
      },
      "createUserSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "rootRole"
        ],
        "description": "The payload must contain at least one of the name and email properties, though which one is up to you. For the user to be able to log in to the system, the user must have an email.",
        "properties": {
          "username": {
            "description": "The user's username. Must be provided if email is not provided.",
            "type": "string",
            "example": "hunter"
          },
          "email": {
            "description": "The user's email address. Must be provided if username is not provided.",
            "type": "string",
            "example": "user@example.com"
          },
          "name": {
            "description": "The user's name (not the user's username).",
            "type": "string",
            "example": "Sam Seawright"
          },
          "password": {
            "type": "string",
            "example": "k!5As3HquUrQ",
            "description": "Password for the user"
          },
          "rootRole": {
            "description": "The role to assign to the user. Can be either the role's ID or its unique name.",
            "oneOf": [
              {
                "type": "integer",
                "example": 1,
                "minimum": 0
              },
              {
                "type": "string",
                "example": "Admin",
                "enum": [
                  "Admin",
                  "Editor",
                  "Viewer",
                  "Owner",
                  "Member"
                ]
              }
            ]
          },
          "sendEmail": {
            "type": "boolean",
            "example": false,
            "description": "Whether to send a welcome email with a login link to the user or not. Defaults to `true`."
          }
        }
      },
      "dateSchema": {
        "description": "A representation of a date. Either as a date-time string or as a UNIX timestamp.",
        "oneOf": [
          {
            "type": "string",
            "format": "date-time",
            "description": "An [RFC-3339](https://www.rfc-editor.org/rfc/rfc3339.html)-compliant timestamp.",
            "example": "2023-07-27T11:23:44Z"
          },
          {
            "type": "integer",
            "description": "A [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time).",
            "example": 1690449593
          }
        ]
      },
      "dependenciesExistSchema": {
        "type": "boolean",
        "description": "`true` when any dependencies exist, `false` when no dependencies exist."
      },
      "dependentFeatureSchema": {
        "type": "object",
        "description": "Feature dependency on a parent feature in read model",
        "required": [
          "feature"
        ],
        "additionalProperties": false,
        "properties": {
          "feature": {
            "type": "string",
            "description": "The name of the feature we depend on.",
            "example": "parent_feature"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the parent feature should be enabled. When `false` variants are ignored. `true` by default.",
            "example": false
          },
          "variants": {
            "type": "array",
            "description": "The list of variants the parent feature should resolve to. Leave empty when you only want to check the `enabled` status.",
            "items": {
              "type": "string"
            },
            "example": [
              "variantA",
              "variantB"
            ]
          }
        }
      },
      "deprecatedProjectOverviewSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "name"
        ],
        "description": "A high-level overview of a project. It contains information such as project statistics, the name of the project, what members and what features it contains, etc.",
        "properties": {
          "stats": {
            "$ref": "#/components/schemas/projectStatsSchema",
            "description": "Project statistics"
          },
          "version": {
            "type": "integer",
            "example": 1,
            "description": "The schema version used to describe the project overview"
          },
          "name": {
            "type": "string",
            "example": "dx-squad",
            "description": "The name of this project"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "DX squad feature release",
            "description": "Additional information about the project"
          },
          "defaultStickiness": {
            "type": "string",
            "example": "userId",
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy"
          },
          "mode": {
            "type": "string",
            "enum": [
              "open",
              "protected",
              "private"
            ],
            "example": "open",
            "description": "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not."
          },
          "featureLimit": {
            "type": "number",
            "nullable": true,
            "example": 100,
            "description": "A limit on the number of features allowed in the project. Null if no limit."
          },
          "featureNaming": {
            "$ref": "#/components/schemas/createFeatureNamingPatternSchema"
          },
          "members": {
            "type": "number",
            "example": 4,
            "description": "The number of members this project has"
          },
          "health": {
            "type": "number",
            "example": 50,
            "description": "An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating) on a scale from 0 to 100"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/projectEnvironmentSchema"
            },
            "example": [
              {
                "environment": "development"
              },
              {
                "environment": "production",
                "defaultStrategy": {
                  "name": "flexibleRollout",
                  "constraints": [],
                  "parameters": {
                    "rollout": "50",
                    "stickiness": "customAppName",
                    "groupId": "stickytoggle"
                  }
                }
              }
            ],
            "description": "The environments that are enabled for this project"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureSchema"
            },
            "description": "The full list of features in this project (excluding archived features)"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-02-10T08:36:35.262Z",
            "description": "When the project was last updated."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-02-10T08:36:35.262Z",
            "description": "When the project was created."
          },
          "favorite": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the project was favorited, otherwise `false`."
          }
        }
      },
      "deprecatedSearchEventsSchema": {
        "type": "object",
        "description": "\n        Search for events by type, project, feature, free-text query,\n        or a combination thereof. Pass an empty object to fetch all events.\n    ",
        "properties": {
          "type": {
            "type": "string",
            "description": "Find events by event type (case-sensitive).",
            "enum": [
              "application-created",
              "feature-created",
              "feature-deleted",
              "feature-updated",
              "feature-metadata-updated",
              "feature-variants-updated",
              "feature-environment-variants-updated",
              "feature-project-change",
              "feature-archived",
              "feature-revived",
              "feature-import",
              "feature-tagged",
              "feature-tag-import",
              "feature-strategy-update",
              "feature-strategy-add",
              "feature-strategy-remove",
              "feature-type-updated",
              "feature-completed",
              "feature-uncompleted",
              "strategy-order-changed",
              "drop-feature-tags",
              "feature-untagged",
              "feature-stale-on",
              "feature-stale-off",
              "drop-features",
              "feature-environment-enabled",
              "feature-environment-disabled",
              "strategy-created",
              "strategy-deleted",
              "strategy-deprecated",
              "strategy-reactivated",
              "strategy-updated",
              "strategy-import",
              "drop-strategies",
              "context-field-created",
              "context-field-updated",
              "context-field-deleted",
              "project-access-added",
              "project-access-user-roles-updated",
              "project-access-group-roles-updated",
              "project-access-user-roles-deleted",
              "project-access-group-roles-deleted",
              "project-access-updated",
              "project-created",
              "project-updated",
              "project-deleted",
              "project-archived",
              "project-revived",
              "project-import",
              "project-user-added",
              "project-user-removed",
              "project-user-role-changed",
              "project-group-role-changed",
              "project-group-added",
              "project-group-removed",
              "role-created",
              "role-updated",
              "role-deleted",
              "drop-projects",
              "tag-created",
              "tag-deleted",
              "tag-import",
              "drop-tags",
              "tag-type-created",
              "tag-type-deleted",
              "tag-type-updated",
              "tag-type-import",
              "drop-tag-types",
              "addon-config-created",
              "addon-config-updated",
              "addon-config-deleted",
              "db-pool-update",
              "user-created",
              "user-updated",
              "user-deleted",
              "drop-environments",
              "environment-import",
              "environment-created",
              "environment-updated",
              "environment-deleted",
              "segment-created",
              "segment-updated",
              "segment-deleted",
              "group-created",
              "group-updated",
              "group-deleted",
              "group-user-added",
              "group-user-removed",
              "setting-created",
              "setting-updated",
              "setting-deleted",
              "client-metrics",
              "client-register",
              "pat-created",
              "pat-deleted",
              "public-signup-token-created",
              "public-signup-token-user-added",
              "public-signup-token-updated",
              "change-request-created",
              "change-request-discarded",
              "change-added",
              "change-discarded",
              "change-edited",
              "change-request-rejected",
              "change-request-approved",
              "change-request-approval-added",
              "change-request-cancelled",
              "change-request-sent-to-review",
              "change-request-schedule-suspended",
              "change-request-applied",
              "change-request-scheduled",
              "change-request-scheduled-application-success",
              "change-request-scheduled-application-failure",
              "change-request-configuration-updated",
              "api-token-created",
              "api-token-updated",
              "api-token-deleted",
              "feature-favorited",
              "feature-unfavorited",
              "project-favorited",
              "project-unfavorited",
              "features-exported",
              "features-imported",
              "service-account-created",
              "service-account-deleted",
              "service-account-updated",
              "feature-potentially-stale-on",
              "feature-dependency-added",
              "feature-dependency-removed",
              "feature-dependencies-removed",
              "banner-created",
              "banner-updated",
              "banner-deleted",
              "project-environment-added",
              "project-environment-removed",
              "default-strategy-updated",
              "segment-import",
              "signal-endpoint-created",
              "signal-endpoint-updated",
              "signal-endpoint-deleted",
              "signal-endpoint-token-created",
              "signal-endpoint-token-updated",
              "signal-endpoint-token-deleted",
              "actions-created",
              "actions-updated",
              "actions-deleted"
            ],
            "example": "feature-created"
          },
          "project": {
            "type": "string",
            "description": "Find events by project ID (case-sensitive).",
            "example": "default"
          },
          "feature": {
            "type": "string",
            "description": "Find events by feature flag name (case-sensitive).",
            "example": "my.first.flag"
          },
          "query": {
            "type": "string",
            "description": "Find events by a free-text search query. The query will be matched against the event type, the username or email that created the event (if any), and the event data payload (if any).",
            "example": "admin@example.com"
          },
          "limit": {
            "type": "integer",
            "description": "The maximum amount of events to return in the search result",
            "minimum": 1,
            "maximum": 100,
            "default": 100,
            "example": 50
          },
          "offset": {
            "description": "Which event id to start listing from",
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "example": 100
          }
        }
      },
      "doraFeaturesSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "timeToProduction"
        ],
        "description": "The representation of a dora time to production feature metric",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a feature flag"
          },
          "timeToProduction": {
            "type": "number",
            "description": "The average number of days it takes a feature flag to get into production"
          }
        }
      },
      "edgeTokenSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "token",
          "projects",
          "type"
        ],
        "description": "A representation of a client token, limiting access to [CLIENT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#client-tokens) (used by serverside SDKs) or [FRONTEND](https://docs.getunleash.io/reference/api-tokens-and-client-keys#front-end-tokens) (used by proxy SDKs)",
        "properties": {
          "projects": {
            "description": "The list of projects this token has access to. If the token has access to specific projects they will be listed here. If the token has access to all projects it will be represented as [`*`]",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "developerexperience",
              "enterprisegrowth"
            ]
          },
          "type": {
            "description": "The [API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys#api-tokens)'s **type**. Unleash supports three different types of API tokens ([ADMIN](https://docs.getunleash.io/reference/api-tokens-and-client-keys#admin-tokens), [CLIENT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#client-tokens), [FRONTEND](https://docs.getunleash.io/reference/api-tokens-and-client-keys#front-end-tokens)). They all have varying access, so when validating a token it's important to know what kind you're dealing with",
            "type": "string",
            "enum": [
              "client",
              "admin",
              "frontend"
            ],
            "example": "client"
          },
          "token": {
            "description": "The actual token value. [Unleash API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys) are comprised of three parts. <project(s)>:<environment>.randomcharacters",
            "type": "string",
            "example": "*:development.5c806b5320c88cf27e81f3e9b97dab298a77d5879316e3c2d806206b"
          }
        }
      },
      "emailSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email"
        ],
        "description": "Represents the email of a user. Used to send email communication (reset password, welcome mail etc)",
        "properties": {
          "email": {
            "description": "The email address",
            "type": "string",
            "example": "test@example.com"
          }
        }
      },
      "environmentProjectSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "type",
          "enabled",
          "protected",
          "sortOrder"
        ],
        "description": "Describes a project's configuration in a given environment.",
        "properties": {
          "name": {
            "type": "string",
            "example": "development",
            "description": "The name of the environment"
          },
          "type": {
            "type": "string",
            "example": "production",
            "description": "The [type of environment](https://docs.getunleash.io/reference/environments#environment-types)."
          },
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the environment is enabled for the project, otherwise `false`"
          },
          "protected": {
            "type": "boolean",
            "example": false,
            "description": "`true` if the environment is protected, otherwise `false`. A *protected* environment can not be deleted."
          },
          "sortOrder": {
            "type": "integer",
            "example": 1,
            "description": "Priority of the environment in a list of environments, the lower the value, the higher up in the list the environment will appear"
          },
          "projectApiTokenCount": {
            "type": "integer",
            "minimum": 0,
            "example": 5,
            "description": "The number of client and front-end API tokens that have access to this project"
          },
          "projectEnabledToggleCount": {
            "type": "integer",
            "minimum": 0,
            "example": 7,
            "description": "The number of features enabled in this environment for this project"
          },
          "defaultStrategy": {
            "description": "The strategy configuration to add when enabling a feature environment by default",
            "$ref": "#/components/schemas/createFeatureStrategySchema"
          }
        }
      },
      "environmentSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "type",
          "enabled",
          "protected",
          "sortOrder"
        ],
        "description": "A definition of the project environment",
        "properties": {
          "name": {
            "type": "string",
            "example": "my-dev-env",
            "description": "The name of the environment"
          },
          "type": {
            "type": "string",
            "example": "development",
            "description": "The [type of environment](https://docs.getunleash.io/reference/environments#environment-types)."
          },
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the environment is enabled for the project, otherwise `false`."
          },
          "protected": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the environment is protected, otherwise `false`. A *protected* environment can not be deleted."
          },
          "sortOrder": {
            "type": "integer",
            "example": 3,
            "description": "Priority of the environment in a list of environments, the lower the value, the higher up in the list the environment will appear. Needs to be an integer"
          },
          "projectCount": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "example": 10,
            "description": "The number of projects with this environment"
          },
          "apiTokenCount": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "example": 6,
            "description": "The number of API tokens for the project environment"
          },
          "enabledToggleCount": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "example": 10,
            "description": "The number of enabled toggles for the project environment"
          }
        }
      },
      "environmentsProjectSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "environments"
        ],
        "description": "Environments defined for a given project",
        "properties": {
          "version": {
            "type": "integer",
            "example": 1,
            "description": "Version of the environments schema"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/environmentProjectSchema"
            },
            "description": "List of environments"
          }
        }
      },
      "environmentsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "environments"
        ],
        "description": "A versioned list of environments",
        "properties": {
          "version": {
            "type": "integer",
            "example": 1,
            "description": "Version of the environments schema"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/environmentSchema"
            },
            "description": "List of environments"
          }
        }
      },
      "eventCreatorsSchema": {
        "type": "array",
        "description": "A list of event creators",
        "items": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "id",
            "name"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "example": 50,
              "description": "The user id."
            },
            "name": {
              "description": "Name of the user. If the user has no set name, the API falls back to using the user's username (if they have one) or email (if neither name or username is set).",
              "type": "string",
              "example": "User"
            }
          }
        }
      },
      "eventSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "createdAt",
          "type",
          "createdBy"
        ],
        "description": "An event describing something happening in the system",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1,
            "description": "The ID of the event. An increasing natural number."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time the event happened as a RFC 3339-conformant timestamp.",
            "example": "2023-07-05T12:56:00.000Z"
          },
          "type": {
            "type": "string",
            "description": "What [type](https://docs.getunleash.io/reference/api/legacy/unleash/admin/events#event-type-description) of event this is",
            "enum": [
              "application-created",
              "feature-created",
              "feature-deleted",
              "feature-updated",
              "feature-metadata-updated",
              "feature-variants-updated",
              "feature-environment-variants-updated",
              "feature-project-change",
              "feature-archived",
              "feature-revived",
              "feature-import",
              "feature-tagged",
              "feature-tag-import",
              "feature-strategy-update",
              "feature-strategy-add",
              "feature-strategy-remove",
              "feature-type-updated",
              "feature-completed",
              "feature-uncompleted",
              "strategy-order-changed",
              "drop-feature-tags",
              "feature-untagged",
              "feature-stale-on",
              "feature-stale-off",
              "drop-features",
              "feature-environment-enabled",
              "feature-environment-disabled",
              "strategy-created",
              "strategy-deleted",
              "strategy-deprecated",
              "strategy-reactivated",
              "strategy-updated",
              "strategy-import",
              "drop-strategies",
              "context-field-created",
              "context-field-updated",
              "context-field-deleted",
              "project-access-added",
              "project-access-user-roles-updated",
              "project-access-group-roles-updated",
              "project-access-user-roles-deleted",
              "project-access-group-roles-deleted",
              "project-access-updated",
              "project-created",
              "project-updated",
              "project-deleted",
              "project-archived",
              "project-revived",
              "project-import",
              "project-user-added",
              "project-user-removed",
              "project-user-role-changed",
              "project-group-role-changed",
              "project-group-added",
              "project-group-removed",
              "role-created",
              "role-updated",
              "role-deleted",
              "drop-projects",
              "tag-created",
              "tag-deleted",
              "tag-import",
              "drop-tags",
              "tag-type-created",
              "tag-type-deleted",
              "tag-type-updated",
              "tag-type-import",
              "drop-tag-types",
              "addon-config-created",
              "addon-config-updated",
              "addon-config-deleted",
              "db-pool-update",
              "user-created",
              "user-updated",
              "user-deleted",
              "drop-environments",
              "environment-import",
              "environment-created",
              "environment-updated",
              "environment-deleted",
              "segment-created",
              "segment-updated",
              "segment-deleted",
              "group-created",
              "group-updated",
              "group-deleted",
              "group-user-added",
              "group-user-removed",
              "setting-created",
              "setting-updated",
              "setting-deleted",
              "client-metrics",
              "client-register",
              "pat-created",
              "pat-deleted",
              "public-signup-token-created",
              "public-signup-token-user-added",
              "public-signup-token-updated",
              "change-request-created",
              "change-request-discarded",
              "change-added",
              "change-discarded",
              "change-edited",
              "change-request-rejected",
              "change-request-approved",
              "change-request-approval-added",
              "change-request-cancelled",
              "change-request-sent-to-review",
              "change-request-schedule-suspended",
              "change-request-applied",
              "change-request-scheduled",
              "change-request-scheduled-application-success",
              "change-request-scheduled-application-failure",
              "change-request-configuration-updated",
              "api-token-created",
              "api-token-updated",
              "api-token-deleted",
              "feature-favorited",
              "feature-unfavorited",
              "project-favorited",
              "project-unfavorited",
              "features-exported",
              "features-imported",
              "service-account-created",
              "service-account-deleted",
              "service-account-updated",
              "feature-potentially-stale-on",
              "feature-dependency-added",
              "feature-dependency-removed",
              "feature-dependencies-removed",
              "banner-created",
              "banner-updated",
              "banner-deleted",
              "project-environment-added",
              "project-environment-removed",
              "default-strategy-updated",
              "segment-import",
              "signal-endpoint-created",
              "signal-endpoint-updated",
              "signal-endpoint-deleted",
              "signal-endpoint-token-created",
              "signal-endpoint-token-updated",
              "signal-endpoint-token-deleted",
              "actions-created",
              "actions-updated",
              "actions-deleted"
            ],
            "example": "feature-created"
          },
          "createdBy": {
            "type": "string",
            "description": "Which user created this event",
            "example": "johndoe"
          },
          "createdByUserId": {
            "type": "number",
            "description": "The is of the user that created this event",
            "example": 1337,
            "nullable": true
          },
          "environment": {
            "type": "string",
            "description": "The feature flag environment the event relates to, if applicable.",
            "nullable": true,
            "example": "development"
          },
          "project": {
            "type": "string",
            "nullable": true,
            "description": "The project the event relates to, if applicable.",
            "example": "default"
          },
          "featureName": {
            "type": "string",
            "nullable": true,
            "description": "The name of the feature flag the event relates to, if applicable.",
            "example": "my.first.feature"
          },
          "data": {
            "type": "object",
            "nullable": true,
            "x-enforcer-exception-skip-codes": "WSCH006",
            "description": "Extra associated data related to the event, such as feature flag state, segment configuration, etc., if applicable.",
            "example": {
              "name": "new-feature",
              "description": "Flag description",
              "type": "release",
              "project": "my-project",
              "stale": false,
              "variants": [],
              "createdAt": "2022-05-31T13:32:20.547Z",
              "lastSeenAt": null,
              "impressionData": true
            }
          },
          "preData": {
            "type": "object",
            "nullable": true,
            "x-enforcer-exception-skip-codes": "WSCH006",
            "description": "Data relating to the previous state of the event's subject.",
            "example": {
              "name": "new-feature",
              "description": "Flag description",
              "type": "release",
              "project": "my-project",
              "stale": false,
              "variants": [],
              "createdAt": "2022-05-31T13:32:20.547Z",
              "lastSeenAt": null,
              "impressionData": true
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tagSchema"
            },
            "nullable": true,
            "description": "Any tags related to the event, if applicable."
          }
        }
      },
      "eventSearchResponseSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "events",
          "total"
        ],
        "description": "A list of events that have been registered by the system",
        "properties": {
          "events": {
            "description": "The list of events",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/eventSchema"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total count of events",
            "minimum": 0,
            "example": 842
          }
        }
      },
      "eventsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "events"
        ],
        "description": "A list of events that has happened in the system",
        "properties": {
          "version": {
            "type": "integer",
            "minimum": 1,
            "enum": [
              1
            ],
            "description": "The api version of this response. A natural increasing number. Only increases if format changes",
            "example": 1
          },
          "events": {
            "description": "The list of events",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/eventSchema"
            }
          },
          "totalEvents": {
            "type": "integer",
            "description": "The total count of events",
            "minimum": 0,
            "example": 842
          }
        }
      },
      "exportQuerySchema": {
        "type": "object",
        "description": "Available query parameters for  the [deprecated export/import](https://docs.getunleash.io/reference/deploy/import-export) functionality.",
        "anyOf": [
          {
            "required": [
              "environment",
              "features"
            ],
            "properties": {
              "environment": {
                "type": "string",
                "example": "development",
                "description": "The environment to export from"
              },
              "downloadFile": {
                "type": "boolean",
                "example": true,
                "description": "Whether to return a downloadable file"
              },
              "features": {
                "type": "array",
                "example": [
                  "MyAwesomeFeature"
                ],
                "items": {
                  "type": "string",
                  "minLength": 1
                },
                "description": "Selects features to export by name. If the list is empty all features are returned."
              }
            }
          },
          {
            "required": [
              "environment",
              "tag"
            ],
            "properties": {
              "environment": {
                "type": "string",
                "example": "development",
                "description": "The environment to export from"
              },
              "downloadFile": {
                "type": "boolean",
                "example": true,
                "description": "Whether to return a downloadable file"
              },
              "tag": {
                "type": "string",
                "example": "release",
                "description": "Selects features to export by tag."
              }
            }
          },
          {
            "required": [
              "environment",
              "project"
            ],
            "properties": {
              "environment": {
                "type": "string",
                "example": "development",
                "description": "The environment to export from"
              },
              "downloadFile": {
                "type": "boolean",
                "example": true,
                "description": "Whether to return a downloadable file"
              },
              "project": {
                "type": "string",
                "example": "my-project",
                "description": "Selects project to export the features from. Used when no tags or features are provided."
              }
            }
          }
        ]
      },
      "exportResultSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "The result of the export operation, providing you with the feature flag definitions, strategy definitions and the rest of the elements relevant to the features (tags, environments etc.)",
        "required": [
          "features",
          "featureStrategies",
          "tagTypes"
        ],
        "properties": {
          "features": {
            "type": "array",
            "description": "All the exported features.",
            "example": [
              {
                "name": "my-feature",
                "description": "best feature ever",
                "type": "release",
                "project": "default",
                "stale": false,
                "impressionData": false,
                "archived": false
              }
            ],
            "items": {
              "$ref": "#/components/schemas/featureSchema"
            }
          },
          "featureStrategies": {
            "type": "array",
            "description": "All strategy instances that are used by the exported features in the `features` list.",
            "example": [
              {
                "name": "flexibleRollout",
                "id": "924974d7-8003-43ee-87eb-c5f887c06fd1",
                "featureName": "my-feature",
                "title": "Rollout 50%",
                "parameters": {
                  "groupId": "default",
                  "rollout": "50",
                  "stickiness": "random"
                },
                "constraints": [],
                "disabled": false,
                "segments": [
                  1
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/featureStrategySchema"
            }
          },
          "featureEnvironments": {
            "type": "array",
            "description": "Environment-specific configuration for all the features in the `features` list. Includes data such as whether the feature is enabled in the selected export environment, whether there are any variants assigned, etc.",
            "example": [
              {
                "enabled": true,
                "featureName": "my-feature",
                "environment": "development",
                "variants": [
                  {
                    "name": "a",
                    "weight": 500,
                    "overrides": [],
                    "stickiness": "random",
                    "weightType": "variable"
                  },
                  {
                    "name": "b",
                    "weight": 500,
                    "overrides": [],
                    "stickiness": "random",
                    "weightType": "variable"
                  }
                ],
                "name": "variant-testing"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/featureEnvironmentSchema"
            }
          },
          "contextFields": {
            "type": "array",
            "description": "A list of all the context fields that are in use by any of the strategies in the `featureStrategies` list.",
            "example": [
              {
                "name": "appName",
                "description": "Allows you to constrain on application name",
                "stickiness": false,
                "sortOrder": 2,
                "legalValues": []
              }
            ],
            "items": {
              "$ref": "#/components/schemas/contextFieldSchema"
            }
          },
          "featureTags": {
            "type": "array",
            "description": "A list of all the tags that have been applied to any of the features in the `features` list.",
            "example": [
              {
                "featureName": "my-feature",
                "tagType": "simple",
                "tagValue": "user-facing"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/featureTagSchema"
            }
          },
          "segments": {
            "type": "array",
            "description": "A list of all the segments that are used by the strategies in the `featureStrategies` list.",
            "example": [
              {
                "id": 1,
                "name": "new-segment-name"
              }
            ],
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "name"
              ],
              "properties": {
                "id": {
                  "type": "number"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "tagTypes": {
            "type": "array",
            "description": "A list of all of the tag types that are used in the `featureTags` list.",
            "example": [
              {
                "name": "simple",
                "description": "Used to simplify filtering of features",
                "icon": "#"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/tagTypeSchema"
            }
          },
          "dependencies": {
            "type": "array",
            "description": "A list of all the dependencies for features in `features` list.",
            "items": {
              "$ref": "#/components/schemas/featureDependenciesSchema"
            }
          }
        }
      },
      "featureDependenciesSchema": {
        "type": "object",
        "description": "Feature dependency connection between a child feature and its dependencies",
        "required": [
          "feature",
          "dependencies"
        ],
        "additionalProperties": false,
        "properties": {
          "feature": {
            "type": "string",
            "description": "The name of the child feature.",
            "example": "child_feature"
          },
          "dependencies": {
            "type": "array",
            "description": "List of parent features for the child feature",
            "items": {
              "$ref": "#/components/schemas/dependentFeatureSchema"
            }
          }
        }
      },
      "featureEnvironmentMetricsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "environment",
          "timestamp",
          "yes",
          "no"
        ],
        "description": "How many times `feautreName` was evaluated to `true` (yes) and `false` (no) for `appName` in `environmnet`",
        "properties": {
          "featureName": {
            "description": "The name of the feature",
            "type": "string",
            "example": "my.special.feature"
          },
          "appName": {
            "description": "The name of the application the SDK is being used in",
            "type": "string",
            "example": "accounting"
          },
          "environment": {
            "description": "Which environment the SDK is being used in",
            "type": "string",
            "example": "development"
          },
          "timestamp": {
            "description": "The start of the time window these metrics are valid for. The window is usually 1 hour wide",
            "example": "1926-05-08T12:00:00.000Z",
            "$ref": "#/components/schemas/dateSchema"
          },
          "yes": {
            "description": "How many times the toggle evaluated to true",
            "type": "integer",
            "example": 974,
            "minimum": 0
          },
          "no": {
            "description": "How many times the toggle evaluated to false",
            "type": "integer",
            "example": 50,
            "minimum": 0
          },
          "variants": {
            "description": "How many times each variant was returned",
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            },
            "example": {
              "variantA": 15,
              "variantB": 25,
              "variantC": 5
            }
          }
        }
      },
      "featureEnvironmentSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "enabled"
        ],
        "description": "A detailed description of the feature environment",
        "properties": {
          "name": {
            "type": "string",
            "example": "my-dev-env",
            "description": "The name of the environment"
          },
          "featureName": {
            "type": "string",
            "example": "disable-comments",
            "description": "The name of the feature"
          },
          "environment": {
            "type": "string",
            "example": "development",
            "description": "The name of the environment"
          },
          "type": {
            "type": "string",
            "example": "development",
            "description": "The type of the environment"
          },
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the feature is enabled for the environment, otherwise `false`."
          },
          "sortOrder": {
            "type": "number",
            "example": 3,
            "description": "The sort order of the feature environment in the feature environments list"
          },
          "variantCount": {
            "type": "number",
            "description": "The number of defined variants"
          },
          "strategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureStrategySchema"
            },
            "description": "A list of activation strategies for the feature environment"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            },
            "description": "A list of variants for the feature environment"
          },
          "lastSeenAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-01-28T16:21:39.975Z",
            "description": "The date when metrics where last collected for the feature environment"
          },
          "hasStrategies": {
            "type": "boolean",
            "description": "Whether the feature has any strategies defined."
          },
          "hasEnabledStrategies": {
            "type": "boolean",
            "description": "Whether the feature has any enabled strategies defined."
          }
        }
      },
      "featureEventsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "events"
        ],
        "description": "One or more events happening to a specific feature flag",
        "properties": {
          "version": {
            "type": "integer",
            "description": "An API versioning number",
            "minimum": 1,
            "enum": [
              1
            ],
            "example": 1
          },
          "toggleName": {
            "description": "The name of the feature flag these events relate to",
            "type": "string",
            "example": "my.first.feature.flag"
          },
          "events": {
            "description": "The list of events",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/eventSchema"
            }
          },
          "totalEvents": {
            "description": "How many events are there for this feature flag",
            "type": "integer",
            "minimum": 0,
            "example": 13
          }
        }
      },
      "featureLifecycleCompletedSchema": {
        "description": "A feature that has been marked as completed",
        "additionalProperties": false,
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "kept",
              "discarded"
            ],
            "example": "kept",
            "description": "The status of the feature after it has been marked as completed"
          },
          "statusValue": {
            "type": "string",
            "example": "variant1",
            "description": "The metadata value passed in together with status"
          }
        }
      },
      "featureLifecycleSchema": {
        "type": "array",
        "description": "A list of lifecycle stages for a given feature",
        "items": {
          "additionalProperties": false,
          "type": "object",
          "required": [
            "stage",
            "enteredStageAt"
          ],
          "properties": {
            "stage": {
              "type": "string",
              "enum": [
                "initial",
                "pre-live",
                "live",
                "completed",
                "archived"
              ],
              "example": "initial",
              "description": "The name of the lifecycle stage that got recorded for a given feature"
            },
            "status": {
              "type": "string",
              "example": "kept",
              "description": "The name of the detailed status of a given stage. E.g. completed stage can be kept or discarded."
            },
            "enteredStageAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-01-28T16:21:39.975Z",
              "description": "The date when the feature entered a given stage"
            }
          },
          "description": "The lifecycle stage of the feature"
        }
      },
      "featureMetricsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "maturity",
          "data"
        ],
        "description": "A batch of feature metrics",
        "properties": {
          "version": {
            "description": "The version of this schema",
            "type": "integer",
            "minimum": 1
          },
          "maturity": {
            "description": "The maturity level of this API (alpha, beta, stable, deprecated)",
            "type": "string",
            "example": "stable"
          },
          "data": {
            "description": "Metrics gathered per environment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureEnvironmentMetricsSchema"
            }
          }
        }
      },
      "featureSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "description": "A feature flag definition",
        "properties": {
          "name": {
            "type": "string",
            "example": "disable-comments",
            "description": "Unique feature name"
          },
          "type": {
            "type": "string",
            "example": "kill-switch",
            "description": "Type of the flag e.g. experiment, kill-switch, release, operational, permission"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Controls disabling of the comments section in case of an incident",
            "description": "Detailed description of the feature"
          },
          "archived": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the feature is archived"
          },
          "project": {
            "type": "string",
            "example": "dx-squad",
            "description": "Name of the project the feature belongs to"
          },
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the feature is enabled, otherwise `false`."
          },
          "stale": {
            "type": "boolean",
            "example": false,
            "description": "`true` if the feature is stale based on the age and feature type, otherwise `false`."
          },
          "favorite": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the feature was favorited, otherwise `false`."
          },
          "impressionData": {
            "type": "boolean",
            "example": false,
            "description": "`true` if the impression data collection is enabled for the feature, otherwise `false`."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-01-28T15:21:39.975Z",
            "description": "The date the feature was created"
          },
          "createdBy": {
            "type": "object",
            "description": "User who created the feature flag",
            "additionalProperties": false,
            "required": [
              "id",
              "name",
              "imageUrl"
            ],
            "properties": {
              "id": {
                "description": "The user id",
                "type": "integer",
                "example": 123
              },
              "name": {
                "description": "Name of the user",
                "type": "string",
                "example": "User"
              },
              "imageUrl": {
                "description": "URL used for the user profile image",
                "type": "string",
                "example": "https://example.com/242x200.png"
              }
            }
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-01-29T15:21:39.975Z",
            "description": "The date the feature was archived"
          },
          "lastSeenAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "deprecated": true,
            "example": "2023-01-28T16:21:39.975Z",
            "description": "The date when metrics where last collected for the feature. This field was deprecated in v5, use the one in featureEnvironmentSchema"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureEnvironmentSchema"
            },
            "description": "The list of environments where the feature can be used"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            },
            "description": "The list of feature variants",
            "deprecated": true
          },
          "strategies": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "This was deprecated in v5 and will be removed in a future major version",
            "deprecated": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tagSchema"
            },
            "nullable": true,
            "description": "The list of feature tags"
          },
          "children": {
            "type": "array",
            "description": "The list of child feature names. This is an experimental field and may change.",
            "items": {
              "type": "string",
              "example": "some-feature"
            }
          },
          "lifecycle": {
            "type": "object",
            "description": "Current lifecycle stage of the feature",
            "additionalProperties": false,
            "required": [
              "stage",
              "enteredStageAt"
            ],
            "properties": {
              "stage": {
                "description": "The name of the current lifecycle stage",
                "type": "string",
                "enum": [
                  "initial",
                  "pre-live",
                  "live",
                  "completed",
                  "archived"
                ],
                "example": "initial"
              },
              "enteredStageAt": {
                "description": "When the feature entered this stage",
                "type": "string",
                "format": "date-time",
                "example": "2023-01-28T15:21:39.975Z"
              }
            }
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "feature"
              ],
              "properties": {
                "feature": {
                  "description": "The name of the parent feature",
                  "type": "string",
                  "example": "some-feature"
                },
                "enabled": {
                  "description": "Whether the parent feature is enabled or not",
                  "type": "boolean",
                  "example": true
                },
                "variants": {
                  "description": "The list of variants the parent feature should resolve to. Only valid when feature is enabled.",
                  "type": "array",
                  "items": {
                    "example": "some-feature-blue-variant",
                    "type": "string"
                  }
                }
              }
            },
            "description": "The list of parent dependencies. This is an experimental field and may change."
          },
          "collaborators": {
            "type": "object",
            "required": [
              "users"
            ],
            "description": "Information related to users who have made changes to this feature flage.",
            "properties": {
              "users": {
                "description": "Users who have made any changes to this feature flags. The list is sorted in reverse chronological order (most recent changes first)",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "id",
                    "name",
                    "imageUrl"
                  ],
                  "description": "A simple representation of a user.",
                  "properties": {
                    "id": {
                      "description": "The user's id",
                      "type": "integer",
                      "example": 123
                    },
                    "name": {
                      "description": "The user's name, username, or email (prioritized in that order). If none of those are present, this property will be set to the string `unknown`",
                      "type": "string",
                      "example": "User"
                    },
                    "imageUrl": {
                      "description": "The URL to the user's profile image",
                      "type": "string",
                      "example": "https://example.com/242x200.png"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "featureSearchEnvironmentSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "enabled",
          "type"
        ],
        "description": "A detailed description of the feature environment",
        "properties": {
          "name": {
            "type": "string",
            "example": "my-dev-env",
            "description": "The name of the environment"
          },
          "featureName": {
            "type": "string",
            "example": "disable-comments",
            "description": "The name of the feature"
          },
          "environment": {
            "type": "string",
            "example": "development",
            "description": "The name of the environment"
          },
          "type": {
            "type": "string",
            "example": "development",
            "description": "The type of the environment"
          },
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the feature is enabled for the environment, otherwise `false`."
          },
          "sortOrder": {
            "type": "number",
            "example": 3,
            "description": "The sort order of the feature environment in the feature environments list"
          },
          "variantCount": {
            "type": "number",
            "description": "The number of defined variants"
          },
          "strategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureStrategySchema"
            },
            "description": "A list of activation strategies for the feature environment"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            },
            "description": "A list of variants for the feature environment"
          },
          "lastSeenAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-01-28T16:21:39.975Z",
            "description": "The date when metrics where last collected for the feature environment"
          },
          "hasStrategies": {
            "type": "boolean",
            "description": "Whether the feature has any strategies defined."
          },
          "hasEnabledStrategies": {
            "type": "boolean",
            "description": "Whether the feature has any enabled strategies defined."
          },
          "yes": {
            "description": "How many times the toggle evaluated to true in last hour bucket",
            "type": "integer",
            "example": 974,
            "minimum": 0
          },
          "no": {
            "description": "How many times the toggle evaluated to false in last hour bucket",
            "type": "integer",
            "example": 50,
            "minimum": 0
          }
        }
      },
      "featureSearchResponseSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "description",
          "dependencyType",
          "type",
          "project",
          "stale",
          "favorite",
          "impressionData",
          "createdAt",
          "createdBy",
          "environments",
          "segments"
        ],
        "description": "A feature flag definition",
        "properties": {
          "name": {
            "type": "string",
            "example": "disable-comments",
            "description": "Unique feature name"
          },
          "type": {
            "type": "string",
            "example": "kill-switch",
            "description": "Type of the flag e.g. experiment, kill-switch, release, operational, permission"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Controls disabling of the comments section in case of an incident",
            "description": "Detailed description of the feature"
          },
          "dependencyType": {
            "type": "string",
            "enum": [
              "parent",
              "child",
              null
            ],
            "nullable": true,
            "example": "parent",
            "description": "The type of dependency. 'parent' means that the feature is a parent feature, 'child' means that the feature is a child feature."
          },
          "archived": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the feature is archived"
          },
          "project": {
            "type": "string",
            "example": "dx-squad",
            "description": "Name of the project the feature belongs to"
          },
          "stale": {
            "type": "boolean",
            "example": false,
            "description": "`true` if the feature is stale based on the age and feature type, otherwise `false`."
          },
          "favorite": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the feature was favorited, otherwise `false`."
          },
          "impressionData": {
            "type": "boolean",
            "example": false,
            "description": "`true` if the impression data collection is enabled for the feature, otherwise `false`."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-01-28T15:21:39.975Z",
            "description": "The date the feature was created"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-01-29T15:21:39.975Z",
            "description": "The date the feature was archived"
          },
          "lastSeenAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "deprecated": true,
            "example": "2023-01-28T16:21:39.975Z",
            "description": "The date when metrics where last collected for the feature. This field was deprecated in v5 and will be removed in a future release, use the one in featureEnvironmentSchema"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureSearchEnvironmentSchema"
            },
            "description": "The list of environments where the feature can be used"
          },
          "segments": {
            "type": "array",
            "description": "The list of segments the feature is enabled for.",
            "example": [
              "pro-users",
              "main-segment"
            ],
            "items": {
              "type": "string"
            }
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            },
            "description": "The list of feature variants. This field was deprecated in v5",
            "deprecated": true
          },
          "strategies": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "This is a legacy field that was deprecated in v5",
            "deprecated": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tagSchema"
            },
            "nullable": true,
            "description": "The list of feature tags"
          },
          "lifecycle": {
            "type": "object",
            "description": "Current lifecycle stage of the feature",
            "additionalProperties": false,
            "required": [
              "stage",
              "enteredStageAt"
            ],
            "properties": {
              "stage": {
                "description": "The name of the current lifecycle stage",
                "type": "string",
                "enum": [
                  "initial",
                  "pre-live",
                  "live",
                  "completed",
                  "archived"
                ],
                "example": "initial"
              },
              "status": {
                "type": "string",
                "nullable": true,
                "example": "kept",
                "description": "The name of the detailed status of a given stage. E.g. completed stage can be kept or discarded."
              },
              "enteredStageAt": {
                "description": "When the feature entered this stage",
                "type": "string",
                "format": "date-time",
                "example": "2023-01-28T15:21:39.975Z"
              }
            }
          },
          "createdBy": {
            "type": "object",
            "description": "User who created the feature flag",
            "additionalProperties": false,
            "required": [
              "id",
              "name",
              "imageUrl"
            ],
            "properties": {
              "id": {
                "description": "The user id",
                "type": "integer",
                "example": 123
              },
              "name": {
                "description": "Name of the user",
                "type": "string",
                "example": "User"
              },
              "imageUrl": {
                "description": "URL used for the user profile image",
                "type": "string",
                "example": "https://example.com/242x200.png"
              }
            }
          }
        }
      },
      "featureStrategySchema": {
        "description": "A single activation strategy configuration schema for a feature",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A uuid for the feature strategy",
            "example": "6b5157cb-343a-41e7-bfa3-7b4ec3044840"
          },
          "name": {
            "type": "string",
            "description": "The name or type of strategy",
            "example": "flexibleRollout"
          },
          "title": {
            "type": "string",
            "description": "A descriptive title for the strategy",
            "example": "Gradual Rollout 25-Prod",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "description": "A toggle to disable the strategy. defaults to false. Disabled strategies are not evaluated or returned to the SDKs",
            "example": false,
            "nullable": true
          },
          "featureName": {
            "type": "string",
            "description": "The name or feature the strategy is attached to",
            "example": "myAwesomeFeature"
          },
          "sortOrder": {
            "type": "number",
            "description": "The order of the strategy in the list",
            "example": 9999
          },
          "segments": {
            "type": "array",
            "description": "A list of segment ids attached to the strategy",
            "example": [
              1,
              2
            ],
            "items": {
              "type": "number"
            }
          },
          "constraints": {
            "type": "array",
            "description": "A list of the constraints attached to the strategy. See https://docs.getunleash.io/reference/strategy-constraints",
            "items": {
              "$ref": "#/components/schemas/constraintSchema"
            }
          },
          "variants": {
            "type": "array",
            "description": "Strategy level variants",
            "items": {
              "$ref": "#/components/schemas/strategyVariantSchema"
            }
          },
          "parameters": {
            "$ref": "#/components/schemas/parametersSchema"
          }
        }
      },
      "featureStrategySegmentSchema": {
        "type": "object",
        "description": "An object containing a segment identifier and a strategy identifier.",
        "additionalProperties": false,
        "required": [
          "segmentId",
          "featureStrategyId"
        ],
        "properties": {
          "segmentId": {
            "type": "integer",
            "description": "The ID of the segment",
            "example": 2
          },
          "featureStrategyId": {
            "type": "string",
            "description": "The ID of the strategy",
            "example": "e2caa08f-30c4-4aa3-b955-54ca9e93dc13"
          }
        }
      },
      "featureTagSchema": {
        "type": "object",
        "description": "Describes a tag applied to a feature",
        "additionalProperties": false,
        "required": [
          "featureName",
          "tagValue"
        ],
        "properties": {
          "featureName": {
            "type": "string",
            "example": "my-feature",
            "description": "The name of the feature this tag is applied to"
          },
          "tagType": {
            "type": "string",
            "example": "simple",
            "description": "The [type](https://docs.getunleash.io/reference/tags#tag-types tag types) of the tag"
          },
          "tagValue": {
            "type": "string",
            "example": "my-tag",
            "description": "The value of the tag"
          },
          "type": {
            "deprecated": true,
            "type": "string",
            "description": "The [type](https://docs.getunleash.io/reference/tags#tag-types tag types) of the tag. This property is deprecated and will be removed in a future version of Unleash. Superseded by the `tagType` property."
          },
          "value": {
            "deprecated": true,
            "type": "string",
            "description": "The value of the tag. This property is deprecated and will be removed in a future version of Unleash. Superseded by the `tagValue` property."
          },
          "createdByUserId": {
            "type": "number",
            "nullable": true,
            "example": 1,
            "description": "The id of the user who created this tag"
          }
        }
      },
      "featureTypeCountSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "count"
        ],
        "description": "A count of feature flags of a specific type",
        "properties": {
          "type": {
            "type": "string",
            "example": "kill-switch",
            "description": "Type of the flag e.g. experiment, kill-switch, release, operational, permission"
          },
          "count": {
            "type": "number",
            "example": 1,
            "description": "Number of feature flags of this type"
          }
        }
      },
      "featureTypeSchema": {
        "type": "object",
        "description": "A [feature flag type](https://docs.getunleash.io/reference/feature-toggle-types).",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "description",
          "lifetimeDays"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier of this feature flag type.",
            "example": "kill-switch"
          },
          "name": {
            "type": "string",
            "description": "The display name of this feature flag type.",
            "example": "Kill switch"
          },
          "description": {
            "type": "string",
            "description": "A description of what this feature flag type is intended to be used for.",
            "example": "Kill switch feature flags are used to quickly turn on or off critical functionality in your system."
          },
          "lifetimeDays": {
            "type": "integer",
            "minimum": 0,
            "description": "How many days it takes before a feature flag of this typed is flagged as [potentially stale](https://docs.getunleash.io/reference/technical-debt#stale-and-potentially-stale-toggles) by Unleash. If this value is `null`, Unleash will never mark it as potentially stale.",
            "example": 40,
            "nullable": true
          }
        }
      },
      "featureTypesSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "A list of [feature flag types](https://docs.getunleash.io/reference/feature-toggle-types) and the schema version used to represent those feature types.",
        "required": [
          "version",
          "types"
        ],
        "properties": {
          "version": {
            "type": "integer",
            "enum": [
              1
            ],
            "example": 1,
            "description": "The schema version used to describe the feature flag types listed in the `types` property."
          },
          "types": {
            "type": "array",
            "description": "The list of feature flag types.",
            "items": {
              "$ref": "#/components/schemas/featureTypeSchema"
            },
            "example": [
              {
                "id": "release",
                "name": "Release",
                "description": "Release feature flags are used to release new features.",
                "lifetimeDays": 40
              },
              {
                "id": "experiment",
                "name": "Experiment",
                "description": "Experiment feature flags are used to test and verify multiple different versions of a feature.",
                "lifetimeDays": 40
              },
              {
                "id": "operational",
                "name": "Operational",
                "description": "Operational feature flags are used to control aspects of a rollout.",
                "lifetimeDays": 7
              },
              {
                "id": "kill-switch",
                "name": "Kill switch",
                "description": "Kill switch feature flags are used to quickly turn on or off critical functionality in your system.",
                "lifetimeDays": null
              },
              {
                "id": "permission",
                "name": "Permission",
                "description": "Permission feature flags are used to control permissions in your system.",
                "lifetimeDays": null
              }
            ]
          }
        }
      },
      "featureUsageSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "How many applications have seen this feature flag, as well as how this feature was evaluated the last hour",
        "required": [
          "version",
          "maturity",
          "featureName",
          "lastHourUsage",
          "seenApplications"
        ],
        "properties": {
          "version": {
            "description": "The version of this schema",
            "type": "integer",
            "minimum": 1
          },
          "maturity": {
            "description": "The maturity level of this API (alpha, beta, stable, deprecated)",
            "type": "string",
            "example": "stable"
          },
          "featureName": {
            "description": "The name of the feature",
            "type": "string",
            "example": "my.special.feature"
          },
          "lastHourUsage": {
            "description": "Last hour statistics. Accumulated per feature per environment. Contains counts for evaluations to true (yes) and to false (no)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureEnvironmentMetricsSchema"
            }
          },
          "seenApplications": {
            "description": "A list of applications seen using this feature",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "accounting",
              "billing",
              "booking"
            ]
          }
        }
      },
      "featureVariantsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "variants"
        ],
        "description": "A versioned collection of feature flag variants.",
        "properties": {
          "version": {
            "type": "integer",
            "example": 1,
            "description": "The version of the feature variants schema."
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            },
            "description": "All variants defined for a specific feature flag."
          }
        }
      },
      "featuresSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "features"
        ],
        "description": "A list of features",
        "deprecated": true,
        "properties": {
          "version": {
            "type": "integer",
            "description": "The version of the feature's schema"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureSchema"
            },
            "description": "A list of features"
          }
        }
      },
      "feedbackCreateSchema": {
        "required": [
          "feedbackId"
        ],
        "type": "object",
        "description": "User feedback information to be created.",
        "properties": {
          "neverShow": {
            "description": "`true` if the user has asked never to see this feedback questionnaire again. Defaults to `false`.",
            "type": "boolean",
            "example": false
          },
          "feedbackId": {
            "description": "The name of the feedback session",
            "type": "string",
            "example": "pnps"
          }
        }
      },
      "feedbackResponseSchema": {
        "additionalProperties": false,
        "type": "object",
        "description": "User feedback information about a particular feedback item.",
        "properties": {
          "userId": {
            "description": "The ID of the user that gave the feedback.",
            "type": "integer",
            "example": 2
          },
          "neverShow": {
            "description": "`true` if the user has asked never to see this feedback questionnaire again.",
            "type": "boolean",
            "example": false
          },
          "given": {
            "description": "When this feedback was given",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-07-06T08:29:21.282Z"
          },
          "feedbackId": {
            "description": "The name of the feedback session",
            "type": "string",
            "example": "pnps"
          }
        }
      },
      "feedbackUpdateSchema": {
        "type": "object",
        "description": "User feedback information to be updated.",
        "properties": {
          "userId": {
            "description": "The ID of the user that gave the feedback.",
            "type": "integer",
            "example": 2
          },
          "neverShow": {
            "description": "`true` if the user has asked never to see this feedback questionnaire again.",
            "type": "boolean",
            "example": false
          },
          "given": {
            "description": "When this feedback was given",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-07-06T08:29:21.282Z"
          }
        }
      },
      "frontendApiClientSchema": {
        "type": "object",
        "required": [
          "appName",
          "interval",
          "started",
          "strategies"
        ],
        "description": "Frontend SDK client registration information",
        "properties": {
          "appName": {
            "type": "string",
            "description": "Name of the application using Unleash"
          },
          "instanceId": {
            "type": "string",
            "description": "Instance id for this application (typically hostname, podId or similar)"
          },
          "sdkVersion": {
            "type": "string",
            "description": "Optional field that describes the sdk version (name:version)"
          },
          "environment": {
            "type": "string",
            "deprecated": true,
            "description": "deprecated",
            "example": "development"
          },
          "interval": {
            "type": "number",
            "description": "At which interval, in milliseconds, will this client be expected to send metrics"
          },
          "started": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "number"
              }
            ],
            "description": "When this client started. Should be reported as ISO8601 time."
          },
          "strategies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of strategies implemented by this application"
          }
        }
      },
      "frontendApiFeatureSchema": {
        "type": "object",
        "required": [
          "name",
          "enabled",
          "impressionData"
        ],
        "additionalProperties": false,
        "description": "Frontend API feature",
        "properties": {
          "name": {
            "type": "string",
            "example": "disable-comments",
            "description": "Unique feature name."
          },
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "Always set to `true`."
          },
          "impressionData": {
            "type": "boolean",
            "example": false,
            "description": "`true` if the impression data collection is enabled for the feature, otherwise `false`."
          },
          "variant": {
            "type": "object",
            "required": [
              "name",
              "enabled"
            ],
            "additionalProperties": false,
            "description": "Variant details",
            "properties": {
              "name": {
                "type": "string",
                "description": "The variants name. Is unique for this feature flag",
                "example": "blue_group"
              },
              "enabled": {
                "type": "boolean",
                "example": true,
                "description": "Whether the variant is enabled or not."
              },
              "payload": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "type",
                  "value"
                ],
                "description": "Extra data configured for this variant",
                "example": {
                  "type": "json",
                  "value": "{\"color\": \"red\"}"
                },
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The format of the payload.",
                    "enum": [
                      "json",
                      "csv",
                      "string",
                      "number"
                    ]
                  },
                  "value": {
                    "type": "string",
                    "description": "The payload value stringified."
                  }
                }
              },
              "feature_enabled": {
                "type": "boolean",
                "description": "Whether the feature is enabled or not.",
                "example": true
              },
              "featureEnabled": {
                "deprecated": true,
                "type": "boolean",
                "description": "Use `feature_enabled` instead.",
                "example": true
              }
            }
          }
        }
      },
      "frontendApiFeaturesSchema": {
        "type": "object",
        "required": [
          "toggles"
        ],
        "additionalProperties": false,
        "description": "Frontend SDK features list",
        "properties": {
          "toggles": {
            "description": "The actual features returned to the Frontend SDK",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/frontendApiFeatureSchema"
            }
          }
        }
      },
      "groupSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "description": "A detailed information about a user group",
        "properties": {
          "id": {
            "description": "The group id",
            "type": "integer",
            "example": 1
          },
          "name": {
            "description": "The name of the group",
            "type": "string",
            "example": "DX team"
          },
          "description": {
            "description": "A custom description of the group",
            "type": "string",
            "nullable": true,
            "example": "Current members of the DX squad"
          },
          "mappingsSSO": {
            "description": "A list of SSO groups that should map to this Unleash group",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SSOGroup1",
              "SSOGroup2"
            ]
          },
          "rootRole": {
            "type": "number",
            "nullable": true,
            "description": "A role id that is used as the root role for all users in this group. This can be either the id of the Viewer, Editor or Admin role.",
            "example": 1
          },
          "createdBy": {
            "description": "A user who created this group",
            "type": "string",
            "nullable": true,
            "example": "admin"
          },
          "createdAt": {
            "description": "When was this group created",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-06-30T11:41:00.123Z"
          },
          "users": {
            "type": "array",
            "description": "A list of users belonging to this group",
            "items": {
              "$ref": "#/components/schemas/groupUserModelSchema"
            }
          },
          "projects": {
            "description": "A list of projects where this group is used",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "default",
              "my-project"
            ]
          },
          "userCount": {
            "description": "The number of users that belong to this group",
            "example": 1,
            "type": "integer",
            "minimum": 0
          },
          "scimId": {
            "description": "The SCIM ID of the group, only present if managed by SCIM",
            "type": "string",
            "nullable": true,
            "example": "01HTMEXAMPLESCIMID7SWWGHN7"
          }
        }
      },
      "groupUserModelSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "user"
        ],
        "description": "Details for a single user belonging to a group",
        "properties": {
          "joinedAt": {
            "description": "The date when the user joined the group",
            "type": "string",
            "format": "date-time",
            "example": "2023-06-30T11:41:00.123Z"
          },
          "createdBy": {
            "description": "The username of the user who added this user to this group",
            "type": "string",
            "nullable": true,
            "example": "admin"
          },
          "user": {
            "$ref": "#/components/schemas/userSchema"
          }
        }
      },
      "groupsSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "A list of [user groups](https://docs.getunleash.io/reference/rbac#user-groups)",
        "properties": {
          "groups": {
            "description": "A list of groups",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/groupSchema"
            }
          }
        }
      },
      "healthCheckSchema": {
        "type": "object",
        "description": "Used by service orchestrators to decide whether this Unleash instance should be marked as healthy or unhealthy",
        "additionalProperties": false,
        "required": [
          "health"
        ],
        "properties": {
          "health": {
            "description": "The state this Unleash instance is in. GOOD if everything is ok, BAD if the instance should be restarted",
            "type": "string",
            "enum": [
              "GOOD",
              "BAD"
            ],
            "example": "GOOD"
          }
        }
      },
      "healthOverviewSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "name",
          "defaultStickiness",
          "mode",
          "members",
          "health",
          "environments",
          "features"
        ],
        "description": "An overview of a project's stats and its health as described in the documentation on [technical debt](https://docs.getunleash.io/reference/technical-debt)",
        "properties": {
          "version": {
            "type": "integer",
            "description": "The project overview version.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The project's name",
            "example": "enterprisegrowth"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The project's description",
            "example": "The project for all things enterprisegrowth"
          },
          "defaultStickiness": {
            "type": "string",
            "example": "userId",
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy"
          },
          "mode": {
            "type": "string",
            "enum": [
              "open",
              "protected",
              "private"
            ],
            "example": "open",
            "description": "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not."
          },
          "featureLimit": {
            "type": "number",
            "nullable": true,
            "example": 100,
            "description": "A limit on the number of features allowed in the project. Null if no limit."
          },
          "members": {
            "type": "integer",
            "description": "The number of users/members in the project.",
            "example": 5,
            "minimum": 0
          },
          "health": {
            "type": "integer",
            "description": "The overall [health rating](https://docs.getunleash.io/reference/technical-debt#health-rating) of the project.",
            "example": 95
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/projectEnvironmentSchema"
            },
            "description": "An array containing the names of all the environments configured for the project."
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureSchema"
            },
            "description": "An array containing an overview of all the features of the project and their individual status"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the project was last updated.",
            "example": "2023-04-19T08:15:14.000Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the project was last updated.",
            "example": "2023-04-19T08:15:14.000Z"
          },
          "favorite": {
            "type": "boolean",
            "description": "Indicates if the project has been marked as a favorite by the current user requesting the project health overview.",
            "example": true
          },
          "stats": {
            "$ref": "#/components/schemas/projectStatsSchema",
            "description": "Project statistics"
          },
          "featureNaming": {
            "$ref": "#/components/schemas/createFeatureNamingPatternSchema"
          }
        }
      },
      "healthReportSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "name",
          "defaultStickiness",
          "mode",
          "members",
          "health",
          "environments",
          "features",
          "potentiallyStaleCount",
          "activeCount",
          "staleCount"
        ],
        "description": "A report of the current health of the requested project, with datapoints like counters of currently active, stale, and potentially stale feature flags.",
        "properties": {
          "version": {
            "type": "integer",
            "description": "The project overview version.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The project's name",
            "example": "enterprisegrowth"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The project's description",
            "example": "The project for all things enterprisegrowth"
          },
          "defaultStickiness": {
            "type": "string",
            "example": "userId",
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy"
          },
          "mode": {
            "type": "string",
            "enum": [
              "open",
              "protected",
              "private"
            ],
            "example": "open",
            "description": "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not."
          },
          "featureLimit": {
            "type": "number",
            "nullable": true,
            "example": 100,
            "description": "A limit on the number of features allowed in the project. Null if no limit."
          },
          "members": {
            "type": "integer",
            "description": "The number of users/members in the project.",
            "example": 5,
            "minimum": 0
          },
          "health": {
            "type": "integer",
            "description": "The overall [health rating](https://docs.getunleash.io/reference/technical-debt#health-rating) of the project.",
            "example": 95
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/projectEnvironmentSchema"
            },
            "description": "An array containing the names of all the environments configured for the project."
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureSchema"
            },
            "description": "An array containing an overview of all the features of the project and their individual status"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the project was last updated.",
            "example": "2023-04-19T08:15:14.000Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the project was last updated.",
            "example": "2023-04-19T08:15:14.000Z"
          },
          "favorite": {
            "type": "boolean",
            "description": "Indicates if the project has been marked as a favorite by the current user requesting the project health overview.",
            "example": true
          },
          "stats": {
            "$ref": "#/components/schemas/projectStatsSchema",
            "description": "Project statistics"
          },
          "featureNaming": {
            "$ref": "#/components/schemas/createFeatureNamingPatternSchema"
          },
          "potentiallyStaleCount": {
            "type": "number",
            "description": "The number of potentially stale feature flags.",
            "example": 5
          },
          "activeCount": {
            "type": "number",
            "description": "The number of active feature flags.",
            "example": 2
          },
          "staleCount": {
            "type": "number",
            "description": "The number of stale feature flags.",
            "example": 10
          }
        }
      },
      "idSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Email id used for password reset",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "User email",
            "example": "user@example.com"
          }
        }
      },
      "idsSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Used for bulk deleting multiple ids",
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "description": "Ids, for instance userid",
            "items": {
              "type": "number",
              "minimum": 0
            },
            "example": [
              12,
              212
            ]
          }
        }
      },
      "importTogglesSchema": {
        "type": "object",
        "required": [
          "project",
          "environment",
          "data"
        ],
        "additionalProperties": false,
        "description": "The result of the export operation for a project and environment, used at import",
        "properties": {
          "project": {
            "type": "string",
            "example": "My awesome project",
            "description": "The exported [project](https://docs.getunleash.io/reference/projects)"
          },
          "environment": {
            "type": "string",
            "example": "development",
            "description": "The exported [environment](https://docs.getunleash.io/reference/environments)"
          },
          "data": {
            "$ref": "#/components/schemas/exportResultSchema"
          }
        }
      },
      "importTogglesValidateItemSchema": {
        "type": "object",
        "required": [
          "message",
          "affectedItems"
        ],
        "additionalProperties": false,
        "description": "A description of an error or warning pertaining to a feature flag import job.",
        "properties": {
          "message": {
            "type": "string",
            "description": "The validation error message",
            "example": "You cannot import a feature that already exist in other projects. You already have the following features defined outside of project default:"
          },
          "affectedItems": {
            "type": "array",
            "description": "The items affected by this error message ",
            "example": [
              "some-feature-a",
              "some-feature-b"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "importTogglesValidateSchema": {
        "type": "object",
        "required": [
          "errors",
          "warnings"
        ],
        "additionalProperties": false,
        "description": "An object containing [feature import](https://docs.getunleash.io/reference/deploy/environment-import-export) validation results.",
        "properties": {
          "errors": {
            "description": "A list of errors that prevent the provided data from being successfully imported.",
            "type": "array",
            "example": [
              {
                "message": "You cannot import a feature that already exist in other projects. You already have the following features defined outside of project default:",
                "affectedItems": [
                  "my-feature (in project project-854)"
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/importTogglesValidateItemSchema"
            }
          },
          "warnings": {
            "type": "array",
            "description": "A list of warnings related to the provided data.",
            "example": [
              {
                "message": "The following strategy types will be used in import. Please make sure the strategy type parameters are configured as in source environment:",
                "affectedItems": [
                  "custom-strategy-7"
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/importTogglesValidateItemSchema"
            }
          },
          "permissions": {
            "type": "array",
            "description": "Any additional permissions required to import the data. If the list is empty, you require no additional permissions beyond what your user already has.",
            "items": {
              "$ref": "#/components/schemas/importTogglesValidateItemSchema"
            },
            "example": []
          }
        }
      },
      "inactiveUserSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "A Unleash user that has been flagged as inactive",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "The user id",
            "type": "integer",
            "minimum": 0,
            "example": 123
          },
          "name": {
            "description": "Name of the user",
            "type": "string",
            "example": "Ned Ryerson",
            "nullable": true
          },
          "email": {
            "description": "Email of the user",
            "type": "string",
            "example": "user@example.com"
          },
          "username": {
            "description": "A unique username for the user",
            "type": "string",
            "example": "nedryerson",
            "nullable": true
          },
          "seenAt": {
            "description": "The last time this user logged in",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-01-25T11:42:00.345Z"
          },
          "createdAt": {
            "description": "The user was created at this time",
            "type": "string",
            "format": "date-time",
            "example": "2023-12-31T23:59:59.999Z"
          },
          "patSeenAt": {
            "description": "The last time this user's PAT token (if any) was used",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-01-01T23:59:59.999Z"
          }
        }
      },
      "inactiveUsersSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "A list of users that has been flagged as inactive",
        "required": [
          "version",
          "inactiveUsers"
        ],
        "properties": {
          "version": {
            "description": "The version of this schema. Used to keep track of compatibility",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "inactiveUsers": {
            "description": "The list of users that are flagged as inactive",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inactiveUserSchema"
            }
          }
        }
      },
      "instanceAdminStatsSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Information about an instance and statistics about usage of various features of Unleash",
        "required": [
          "instanceId"
        ],
        "properties": {
          "instanceId": {
            "type": "string",
            "description": "A unique identifier for this instance. Generated by the database migration scripts at first run. Typically a UUID.",
            "example": "ed3861ae-78f9-4e8c-8e57-b57efc15f82b"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When these statistics were produced",
            "example": "2023-06-12T12:25:06Z"
          },
          "versionOSS": {
            "type": "string",
            "description": "The version of Unleash OSS that is bundled in this instance",
            "example": "5.1.7"
          },
          "versionEnterprise": {
            "type": "string",
            "description": "The version of Unleash Enterprise that is bundled in this instance",
            "example": "5.1.7"
          },
          "users": {
            "type": "number",
            "description": "The number of users this instance has",
            "example": 8,
            "minimum": 0
          },
          "previousDayMetricsBucketsCount": {
            "type": "object",
            "description": "The number client metrics buckets records recorded in the previous day. # features * # apps * # envs * # hours with metrics",
            "properties": {
              "enabledCount": {
                "type": "number",
                "description": "The number of enabled/disabled metrics buckets recorded in the previous day",
                "example": 10,
                "minimum": 0
              },
              "variantCount": {
                "type": "number",
                "description": "The number of variant metrics buckets recorded in the previous day",
                "example": 10,
                "minimum": 0
              }
            }
          },
          "activeUsers": {
            "type": "object",
            "description": "The number of active users in the last 7, 30 and 90 days",
            "properties": {
              "last7": {
                "type": "number",
                "description": "The number of active users in the last 7 days",
                "example": 5,
                "minimum": 0
              },
              "last30": {
                "type": "number",
                "description": "The number of active users in the last 30 days",
                "example": 10,
                "minimum": 0
              },
              "last60": {
                "type": "number",
                "description": "The number of active users in the last 60 days",
                "example": 12,
                "minimum": 0
              },
              "last90": {
                "type": "number",
                "description": "The number of active users in the last 90 days",
                "example": 15,
                "minimum": 0
              }
            }
          },
          "productionChanges": {
            "type": "object",
            "description": "The number of changes to the production environment in the last 30, 60 and 90 days",
            "properties": {
              "last30": {
                "type": "number",
                "description": "The number of changes in production in the last 30 days",
                "example": 10,
                "minimum": 0
              },
              "last60": {
                "type": "number",
                "description": "The number of changes in production in the last 60 days",
                "example": 12,
                "minimum": 0
              },
              "last90": {
                "type": "number",
                "description": "The number of changes in production in the last 90 days",
                "example": 15,
                "minimum": 0
              }
            }
          },
          "featureToggles": {
            "type": "number",
            "description": "The number of feature-toggles this instance has",
            "example": 47,
            "minimum": 0
          },
          "projects": {
            "type": "number",
            "description": "The number of projects defined in this instance.",
            "example": 3,
            "minimum": 0
          },
          "contextFields": {
            "type": "number",
            "description": "The number of context fields defined in this instance.",
            "example": 7,
            "minimum": 0
          },
          "roles": {
            "type": "number",
            "description": "The number of roles defined in this instance",
            "example": 5,
            "minimum": 0
          },
          "groups": {
            "type": "number",
            "description": "The number of groups defined in this instance",
            "example": 12,
            "minimum": 0
          },
          "environments": {
            "type": "number",
            "description": "The number of environments defined in this instance",
            "example": 3,
            "minimum": 0
          },
          "segments": {
            "type": "number",
            "description": "The number of segments defined in this instance",
            "example": 19,
            "minimum": 0
          },
          "strategies": {
            "type": "number",
            "description": "The number of strategies defined in this instance",
            "example": 8,
            "minimum": 0
          },
          "SAMLenabled": {
            "type": "boolean",
            "description": "Whether or not SAML authentication is enabled for this instance",
            "example": false
          },
          "OIDCenabled": {
            "type": "boolean",
            "description": "Whether or not OIDC authentication is enabled for this instance",
            "example": true
          },
          "clientApps": {
            "type": "array",
            "description": "A count of connected applications in the last week, last month and all time since last restart",
            "items": {
              "type": "object",
              "description": "An entry describing how many client applications has been observed over the defined range",
              "properties": {
                "range": {
                  "type": "string",
                  "description": "A description of a time range",
                  "enum": [
                    "allTime",
                    "30d",
                    "7d"
                  ],
                  "example": "30d"
                },
                "count": {
                  "type": "number",
                  "description": "The number of client applications that have been observed in this period",
                  "example": 1
                }
              }
            }
          },
          "featureExports": {
            "type": "number",
            "description": "The number of export operations on this instance",
            "example": 0,
            "minimum": 0
          },
          "featureImports": {
            "type": "number",
            "description": "The number of import operations on this instance",
            "example": 0,
            "minimum": 0
          },
          "sum": {
            "type": "string",
            "description": "A SHA-256 checksum of the instance statistics to be used to verify that the data in this object has not been tampered with",
            "example": "b023323477abb1eb145bebf3cdb30a1c2063e3edc1f7ae474ed8ed6c80de9a3b"
          }
        }
      },
      "integrationEventSchema": {
        "type": "object",
        "required": [
          "id",
          "integrationId",
          "createdAt",
          "state",
          "stateDetails",
          "event",
          "details"
        ],
        "description": "An object describing an integration event.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9]+$",
            "description": "The integration event's ID. Integration event IDs are incrementing integers. In other words, a more recently created integration event will always have a higher ID than an older one. This ID is represented as a string since it is a BigInt.",
            "example": "7"
          },
          "integrationId": {
            "type": "integer",
            "description": "The ID of the integration that the integration event belongs to.",
            "example": 42
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of when the integration event was created. In other words, the date and time of when the integration handled the event.",
            "example": "2023-12-27T13:37:00+01:00"
          },
          "state": {
            "type": "string",
            "enum": [
              "success",
              "failed",
              "successWithErrors"
            ],
            "description": "The state of the integration event. Can be one of `success`, `failed` or `successWithErrors`.",
            "example": "failed"
          },
          "stateDetails": {
            "type": "string",
            "description": "Details about the state of the integration event.",
            "example": "Status code: 429 - Rate limit reached."
          },
          "event": {
            "$ref": "#/components/schemas/eventSchema",
            "description": "The event that triggered this integration event."
          },
          "details": {
            "type": "object",
            "x-enforcer-exception-skip-codes": "WSCH006",
            "description": "Detailed information about the integration event. The contents vary depending on the type of integration and the specific details.",
            "example": {
              "message": "*user@yourcompany.com* created a new *slack-app* integration configuration",
              "channels": [
                "engineering",
                "unleash-updates"
              ]
            }
          }
        }
      },
      "integrationEventsSchema": {
        "description": "A response model with a list of integration events.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "integrationEvents"
        ],
        "properties": {
          "integrationEvents": {
            "type": "array",
            "description": "A list of integration events.",
            "items": {
              "$ref": "#/components/schemas/integrationEventSchema"
            }
          }
        }
      },
      "legalValueSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Describes a legal value. Typically used to limit possible values for contextFields or strategy properties",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "description": "The valid value",
            "type": "string",
            "example": "#c154c1"
          },
          "description": {
            "description": "Describes this specific legal value",
            "type": "string",
            "example": "Deep fuchsia"
          }
        }
      },
      "loginSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "username",
          "password"
        ],
        "description": "A username/password login request",
        "properties": {
          "username": {
            "description": "The username trying to log in",
            "type": "string",
            "example": "user"
          },
          "password": {
            "description": "The password of the user trying to log in",
            "type": "string",
            "example": "hunter2"
          }
        }
      },
      "maintenanceSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "The current state of Unleash's maintenance mode feature.",
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "description": "Whether maintenance mode is enabled or not.",
            "type": "boolean",
            "example": true
          }
        }
      },
      "meSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "user",
          "permissions",
          "feedback",
          "splash"
        ],
        "description": "Detailed user information",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/userSchema"
          },
          "permissions": {
            "description": "User permissions for projects and environments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/permissionSchema"
            }
          },
          "feedback": {
            "description": "User feedback information",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/feedbackResponseSchema"
            }
          },
          "splash": {
            "description": "Splash screen configuration",
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "nameSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "description": "An object with a name",
        "properties": {
          "name": {
            "description": "The name of the represented object.",
            "example": "betaUser",
            "type": "string"
          }
        }
      },
      "outdatedSdksSchema": {
        "type": "object",
        "description": "Data about outdated SDKs that should be upgraded.",
        "additionalProperties": false,
        "required": [
          "sdks"
        ],
        "properties": {
          "sdks": {
            "type": "array",
            "description": "A list of SDKs",
            "items": {
              "type": "object",
              "required": [
                "sdkVersion",
                "applications"
              ],
              "additionalProperties": false,
              "properties": {
                "sdkVersion": {
                  "type": "string",
                  "description": "An outdated SDK version identifier. Usually formatted as \"unleash-client-<language>:<version>\"",
                  "example": "unleash-client-java:7.0.0"
                },
                "applications": {
                  "type": "array",
                  "items": {
                    "description": "Name of the application",
                    "type": "string",
                    "example": "accounting"
                  },
                  "description": "A list of applications using the SDK version"
                }
              }
            }
          }
        }
      },
      "overrideSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "contextName",
          "values"
        ],
        "description": "An override for deciding which variant should be assigned to a user based on the context name",
        "properties": {
          "contextName": {
            "description": "The name of the context field used to determine overrides",
            "type": "string",
            "example": "userId"
          },
          "values": {
            "description": "Which values that should be overriden",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "red",
              "blue"
            ]
          }
        }
      },
      "parametersSchema": {
        "type": "object",
        "description": "A list of parameters for a strategy",
        "additionalProperties": {
          "type": "string"
        }
      },
      "parentFeatureOptionsSchema": {
        "type": "array",
        "description": "A list of parent feature names available for a given child feature. Features that have their own parents are excluded.",
        "items": {
          "type": "string"
        }
      },
      "parentVariantOptionsSchema": {
        "type": "array",
        "description": "A list of parent variant names available for a given parent feature. This list includes strategy variants and feature environment variants.",
        "items": {
          "type": "string"
        }
      },
      "passwordSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "password"
        ],
        "description": "Fields used to create new password or update old password",
        "properties": {
          "password": {
            "type": "string",
            "example": "k!5As3HquUrQ",
            "description": "The new password to change or validate."
          },
          "oldPassword": {
            "type": "string",
            "example": "Oldk!5As3HquUrQ",
            "description": "The old password the user is changing. This field is for the non-admin users changing their own password."
          },
          "confirmPassword": {
            "type": "string",
            "example": "k!5As3HquUrQ",
            "description": "The confirmation of the new password. This field is for the non-admin users changing their own password."
          }
        }
      },
      "patSchema": {
        "type": "object",
        "description": "Describes a [personal access token](https://docs.getunleash.io/how-to/how-to-create-personal-access-tokens), or PAT. PATs are automatically scoped to the authenticated user.",
        "required": [
          "id",
          "createdAt",
          "description",
          "expiresAt"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The PAT's ID. PAT IDs are incrementing integers. In other words, a more recently created PAT will always have a higher ID than an older one.",
            "example": 1,
            "minimum": 1
          },
          "secret": {
            "type": "string",
            "description": "The token used for authentication. It is automatically generated by Unleash when the PAT is created and that is the only time this property is returned.",
            "example": "user:xyzrandomstring"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-04-19T08:15:14.000Z",
            "description": "The date and time of when the PAT was created."
          },
          "seenAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-04-19T08:15:14.000Z",
            "description": "When the PAT was last seen/used to authenticate with. `null` if it has not been used yet."
          },
          "userId": {
            "type": "integer",
            "description": "The ID of the user this PAT belongs to.",
            "example": 1337
          },
          "description": {
            "type": "string",
            "description": "The PAT's description.",
            "example": "user:xyzrandomstring"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "The PAT's expiration date.",
            "example": "2023-04-19T08:15:14.000Z"
          }
        }
      },
      "patchSchema": {
        "type": "object",
        "required": [
          "path",
          "op"
        ],
        "description": "A [JSON patch](https://www.rfc-editor.org/rfc/rfc6902) operation description",
        "properties": {
          "path": {
            "type": "string",
            "description": "The path to the property to operate on",
            "example": "/type"
          },
          "op": {
            "type": "string",
            "enum": [
              "add",
              "remove",
              "replace",
              "copy",
              "move"
            ],
            "description": "The kind of operation to perform",
            "example": "replace"
          },
          "from": {
            "type": "string",
            "description": "The target to move or copy from, if performing one of those operations",
            "example": "/type"
          },
          "value": {
            "description": "The value to add or replace, if performing one of those operations",
            "example": "kill-switch"
          }
        }
      },
      "patchesSchema": {
        "type": "array",
        "description": "A list of patches",
        "items": {
          "$ref": "#/components/schemas/patchSchema"
        }
      },
      "patsSchema": {
        "type": "object",
        "description": "Contains a collection of [personal access tokens](https://docs.getunleash.io/how-to/how-to-create-personal-access-tokens), or PATs. PATs are automatically scoped to the authenticated user.",
        "properties": {
          "pats": {
            "type": "array",
            "description": "A collection of PATs.",
            "items": {
              "$ref": "#/components/schemas/patSchema"
            }
          }
        }
      },
      "permissionSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "permission"
        ],
        "description": "Project and environment permissions",
        "properties": {
          "permission": {
            "description": "[Project](https://docs.getunleash.io/reference/rbac#project-permissions) or [environment](https://docs.getunleash.io/reference/rbac#environment-permissions) permission name",
            "type": "string",
            "example": "UPDATE_FEATURE_STRATEGY"
          },
          "project": {
            "description": "The project this permission applies to",
            "type": "string",
            "example": "my-project"
          },
          "environment": {
            "description": "The environment this permission applies to",
            "type": "string",
            "example": "development"
          }
        }
      },
      "playgroundConstraintSchema": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "contextName",
          "operator",
          "result"
        ],
        "description": "A strategy constraint. For more information, refer to [the strategy constraint reference documentation](https://docs.getunleash.io/reference/strategy-constraints)",
        "properties": {
          "contextName": {
            "description": "The name of the context field that this constraint should apply to.",
            "example": "appName",
            "type": "string"
          },
          "operator": {
            "description": "The operator to use when evaluating this constraint. For more information about the various operators, refer to [the strategy constraint operator documentation](https://docs.getunleash.io/reference/strategy-constraints#strategy-constraint-operators).",
            "type": "string",
            "enum": [
              "NOT_IN",
              "IN",
              "STR_ENDS_WITH",
              "STR_STARTS_WITH",
              "STR_CONTAINS",
              "NUM_EQ",
              "NUM_GT",
              "NUM_GTE",
              "NUM_LT",
              "NUM_LTE",
              "DATE_AFTER",
              "DATE_BEFORE",
              "SEMVER_EQ",
              "SEMVER_GT",
              "SEMVER_LT"
            ],
            "example": "IN"
          },
          "caseInsensitive": {
            "description": "Whether the operator should be case sensitive or not. Defaults to `false` (being case sensitive).",
            "type": "boolean",
            "default": false
          },
          "inverted": {
            "description": "Whether the result should be negated or not. If `true`, will turn a `true` result into a `false` result and vice versa.",
            "type": "boolean",
            "default": false
          },
          "values": {
            "type": "array",
            "description": "The context values that should be used for constraint evaluation. Use this property instead of `value` for properties that accept multiple values.",
            "items": {
              "type": "string"
            },
            "example": [
              "my-app",
              "my-other-app"
            ]
          },
          "value": {
            "description": "The context value that should be used for constraint evaluation. Use this property instead of `values` for properties that only accept single values.",
            "type": "string",
            "example": "my-app"
          },
          "result": {
            "description": "Whether this was evaluated as true or false.",
            "type": "boolean"
          }
        }
      },
      "playgroundFeatureSchema": {
        "description": "A simplified feature flag model intended for the Unleash playground.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "projectId",
          "isEnabled",
          "isEnabledInCurrentEnvironment",
          "variant",
          "variants",
          "strategies"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "my-feature",
            "description": "The feature's name."
          },
          "projectId": {
            "type": "string",
            "example": "my-project",
            "description": "The ID of the project that contains this feature."
          },
          "strategies": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "result",
              "data"
            ],
            "description": "The feature's applicable strategies and cumulative results of the strategies",
            "properties": {
              "result": {
                "description": "The cumulative results of all the feature's strategies. Can be `true`,\n                                  `false`, or `unknown`.\n                                  This property will only be `unknown`\n                                  if one or more of the strategies can't be fully evaluated and the rest of the strategies\n                                  all resolve to `false`.",
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "unknown"
                    ]
                  }
                ]
              },
              "data": {
                "description": "The strategies that apply to this feature.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/playgroundStrategySchema"
                }
              }
            }
          },
          "hasUnsatisfiedDependency": {
            "type": "boolean",
            "description": "Whether the feature has a parent dependency that is not satisfied"
          },
          "isEnabledInCurrentEnvironment": {
            "type": "boolean",
            "description": "Whether the feature is active and would be evaluated in the provided environment in a normal SDK context."
          },
          "isEnabled": {
            "description": "Whether this feature is enabled or not in the current environment.\n                          If a feature can't be fully evaluated (that is, `strategies.result` is `unknown`),\n                          this will be `false` to align with how client SDKs treat unresolved feature states.",
            "type": "boolean",
            "example": true
          },
          "variant": {
            "description": "The feature variant you receive based on the provided context or the _disabled\n                          variant_. If a feature is disabled or doesn't have any\n                          variants, you would get the _disabled variant_.\n                          Otherwise, you'll get one of thefeature's defined variants.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "name",
              "enabled"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The variant's name. If there is no variant or if the flag is disabled, this will be `disabled`",
                "example": "red-variant"
              },
              "enabled": {
                "type": "boolean",
                "description": "Whether the variant is enabled or not. If the feature is disabled or if it doesn't have variants, this property will be `false`"
              },
              "payload": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "type",
                  "value"
                ],
                "description": "An optional payload attached to the variant.",
                "properties": {
                  "type": {
                    "description": "The format of the payload.",
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "The payload value stringified.",
                    "example": "{\"property\": \"value\"}"
                  }
                }
              },
              "feature_enabled": {
                "type": "boolean",
                "description": "Use `featureEnabled` instead.",
                "example": true
              },
              "featureEnabled": {
                "deprecated": true,
                "type": "boolean",
                "description": "Whether the feature is enabled or not.",
                "example": true
              }
            },
            "nullable": true,
            "example": {
              "name": "green",
              "enabled": true
            }
          },
          "variants": {
            "type": "array",
            "description": "The feature variants.",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            }
          }
        }
      },
      "playgroundRequestSchema": {
        "description": "Data for the playground API to evaluate toggles",
        "type": "object",
        "required": [
          "environment",
          "context"
        ],
        "properties": {
          "environment": {
            "type": "string",
            "example": "development",
            "description": "The environment to evaluate toggles in."
          },
          "projects": {
            "description": "A list of projects to check for toggles in.",
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "my-project"
                ],
                "description": "A list of projects to check for toggles in."
              },
              {
                "type": "string",
                "enum": [
                  "*"
                ],
                "description": "Check toggles in all projects."
              }
            ]
          },
          "context": {
            "$ref": "#/components/schemas/sdkContextSchema"
          }
        }
      },
      "playgroundResponseSchema": {
        "description": "The state of all features given the provided input.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "features",
          "input"
        ],
        "properties": {
          "input": {
            "description": "The given input used to evaluate the features.",
            "$ref": "#/components/schemas/playgroundRequestSchema"
          },
          "features": {
            "type": "array",
            "description": "The list of features that have been evaluated.",
            "items": {
              "$ref": "#/components/schemas/playgroundFeatureSchema"
            }
          }
        }
      },
      "playgroundSegmentSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "The evaluated result of a segment as used by the Playground.",
        "required": [
          "name",
          "id",
          "constraints",
          "result"
        ],
        "properties": {
          "id": {
            "description": "The segment's id.",
            "type": "integer"
          },
          "name": {
            "description": "The name of the segment.",
            "example": "segment A",
            "type": "string"
          },
          "result": {
            "description": "Whether this was evaluated as true or false.",
            "type": "boolean"
          },
          "constraints": {
            "type": "array",
            "description": "The list of constraints in this segment.",
            "items": {
              "$ref": "#/components/schemas/playgroundConstraintSchema"
            }
          }
        }
      },
      "playgroundStrategySchema": {
        "type": "object",
        "description": "An evaluated feature flag strategy as used by the Playground",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "result",
          "segments",
          "constraints",
          "parameters",
          "disabled",
          "links"
        ],
        "properties": {
          "name": {
            "description": "The strategy's name.",
            "type": "string"
          },
          "title": {
            "type": "string",
            "example": "Beta rollout",
            "description": "Description of the feature's purpose."
          },
          "id": {
            "description": "The strategy's id.",
            "type": "string",
            "example": "3AECCF7E-FF82-4174-8287-8EBE06079A50"
          },
          "result": {
            "description": "The strategy's evaluation result. If the strategy is a custom strategy that Unleash can't evaluate, `evaluationStatus` will be `unknown`. Otherwise, it will be `true` or `false`",
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "evaluationStatus",
                  "enabled"
                ],
                "properties": {
                  "evaluationStatus": {
                    "type": "string",
                    "description": "Signals that this strategy could not be evaluated. This is most likely because you're using a custom strategy that Unleash doesn't know about. The `unevaluated` result is also returned if the strategy is disabled.",
                    "enum": [
                      "incomplete",
                      "unevaluated"
                    ]
                  },
                  "enabled": {
                    "description": "Whether this strategy resolves to `false` or if it might resolve to `true`. Because Unleash can't evaluate the strategy, it can't say for certain whether it will be `true`, but if you have failing constraints or segments, it _can_ determine that your strategy would be `false`.",
                    "anyOf": [
                      {
                        "type": "boolean",
                        "enum": [
                          false
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "unknown"
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "evaluationStatus",
                  "enabled"
                ],
                "properties": {
                  "evaluationStatus": {
                    "description": "Signals that this strategy was evaluated successfully.",
                    "type": "string",
                    "enum": [
                      "complete"
                    ]
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether this strategy evaluates to true or not."
                  },
                  "variant": {
                    "description": "The feature variant you receive based on the provided context or the _disabled\n                          variant_. If a feature is disabled or doesn't have any\n                          variants, you would get the _disabled variant_.\n                          Otherwise, you'll get one of the feature's defined variants.",
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "name",
                      "enabled"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The variant's name. If there is no variant or if the toggle is disabled, this will be `disabled`",
                        "example": "red-variant"
                      },
                      "enabled": {
                        "type": "boolean",
                        "description": "Whether the variant is enabled or not. If the feature is disabled or if it doesn't have variants, this property will be `false`"
                      },
                      "payload": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "type",
                          "value"
                        ],
                        "description": "An optional payload attached to the variant.",
                        "properties": {
                          "type": {
                            "description": "The format of the payload.",
                            "type": "string",
                            "enum": [
                              "json",
                              "csv",
                              "string",
                              "number"
                            ]
                          },
                          "value": {
                            "type": "string",
                            "description": "The payload value stringified.",
                            "example": "{\"property\": \"value\"}"
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "example": {
                      "name": "green",
                      "enabled": true
                    }
                  },
                  "variants": {
                    "type": "array",
                    "description": "The feature variants.",
                    "items": {
                      "$ref": "#/components/schemas/variantSchema"
                    }
                  }
                }
              }
            ]
          },
          "disabled": {
            "type": "boolean",
            "description": "The strategy's status. Disabled strategies are not evaluated",
            "example": false,
            "nullable": true
          },
          "segments": {
            "type": "array",
            "description": "The strategy's segments and their evaluation results.",
            "items": {
              "$ref": "#/components/schemas/playgroundSegmentSchema"
            }
          },
          "constraints": {
            "type": "array",
            "description": "The strategy's constraints and their evaluation results.",
            "items": {
              "$ref": "#/components/schemas/playgroundConstraintSchema"
            }
          },
          "parameters": {
            "description": "The strategy's constraints and their evaluation results.",
            "example": {
              "myParam1": "param value"
            },
            "$ref": "#/components/schemas/parametersSchema"
          },
          "links": {
            "description": "A set of links to actions you can perform on this strategy",
            "type": "object",
            "required": [
              "edit"
            ],
            "properties": {
              "edit": {
                "type": "string",
                "example": "/projects/some-project/features/some-feature/strategies/edit?environmentId=some-env&strategyId= 3AECCF7E-FF82-4174-8287-8EBE06079A50"
              }
            }
          }
        }
      },
      "profileSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "User profile overview",
        "required": [
          "rootRole",
          "projects",
          "features"
        ],
        "properties": {
          "rootRole": {
            "$ref": "#/components/schemas/roleSchema"
          },
          "projects": {
            "description": "Which projects this user is a member of",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "my-projectA",
              "my-projectB"
            ]
          },
          "features": {
            "description": "Deprecated, always returns empty array",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureSchema"
            },
            "example": []
          }
        }
      },
      "projectApplicationSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "environments",
          "instances",
          "sdks"
        ],
        "description": "A project application instance.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the application that is using the SDK. This is the same as the appName in the SDK configuration."
          },
          "environments": {
            "description": "The environments that the application is using. This is the same as the environment in the SDK configuration.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "development",
              "production"
            ]
          },
          "instances": {
            "description": "The instances of the application that are using the SDK.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "prod-b4ca",
              "prod-ac8a"
            ]
          },
          "sdks": {
            "type": "array",
            "description": "The SDKs that the application is using.",
            "items": {
              "$ref": "#/components/schemas/projectApplicationSdkSchema"
            }
          }
        }
      },
      "projectApplicationSdkSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "versions"
        ],
        "description": "A project application instance SDK.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the SDK package that the application is using.",
            "example": "unleash-client-node"
          },
          "versions": {
            "description": "The versions of the SDK that the application is using.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "4.1.1"
            ]
          }
        }
      },
      "projectApplicationsSchema": {
        "type": "object",
        "description": "A list of project applications",
        "required": [
          "total",
          "applications"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "example": 50,
            "description": "The total number of project applications."
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/projectApplicationSchema"
            },
            "description": "All applications defined for a specific project."
          }
        }
      },
      "projectDoraMetricsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "features"
        ],
        "description": "A projects dora metrics",
        "properties": {
          "projectAverage": {
            "type": "number",
            "description": "The average time it takes a feature flag to be enabled in production. The measurement unit is days."
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/doraFeaturesSchema"
            },
            "description": "An array of objects containing feature flag name and timeToProduction values. The measurement unit of timeToProduction is days."
          }
        }
      },
      "projectEnvironmentSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Add an environment to a project, optionally also sets if change requests are enabled for this environment on the project",
        "required": [
          "environment"
        ],
        "properties": {
          "environment": {
            "type": "string",
            "description": "The environment to add to the project",
            "example": "development"
          },
          "changeRequestsEnabled": {
            "type": "boolean",
            "description": "Whether change requests should be enabled or for this environment on the project or not",
            "example": true
          },
          "defaultStrategy": {
            "$ref": "#/components/schemas/createFeatureStrategySchema",
            "description": "A default strategy to create for this environment on the project."
          }
        }
      },
      "projectFlagCreatorsSchema": {
        "type": "array",
        "description": "A list of project flag creators",
        "items": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "id",
            "name"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "example": 50,
              "description": "The user id."
            },
            "name": {
              "description": "Name of the user. If the user has no set name, the API falls back to using the user's username (if they have one) or email (if neither name or username is set).",
              "type": "string",
              "example": "User"
            }
          }
        }
      },
      "projectInsightsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "stats",
          "leadTime",
          "featureTypeCounts",
          "health",
          "members"
        ],
        "description": "A high-level overview of a project insights. It contains information such as project statistics, overall health, types of flags, members overview, change requests overview.",
        "properties": {
          "stats": {
            "$ref": "#/components/schemas/projectStatsSchema",
            "description": "Project statistics"
          },
          "health": {
            "type": "object",
            "required": [
              "rating",
              "activeCount",
              "potentiallyStaleCount",
              "staleCount"
            ],
            "properties": {
              "rating": {
                "type": "integer",
                "description": "An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating) on a scale from 0 to 100",
                "example": 95
              },
              "activeCount": {
                "type": "number",
                "description": "The number of active feature flags.",
                "example": 12
              },
              "potentiallyStaleCount": {
                "type": "number",
                "description": "The number of potentially stale feature flags.",
                "example": 5
              },
              "staleCount": {
                "type": "number",
                "description": "The number of stale feature flags.",
                "example": 10
              }
            },
            "description": "Health summary of the project"
          },
          "leadTime": {
            "type": "object",
            "$ref": "#/components/schemas/projectDoraMetricsSchema",
            "description": "Lead time (DORA) metrics"
          },
          "featureTypeCounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureTypeCountSchema"
            },
            "description": "The number of features of each type"
          },
          "members": {
            "type": "object",
            "required": [
              "currentMembers",
              "change"
            ],
            "properties": {
              "currentMembers": {
                "type": "number",
                "description": "The number of total project members",
                "example": 10
              },
              "change": {
                "type": "number",
                "description": "The change in the number of project members compared to the previous month",
                "example": 10
              }
            },
            "description": "Active/inactive users summary"
          }
        }
      },
      "projectOverviewSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "name"
        ],
        "description": "A high-level overview of a project. It contains information such as project statistics, the name of the project, what members and what features it contains, etc.",
        "properties": {
          "stats": {
            "$ref": "#/components/schemas/projectStatsSchema",
            "description": "Project statistics"
          },
          "version": {
            "type": "integer",
            "example": 1,
            "description": "The schema version used to describe the project overview"
          },
          "name": {
            "type": "string",
            "example": "dx-squad",
            "description": "The name of this project"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "DX squad feature release",
            "description": "Additional information about the project"
          },
          "defaultStickiness": {
            "type": "string",
            "example": "userId",
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy"
          },
          "mode": {
            "type": "string",
            "enum": [
              "open",
              "protected",
              "private"
            ],
            "example": "open",
            "description": "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not."
          },
          "featureLimit": {
            "type": "number",
            "nullable": true,
            "example": 100,
            "description": "A limit on the number of features allowed in the project. Null if no limit."
          },
          "featureNaming": {
            "$ref": "#/components/schemas/createFeatureNamingPatternSchema"
          },
          "members": {
            "type": "number",
            "example": 4,
            "description": "The number of members this project has"
          },
          "health": {
            "type": "number",
            "example": 50,
            "description": "An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating) on a scale from 0 to 100"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/projectEnvironmentSchema"
            },
            "example": [
              {
                "environment": "development"
              },
              {
                "environment": "production",
                "defaultStrategy": {
                  "name": "flexibleRollout",
                  "constraints": [],
                  "parameters": {
                    "rollout": "50",
                    "stickiness": "customAppName",
                    "groupId": "stickyFlag"
                  }
                }
              }
            ],
            "description": "The environments that are enabled for this project"
          },
          "featureTypeCounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureTypeCountSchema"
            },
            "description": "The number of features of each type that are in this project"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-02-10T08:36:35.262Z",
            "description": "When the project was last updated."
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-02-10T08:36:35.262Z",
            "description": "When the project was archived."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-02-10T08:36:35.262Z",
            "description": "When the project was created."
          },
          "favorite": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the project was favorited, otherwise `false`."
          }
        }
      },
      "projectSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "description": "A definition of the project used for projects listing purposes",
        "properties": {
          "id": {
            "type": "string",
            "example": "dx-squad",
            "description": "The id of this project"
          },
          "name": {
            "type": "string",
            "example": "DX-Squad",
            "description": "The name of this project"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "DX squad feature release",
            "description": "Additional information about the project"
          },
          "health": {
            "type": "number",
            "example": 50,
            "description": "An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating) on a scale from 0 to 100"
          },
          "featureCount": {
            "type": "number",
            "example": 10,
            "description": "The number of features this project has"
          },
          "staleFeatureCount": {
            "type": "number",
            "example": 10,
            "description": "The number of stale features this project has"
          },
          "potentiallyStaleFeatureCount": {
            "type": "number",
            "example": 10,
            "description": "The number of potentially stale features this project has"
          },
          "memberCount": {
            "type": "number",
            "example": 4,
            "description": "The number of members this project has"
          },
          "createdAt": {
            "type": "string",
            "description": "When this project was created.",
            "example": "2023-07-27T12:12:28Z",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When this project was last updated.",
            "example": "2023-07-28T12:12:28Z"
          },
          "favorite": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the project was favorited, otherwise `false`."
          },
          "mode": {
            "type": "string",
            "enum": [
              "open",
              "protected",
              "private"
            ],
            "example": "open",
            "description": "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not."
          },
          "defaultStickiness": {
            "type": "string",
            "example": "userId",
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy"
          },
          "avgTimeToProduction": {
            "type": "number",
            "example": 10,
            "description": "The average time from when a feature was created to when it was enabled in the \"production\" environment during the current window"
          },
          "owners": {
            "description": "The users and/or groups that have the \"owner\" role in this project. If no such users or groups exist, the list will contain the \"system\" owner instead.",
            "type": "array",
            "minItems": 1,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "required": [
                    "ownerType",
                    "name"
                  ],
                  "properties": {
                    "ownerType": {
                      "type": "string",
                      "enum": [
                        "user"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "example": "User Name"
                    },
                    "imageUrl": {
                      "type": "string",
                      "nullable": true,
                      "example": "https://example.com/image.jpg"
                    },
                    "email": {
                      "type": "string",
                      "nullable": true,
                      "example": "user@example.com"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "ownerType",
                    "name"
                  ],
                  "properties": {
                    "ownerType": {
                      "type": "string",
                      "enum": [
                        "group"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "example": "Group Name"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "ownerType"
                  ],
                  "properties": {
                    "ownerType": {
                      "type": "string",
                      "enum": [
                        "system"
                      ]
                    }
                  }
                }
              ],
              "discriminator": {
                "propertyName": "ownerType",
                "mapping": {
                  "user": "#/components/schemas/UserOwner",
                  "group": "#/components/schemas/GroupOwner",
                  "system": "#/components/schemas/SystemOwner"
                }
              }
            }
          }
        }
      },
      "projectStatsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "avgTimeToProdCurrentWindow",
          "createdCurrentWindow",
          "createdPastWindow",
          "archivedCurrentWindow",
          "archivedPastWindow",
          "projectActivityCurrentWindow",
          "projectActivityPastWindow",
          "projectMembersAddedCurrentWindow"
        ],
        "description": "Statistics for a project, including the average time to production, number of features created, the project activity and more.\n\nStats are divided into current and previous **windows**.\n- The **current window** is the past 30 days.\n- The **previous window** is the 30 days **before** the current window (from 60 to 30 days ago)",
        "properties": {
          "avgTimeToProdCurrentWindow": {
            "type": "number",
            "example": 10,
            "description": "The average time from when a feature was created to when it was enabled in the \"production\" environment during the current window"
          },
          "createdCurrentWindow": {
            "type": "number",
            "example": 15,
            "description": "The number of feature flags created during the current window"
          },
          "createdPastWindow": {
            "type": "number",
            "example": 15,
            "description": "The number of feature flags created during the previous window"
          },
          "archivedCurrentWindow": {
            "type": "number",
            "example": 5,
            "description": "The number of feature flags that were archived during the current window"
          },
          "archivedPastWindow": {
            "type": "number",
            "example": 5,
            "description": "The number of feature flags that were archived during the previous window"
          },
          "projectActivityCurrentWindow": {
            "type": "number",
            "example": 100,
            "description": "The number of project events that occurred during the current window"
          },
          "projectActivityPastWindow": {
            "type": "number",
            "example": 100,
            "description": "The number of project events that occurred during the previous window"
          },
          "projectMembersAddedCurrentWindow": {
            "type": "number",
            "example": 1,
            "description": "The number of members that were added to the project during the current window"
          }
        }
      },
      "projectsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "projects"
        ],
        "description": "An overview of all the projects in the Unleash instance",
        "properties": {
          "version": {
            "type": "integer",
            "description": "The schema version used to represent the project data.",
            "example": 1
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/projectSchema"
            },
            "description": "A list of projects in the Unleash instance"
          }
        }
      },
      "publicSignupTokenCreateSchema": {
        "type": "object",
        "description": "Used for creating a [public invite link](https://docs.getunleash.io/reference/public-signup#public-sign-up-tokens)",
        "additionalProperties": false,
        "required": [
          "name",
          "expiresAt"
        ],
        "properties": {
          "name": {
            "description": "The token's name.",
            "type": "string"
          },
          "expiresAt": {
            "type": "string",
            "description": "The token's expiration date.",
            "format": "date-time"
          }
        }
      },
      "publicSignupTokenSchema": {
        "description": "Used for transporting a [public invite link](https://docs.getunleash.io/reference/public-signup#public-sign-up-tokens)",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "secret",
          "url",
          "name",
          "expiresAt",
          "createdAt",
          "createdBy",
          "enabled",
          "role"
        ],
        "properties": {
          "secret": {
            "description": "The actual value of the token. This is the part that is used by Unleash to create an invite link",
            "type": "string",
            "example": "a3c84b25409ea8ca1782ef17f94a42fc"
          },
          "url": {
            "description": "The public signup link for the token. Users who follow this link will be taken to a signup page where they can create an Unleash user.",
            "type": "string",
            "nullable": true,
            "example": "https://sandbox.getunleash.io/enterprise/new-user?invite=a3c84b25409ea8ca1782ef17f94a42fc"
          },
          "name": {
            "description": "The token's name. Only for displaying in the UI",
            "type": "string",
            "example": "Invite public viewers"
          },
          "enabled": {
            "description": "Whether the token is active. This property will always be `false` for a token that has expired.",
            "type": "boolean",
            "example": true
          },
          "expiresAt": {
            "type": "string",
            "description": "The time when the token will expire.",
            "format": "date-time",
            "example": "2023-04-12T11:13:31.960Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the token was created.",
            "example": "2023-04-12T11:13:31.960Z"
          },
          "createdBy": {
            "description": "The creator's email or username",
            "example": "someone@example.com",
            "type": "string",
            "nullable": true
          },
          "users": {
            "type": "array",
            "description": "Array of users that have signed up using the token.",
            "items": {
              "$ref": "#/components/schemas/userSchema"
            },
            "nullable": true
          },
          "role": {
            "description": "Users who sign up using this token will be given this role.",
            "$ref": "#/components/schemas/roleSchema"
          }
        }
      },
      "publicSignupTokenUpdateSchema": {
        "description": "Used by Unleash for updating a token's expiration date or, when deleting the invite link, it's status",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "expiresAt": {
            "type": "string",
            "description": "The token's expiration date.",
            "format": "date-time",
            "example": "2023-04-11T15:46:56Z"
          },
          "enabled": {
            "description": "Whether the token is active or not.",
            "type": "boolean",
            "example": true
          }
        }
      },
      "publicSignupTokensSchema": {
        "type": "object",
        "description": "A wrapper object containing all the public signup tokens",
        "additionalProperties": false,
        "required": [
          "tokens"
        ],
        "properties": {
          "tokens": {
            "type": "array",
            "description": "An array of all the public signup tokens",
            "example": [
              {
                "secret": "a3c84b25409ea8ca1782ef17f94a42fc",
                "url": "https://my_unleash_instance/new-user?invite=a3c84b25409ea8ca1782ef17f94a42fc",
                "name": "Invite public viewers",
                "enabled": false,
                "expiresAt": "2023-04-12T11:13:31.960Z",
                "createdAt": "2023-04-12T11:13:31.960Z",
                "createdBy": "someone",
                "users": null,
                "role": {
                  "id": 3,
                  "type": "root",
                  "name": "Viewer"
                }
              }
            ],
            "items": {
              "$ref": "#/components/schemas/publicSignupTokenSchema"
            }
          }
        }
      },
      "pushVariantsSchema": {
        "type": "object",
        "description": "Data used when copying variants into a new environment.",
        "properties": {
          "variants": {
            "type": "array",
            "description": "The variants to write to the provided environments",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            }
          },
          "environments": {
            "type": "array",
            "description": "The enviromnents to write the provided variants to",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "recordUiErrorSchema": {
        "type": "object",
        "required": [
          "errorMessage"
        ],
        "description": "An object representing an error from the UI",
        "properties": {
          "errorMessage": {
            "type": "string",
            "description": "The error message"
          },
          "errorStack": {
            "type": "string",
            "description": "The stack trace of the error"
          }
        }
      },
      "requestsPerSecondSchema": {
        "type": "object",
        "description": "Statistics for usage of Unleash, formatted so it can easily be used in a graph",
        "properties": {
          "status": {
            "type": "string",
            "description": "Whether the query against prometheus succeeded or failed",
            "enum": [
              "success",
              "failure"
            ],
            "example": "success"
          },
          "data": {
            "type": "object",
            "description": "The query result from prometheus",
            "properties": {
              "resultType": {
                "type": "string",
                "description": "Prometheus compatible result type.",
                "enum": [
                  "matrix",
                  "vector",
                  "scalar",
                  "string"
                ],
                "example": "vector"
              },
              "result": {
                "description": "An array of values per metric. Each one represents a line in the graph labeled by its metric name",
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A representation of a single metric to build a line in a graph",
                  "properties": {
                    "metric": {
                      "description": "A key value set representing the metric",
                      "type": "object",
                      "properties": {
                        "appName": {
                          "description": "Name of the application this metric relates to",
                          "type": "string",
                          "example": "mySdk"
                        },
                        "endpoint": {
                          "description": "Which endpoint has been accessed",
                          "type": "string",
                          "example": "/api/frontend"
                        }
                      }
                    },
                    "values": {
                      "description": "An array of arrays. Each element of the array is an array of size 2 consisting of the 2 axis for the graph: in position zero the x axis represented as a number and position one the y axis represented as string",
                      "type": "array",
                      "items": {
                        "type": "array",
                        "description": "Either the x axis represented as a number or the y axis represented as a string",
                        "items": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "An identifier for the line in the graph"
                            },
                            {
                              "type": "number",
                              "description": "The number of requests at this point in time"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "requestsPerSecondSegmentedSchema": {
        "type": "object",
        "description": "Get usage metrics separated by client and admin paths",
        "properties": {
          "clientMetrics": {
            "$ref": "#/components/schemas/requestsPerSecondSchema"
          },
          "adminMetrics": {
            "$ref": "#/components/schemas/requestsPerSecondSchema"
          }
        }
      },
      "resetPasswordSchema": {
        "type": "object",
        "description": "Data used to provide users a way to reset their passwords.",
        "additionalProperties": false,
        "required": [
          "resetPasswordUrl"
        ],
        "properties": {
          "resetPasswordUrl": {
            "description": "A URL pointing to a location where the user can reset their password",
            "type": "string",
            "format": "uri",
            "example": "https://unleash.reset.com"
          }
        }
      },
      "resourceLimitsSchema": {
        "type": "object",
        "description": "A map of resource names and their limits.",
        "required": [
          "segmentValues",
          "strategySegments",
          "actionSetActions",
          "actionSetsPerProject",
          "actionSetFilters",
          "actionSetFilterValues",
          "signalEndpoints",
          "signalTokensPerEndpoint",
          "featureEnvironmentStrategies",
          "constraintValues",
          "environments",
          "projects",
          "apiTokens",
          "segments",
          "featureFlags",
          "constraints"
        ],
        "additionalProperties": false,
        "properties": {
          "segmentValues": {
            "type": "integer",
            "example": 10,
            "description": "The maximum number of values per segment allowed."
          },
          "strategySegments": {
            "type": "integer",
            "example": 10,
            "description": "The maximum number of strategy segments allowed."
          },
          "actionSetActions": {
            "type": "integer",
            "example": 10,
            "description": "The maximum number of actions per action set allowed."
          },
          "actionSetsPerProject": {
            "type": "integer",
            "example": 10,
            "description": "The maximum number of action set definitions per project allowed."
          },
          "actionSetFilters": {
            "type": "integer",
            "example": 10,
            "description": "The maximum number of filters per action set allowed."
          },
          "actionSetFilterValues": {
            "type": "integer",
            "example": 10,
            "description": "The maximum number of filter values inside an action set allowed."
          },
          "signalEndpoints": {
            "type": "integer",
            "example": 10,
            "description": "The maximum number of signal endpoints allowed."
          },
          "signalTokensPerEndpoint": {
            "type": "integer",
            "example": 10,
            "description": "The maximum number of signal tokens per endpoint allowed."
          },
          "featureEnvironmentStrategies": {
            "type": "integer",
            "example": 30,
            "description": "The maximum number of feature environment strategies allowed."
          },
          "constraintValues": {
            "type": "integer",
            "example": 250,
            "description": "The maximum number of values for a single constraint."
          },
          "constraints": {
            "type": "integer",
            "example": 30,
            "description": "The maximum number of constraints in a single strategy."
          },
          "environments": {
            "type": "integer",
            "minimum": 1,
            "example": 50,
            "description": "The maximum number of environments allowed."
          },
          "apiTokens": {
            "type": "integer",
            "minimum": 0,
            "example": 2000,
            "description": "The maximum number of SDK and admin API tokens you can have at the same time. This limit applies only to server-side and client-side SDK tokens and to admin tokens. Personal access tokens are not subject to this limit. The limit applies to the total number of tokens across all projects in your organization."
          },
          "projects": {
            "type": "integer",
            "minimum": 1,
            "example": 500,
            "description": "The maximum number of projects allowed."
          },
          "segments": {
            "type": "integer",
            "example": 300,
            "description": "The maximum number of segments allowed."
          },
          "featureFlags": {
            "type": "integer",
            "minimum": 1,
            "example": 5000,
            "description": "The maximum number of feature flags you can have at the same time. Archived flags do not count towards this limit."
          }
        }
      },
      "roleSchema": {
        "type": "object",
        "description": "A role holds permissions to allow Unleash to decide what actions a role holder is allowed to perform",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The role id",
            "example": 9,
            "minimum": 0
          },
          "type": {
            "description": "A role can either be a global root role (applies to all projects) or a project role",
            "type": "string",
            "example": "root"
          },
          "name": {
            "description": "The name of the role",
            "type": "string",
            "example": "Editor"
          },
          "description": {
            "description": "A more detailed description of the role and what use it's intended for",
            "type": "string",
            "example": "Users with the editor role have access to most features in Unleash but can not manage users and roles in the global scope. Editors will be added as project owners when creating projects and get superuser rights within the context of these projects. Users with the editor role will also get access to most permissions on the default project by default."
          },
          "project": {
            "description": "What project the role belongs to",
            "type": "string",
            "nullable": true,
            "example": "default"
          }
        }
      },
      "rolesSchema": {
        "type": "object",
        "description": "A list of roles",
        "additionalProperties": false,
        "required": [
          "version",
          "roles"
        ],
        "properties": {
          "version": {
            "type": "integer",
            "description": "The version of the role schema used",
            "minimum": 1,
            "example": 1
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/roleSchema"
            },
            "description": "A list of roles"
          }
        }
      },
      "sdkContextSchema": {
        "description": "The Unleash context as modeled in client SDKs",
        "type": "object",
        "required": [
          "appName"
        ],
        "additionalProperties": true,
        "properties": {
          "appName": {
            "type": "string",
            "minLength": 1,
            "example": "My cool application.",
            "description": "The name of the application."
          },
          "currentTime": {
            "type": "string",
            "format": "date-time",
            "example": "2022-07-05T12:56:41+02:00",
            "description": "A DateTime (or similar) data class instance or a string in an RFC3339-compatible format. Defaults to the current time if not set by the user."
          },
          "environment": {
            "type": "string",
            "deprecated": true,
            "description": "The environment the app is running in."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional Unleash context properties",
            "example": {
              "customContextField": "this is one!",
              "otherCustomField": "3"
            }
          },
          "remoteAddress": {
            "type": "string",
            "example": "192.168.1.1",
            "description": "The app's IP address"
          },
          "sessionId": {
            "type": "string",
            "example": "b65e7b23-fec0-4814-a129-0e9861ef18fc",
            "description": "An identifier for the current session"
          },
          "userId": {
            "type": "string",
            "example": "username@provider.com",
            "description": "An identifier for the current user"
          }
        }
      },
      "sdkFlatContextSchema": {
        "description": "The Unleash context with flattened properties",
        "type": "object",
        "required": [
          "appName"
        ],
        "additionalProperties": true,
        "properties": {
          "appName": {
            "type": "string",
            "minLength": 1,
            "example": "My cool application.",
            "description": "The name of the application."
          },
          "currentTime": {
            "type": "string",
            "format": "date-time",
            "example": "2022-07-05T12:56:41+02:00",
            "description": "A DateTime (or similar) data class instance or a string in an RFC3339-compatible format. Defaults to the current time if not set by the user."
          },
          "environment": {
            "type": "string",
            "deprecated": true,
            "description": "The environment the app is running in."
          },
          "remoteAddress": {
            "type": "string",
            "example": "192.168.1.1",
            "description": "The app's IP address"
          },
          "sessionId": {
            "type": "string",
            "example": "b65e7b23-fec0-4814-a129-0e9861ef18fc",
            "description": "An identifier for the current session"
          },
          "userId": {
            "type": "string",
            "example": "username@provider.com",
            "description": "An identifier for the current user"
          }
        }
      },
      "searchFeaturesSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "features"
        ],
        "description": "A list of features matching search and filter criteria.",
        "properties": {
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureSearchResponseSchema"
            },
            "description": "The full list of features in this project matching search and filter criteria."
          },
          "total": {
            "type": "number",
            "description": "Total count of the features matching search and filter criteria",
            "example": 10
          }
        }
      },
      "segmentSchema": {
        "type": "object",
        "description": "Represents a segment of users defined by a set of constraints.",
        "additionalProperties": false,
        "required": [
          "id",
          "constraints"
        ],
        "properties": {
          "id": {
            "type": "number",
            "description": "The segment's id."
          },
          "name": {
            "type": "string",
            "description": "The name of the segment.",
            "example": "segment A"
          },
          "constraints": {
            "type": "array",
            "description": "List of constraints that determine which users are part of the segment",
            "items": {
              "$ref": "#/components/schemas/constraintSchema"
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of the segment.",
            "example": "Segment A description"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time the segment was created as a RFC 3339-conformant timestamp.",
            "example": "2023-07-05T12:56:00.000Z"
          },
          "createdBy": {
            "type": "string",
            "description": "Which user created this segment",
            "example": "johndoe"
          },
          "project": {
            "type": "string",
            "nullable": true,
            "description": "The project the segment relates to, if applicable.",
            "example": "default"
          }
        }
      },
      "segmentStrategiesSchema": {
        "type": "object",
        "required": [
          "strategies"
        ],
        "description": "A collection of strategies belonging to a specified segment.",
        "additionalProperties": false,
        "properties": {
          "strategies": {
            "description": "The list of strategies",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "featureName",
                "projectId",
                "environment",
                "strategyName"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of the strategy",
                  "example": "e465c813-cffb-4232-b184-82b1d6fe9d3d"
                },
                "featureName": {
                  "type": "string",
                  "description": "The name of the feature flag that this strategy belongs to.",
                  "example": "new-signup-flow"
                },
                "projectId": {
                  "type": "string",
                  "description": "The ID of the project that the strategy belongs to.",
                  "example": "red-vista"
                },
                "environment": {
                  "type": "string",
                  "description": "The ID of the environment that the strategy belongs to.",
                  "example": "development"
                },
                "strategyName": {
                  "type": "string",
                  "description": "The name of the strategy's type.",
                  "example": "flexibleRollout"
                }
              }
            }
          },
          "changeRequestStrategies": {
            "description": "A list of strategies that use this segment in active change requests.",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "featureName",
                "projectId",
                "environment",
                "strategyName"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of the strategy. Not present on new strategies that haven't been added to the feature flag yet.",
                  "example": "e465c813-cffb-4232-b184-82b1d6fe9d3d"
                },
                "featureName": {
                  "type": "string",
                  "description": "The name of the feature flag that this strategy belongs to.",
                  "example": "new-signup-flow"
                },
                "projectId": {
                  "type": "string",
                  "description": "The ID of the project that the strategy belongs to.",
                  "example": "red-vista"
                },
                "environment": {
                  "type": "string",
                  "description": "The ID of the environment that the strategy belongs to.",
                  "example": "development"
                },
                "strategyName": {
                  "type": "string",
                  "description": "The name of the strategy's type.",
                  "example": "flexibleRollout"
                }
              }
            }
          }
        }
      },
      "segmentsSchema": {
        "description": "Data containing a list of [segments](https://docs.getunleash.io/reference/segments)",
        "type": "object",
        "properties": {
          "segments": {
            "type": "array",
            "description": "A list of segments",
            "items": {
              "$ref": "#/components/schemas/adminSegmentSchema"
            }
          }
        }
      },
      "setStrategySortOrderSchema": {
        "type": "array",
        "description": "An array of strategies with their new sort order",
        "items": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "id",
            "sortOrder"
          ],
          "description": "A strategy with its new sort order",
          "properties": {
            "id": {
              "type": "string",
              "example": "9c40958a-daac-400e-98fb-3bb438567008",
              "description": "The ID of the strategy"
            },
            "sortOrder": {
              "type": "number",
              "example": 1,
              "description": "The new sort order of the strategy"
            }
          }
        }
      },
      "setUiConfigSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Unleash configuration settings affect the admin UI.",
        "properties": {
          "frontendSettings": {
            "type": "object",
            "description": "Settings related to the front-end API.",
            "additionalProperties": false,
            "required": [
              "frontendApiOrigins"
            ],
            "properties": {
              "frontendApiOrigins": {
                "description": "The list of origins that the front-end API should accept requests from.",
                "example": [
                  "*"
                ],
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "sortOrderSchema": {
        "type": "object",
        "description": "A map of object IDs and their corresponding sort orders.",
        "additionalProperties": {
          "type": "integer",
          "description": "Sort order for the object whose ID is the key used for this property.",
          "example": 6
        }
      },
      "splashRequestSchema": {
        "type": "object",
        "description": "Data related to a user having seen a splash screen.",
        "required": [
          "userId",
          "splashId"
        ],
        "properties": {
          "userId": {
            "type": "integer",
            "description": "The ID of the user that was shown the splash screen.",
            "example": 1
          },
          "splashId": {
            "type": "string",
            "description": "The ID of the splash screen that was shown.",
            "example": "new-splash-screen"
          }
        }
      },
      "splashResponseSchema": {
        "type": "object",
        "description": "Data related to a user having seen a splash screen.",
        "required": [
          "userId",
          "splashId",
          "seen"
        ],
        "properties": {
          "userId": {
            "type": "integer",
            "description": "The ID of the user that was shown the splash screen.",
            "example": 1
          },
          "splashId": {
            "type": "string",
            "description": "The ID of the splash screen that was shown.",
            "example": "new-splash-screen"
          },
          "seen": {
            "type": "boolean",
            "description": "Indicates whether the user has seen the splash screen or not.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "strategiesSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "strategies"
        ],
        "description": "List of strategies",
        "properties": {
          "version": {
            "type": "integer",
            "enum": [
              1
            ],
            "example": 1,
            "description": "Version of the strategies schema"
          },
          "strategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/strategySchema"
            },
            "description": "List of strategies"
          }
        }
      },
      "strategySchema": {
        "description": "The [activation strategy](https://docs.getunleash.io/reference/activation-strategies) schema",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "displayName",
          "description",
          "editable",
          "deprecated",
          "parameters"
        ],
        "properties": {
          "title": {
            "type": "string",
            "nullable": true,
            "description": "An optional title for the strategy",
            "example": "GradualRollout - Prod25"
          },
          "name": {
            "type": "string",
            "description": "The name (type) of the strategy",
            "example": "flexibleRollout"
          },
          "displayName": {
            "type": "string",
            "description": "A human friendly name for the strategy",
            "example": "Gradual Rollout",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "A short description of the strategy",
            "example": "Gradual rollout to logged in users"
          },
          "editable": {
            "type": "boolean",
            "description": "Whether the strategy can be edited or not. Strategies bundled with Unleash cannot be edited.",
            "example": true
          },
          "deprecated": {
            "type": "boolean",
            "description": "",
            "example": true
          },
          "parameters": {
            "type": "array",
            "description": "A list of relevant parameters for each strategy",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string",
                  "example": "percentage"
                },
                "type": {
                  "type": "string",
                  "example": "percentage"
                },
                "description": {
                  "type": "string",
                  "example": "Gradual rollout to logged in users"
                },
                "required": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        }
      },
      "strategyVariantSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "This is an experimental property. It may change or be removed as we work on it. Please don't depend on it yet. A strategy variant allows you to attach any data to strategies instead of only returning `true`/`false`. Strategy variants take precedence over feature variants.",
        "required": [
          "name",
          "weight",
          "weightType",
          "stickiness"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The variant name. Must be unique for this feature flag",
            "example": "blue_group"
          },
          "weight": {
            "type": "integer",
            "description": "The weight is the likelihood of any one user getting this variant. It is an integer between 0 and 1000. See the section on [variant weights](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight) for more information",
            "minimum": 0,
            "maximum": 1000
          },
          "weightType": {
            "description": "Set to `fix` if this variant must have exactly the weight allocated to it. If the type is `variable`, the weight will adjust so that the total weight of all variants adds up to 1000. Refer to the [variant weight documentation](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight).",
            "type": "string",
            "example": "fix",
            "enum": [
              "variable",
              "fix"
            ]
          },
          "stickiness": {
            "type": "string",
            "description": "The [stickiness](https://docs.getunleash.io/reference/feature-toggle-variants#variant-stickiness) to use for distribution of this variant. Stickiness is how Unleash guarantees that the same user gets the same variant every time",
            "example": "custom.context.field"
          },
          "payload": {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "description": "Extra data configured for this variant",
            "properties": {
              "type": {
                "description": "The type of the value. Commonly used types are string, number, json and csv.",
                "type": "string",
                "enum": [
                  "json",
                  "csv",
                  "string",
                  "number"
                ]
              },
              "value": {
                "description": "The actual value of payload",
                "type": "string"
              }
            },
            "example": {
              "type": "json",
              "value": "{\"color\": \"red\"}"
            }
          }
        }
      },
      "tagSchema": {
        "type": "object",
        "description": "Representation of a [tag](https://docs.getunleash.io/reference/tags)",
        "additionalProperties": false,
        "required": [
          "value",
          "type"
        ],
        "properties": {
          "value": {
            "type": "string",
            "description": "The value of the tag.",
            "minLength": 2,
            "maxLength": 50,
            "example": "a-tag-value"
          },
          "type": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "description": "The [type](https://docs.getunleash.io/reference/tags#tag-types) of the tag",
            "example": "simple"
          }
        }
      },
      "tagTypeSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "A tag type.",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the tag type.",
            "example": "color"
          },
          "description": {
            "type": "string",
            "description": "The description of the tag type.",
            "example": "A tag type for describing the color of a tag."
          },
          "icon": {
            "type": "string",
            "nullable": true,
            "description": "The icon of the tag type.",
            "example": "not-really-used"
          }
        }
      },
      "tagTypesSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "tagTypes"
        ],
        "description": "A list of tag types with a version number representing the schema used to model the tag types.",
        "properties": {
          "version": {
            "type": "integer",
            "description": "The version of the schema used to model the tag types.",
            "example": 1
          },
          "tagTypes": {
            "type": "array",
            "description": "The list of tag types.",
            "items": {
              "$ref": "#/components/schemas/tagTypeSchema"
            }
          }
        }
      },
      "tagWithVersionSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "tag"
        ],
        "description": "A tag with a version number representing the schema used to model the tag.",
        "properties": {
          "version": {
            "type": "integer",
            "description": "The version of the schema used to model the tag.",
            "example": 1
          },
          "tag": {
            "$ref": "#/components/schemas/tagSchema"
          }
        }
      },
      "tagsBulkAddSchema": {
        "description": "Represents tag changes to be applied to a list of features.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "features",
          "tags"
        ],
        "properties": {
          "features": {
            "description": "The list of features that will be affected by the tag changes.",
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "tags": {
            "description": "The tag changes to be applied to the features.",
            "$ref": "#/components/schemas/updateTagsSchema"
          }
        }
      },
      "tagsSchema": {
        "description": "A list of tags with a version number",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "tags"
        ],
        "properties": {
          "version": {
            "type": "integer",
            "description": "The version of the schema used to model the tags."
          },
          "tags": {
            "type": "array",
            "description": "A list of tags.",
            "items": {
              "$ref": "#/components/schemas/tagSchema"
            }
          }
        }
      },
      "telemetrySettingsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "versionInfoCollectionEnabled",
          "featureInfoCollectionEnabled"
        ],
        "description": "Contains information about which settings are configured for version info collection and feature usage collection.",
        "properties": {
          "versionInfoCollectionEnabled": {
            "type": "boolean",
            "description": "Whether collection of version info is enabled/active.",
            "example": true
          },
          "featureInfoCollectionEnabled": {
            "type": "boolean",
            "description": "Whether collection of feature usage metrics is enabled/active.",
            "example": true
          }
        }
      },
      "toggleMaintenanceSchema": {
        "type": "object",
        "description": "Data used when to activate or deactivate maintenance mode for Unleash.",
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "description": "`true` if you want to activate maintenance mode, `false` if you want to deactivate it.",
            "type": "boolean",
            "example": true
          }
        }
      },
      "tokenStringListSchema": {
        "type": "object",
        "description": "A list of unleash tokens to validate against known tokens",
        "required": [
          "tokens"
        ],
        "properties": {
          "tokens": {
            "description": "Tokens that we want to get access information about",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "aproject:development.randomstring",
              "[]:production.randomstring"
            ]
          }
        }
      },
      "tokenUserSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "A user identified by a token",
        "required": [
          "id",
          "email",
          "token",
          "createdBy",
          "role"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The user id",
            "example": 7
          },
          "name": {
            "description": "The name of the user",
            "type": "string",
            "example": "Test McTest"
          },
          "email": {
            "description": "The email of the user",
            "type": "string",
            "example": "test@example.com"
          },
          "token": {
            "description": "A token uniquely identifying a user",
            "type": "string",
            "example": "user:xyzrandomstring"
          },
          "createdBy": {
            "description": "A username or email identifying which user created this token",
            "type": "string",
            "nullable": true,
            "example": "admin@example.com"
          },
          "role": {
            "$ref": "#/components/schemas/roleSchema"
          }
        }
      },
      "uiConfigSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "A collection of properties used to configure the Unleash Admin UI.",
        "required": [
          "version",
          "unleashUrl",
          "baseUriPath",
          "versionInfo"
        ],
        "properties": {
          "slogan": {
            "type": "string",
            "description": "The slogan to display in the UI footer.",
            "example": "The enterprise-ready feature flag service."
          },
          "name": {
            "type": "string",
            "description": "The name of this Unleash instance. Used to build the text in the footer.",
            "example": "Unleash enterprise"
          },
          "version": {
            "type": "string",
            "description": "The current version of Unleash",
            "example": "5.3.0-main"
          },
          "environment": {
            "type": "string",
            "description": "What kind of Unleash instance it is: Enterprise, Pro, or Open source",
            "example": "Enterprise"
          },
          "unleashUrl": {
            "type": "string",
            "description": "The URL of the Unleash instance.",
            "example": "https://unleash.mycompany.com/enterprise"
          },
          "baseUriPath": {
            "type": "string",
            "description": "The base URI path at which this Unleash instance is listening.",
            "example": "/enterprise"
          },
          "feedbackUriPath": {
            "type": "string",
            "description": "The URI path at which the feedback endpoint is listening.",
            "example": "/feedback"
          },
          "disablePasswordAuth": {
            "type": "boolean",
            "description": "Whether password authentication should be disabled or not.",
            "example": false
          },
          "emailEnabled": {
            "type": "boolean",
            "description": "Whether this instance can send out emails or not.",
            "example": true
          },
          "maintenanceMode": {
            "type": "boolean",
            "description": "Whether maintenance mode is currently active or not.",
            "example": false
          },
          "segmentValuesLimit": {
            "type": "number",
            "description": "The maximum number of values that can be used in a single segment.",
            "example": 1000,
            "deprecated": true
          },
          "strategySegmentsLimit": {
            "type": "number",
            "description": "The maximum number of segments that can be applied to a single strategy.",
            "example": 5,
            "deprecated": true
          },
          "resourceLimits": {
            "$ref": "#/components/schemas/resourceLimitsSchema",
            "description": "A map of resource names and their limits.",
            "example": {
              "segmentValues": 10,
              "strategySegments": 10,
              "actionSetActions": 10,
              "actionSetsPerProject": 10,
              "actionSetFilters": 10,
              "actionSetFilterValues": 10,
              "signalEndpoints": 10,
              "signalTokensPerEndpoint": 10,
              "featureEnvironmentStrategies": 30,
              "constraintValues": 250,
              "constraints": 30,
              "environments": 50,
              "apiTokens": 2000,
              "projects": 500,
              "segments": 300,
              "featureFlags": 5000
            }
          },
          "networkViewEnabled": {
            "type": "boolean",
            "description": "Whether to enable the Unleash network view or not.",
            "example": true
          },
          "frontendApiOrigins": {
            "type": "array",
            "description": "The list of origins that the front-end API should accept requests from.",
            "example": [
              "*"
            ],
            "items": {
              "type": "string"
            }
          },
          "flags": {
            "type": "object",
            "description": "Additional (largely experimental) features that are enabled in this Unleash instance.",
            "example": {
              "messageBanner": {
                "name": "disabled",
                "enabled": false
              },
              "featuresExportImport": true
            },
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/components/schemas/variantFlagSchema"
                }
              ]
            }
          },
          "links": {
            "description": "Relevant links to use in the UI.",
            "example": [
              {
                "value": "Documentation",
                "icon": "library_books",
                "href": "https://docs.getunleash.io/docs",
                "title": "User documentation"
              },
              {
                "value": "GitHub",
                "icon": "c_github",
                "href": "https://github.com/Unleash/unleash",
                "title": "Source code on GitHub"
              }
            ],
            "x-enforcer-exception-skip-codes": "WSCH006",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "authenticationType": {
            "type": "string",
            "description": "The type of authentication enabled for this Unleash instance",
            "example": "enterprise",
            "enum": [
              "open-source",
              "demo",
              "enterprise",
              "hosted",
              "custom",
              "none"
            ]
          },
          "versionInfo": {
            "$ref": "#/components/schemas/versionSchema"
          },
          "oidcConfiguredThroughEnv": {
            "type": "boolean",
            "description": "Whether the OIDC configuration is set through environment variables or not.",
            "example": false
          },
          "samlConfiguredThroughEnv": {
            "type": "boolean",
            "description": "Whether the SAML configuration is set through environment variables or not.",
            "example": false
          }
        }
      },
      "updateApiTokenSchema": {
        "type": "object",
        "required": [
          "expiresAt"
        ],
        "description": "An object with fields to updated for a given API token.",
        "properties": {
          "expiresAt": {
            "description": "The new time when this token should expire.",
            "example": "2023-09-04T11:26:24+02:00",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "updateContextFieldSchema": {
        "type": "object",
        "description": "Data to update an existing context field configuration.",
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of the context field",
            "example": "The user's subscription tier"
          },
          "stickiness": {
            "type": "boolean",
            "description": "`true` if this field should be available for use with [custom stickiness](https://docs.getunleash.io/reference/stickiness#custom-stickiness), otherwise `false`",
            "example": false
          },
          "sortOrder": {
            "type": "integer",
            "description": "How this context field should be sorted if no other sort order is selected",
            "example": 2
          },
          "legalValues": {
            "type": "array",
            "description": "A list of allowed values for this context field",
            "example": [
              {
                "value": "gold"
              },
              {
                "value": "silver"
              },
              {
                "value": "crystal"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/legalValueSchema"
            }
          }
        }
      },
      "updateFeatureSchema": {
        "type": "object",
        "description": "Data used for updating a feature flag",
        "properties": {
          "description": {
            "type": "string",
            "example": "Controls disabling of the comments section in case of an incident",
            "description": "Detailed description of the feature"
          },
          "type": {
            "enum": [
              "experiment",
              "kill-switch",
              "release",
              "operational",
              "permission"
            ],
            "example": "kill-switch",
            "description": "Type of the flag e.g. experiment, kill-switch, release, operational, permission"
          },
          "stale": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the feature is archived"
          },
          "archived": {
            "type": "boolean",
            "example": true,
            "description": "If `true` the feature flag will be moved to the [archive](https://docs.getunleash.io/reference/archived-toggles) with a property `archivedAt` set to current time"
          },
          "impressionData": {
            "type": "boolean",
            "example": false,
            "description": "`true` if the impression data collection is enabled for the feature"
          }
        }
      },
      "updateFeatureStrategySchema": {
        "type": "object",
        "description": "Update a strategy configuration in a feature",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the strategy type"
          },
          "sortOrder": {
            "type": "number",
            "description": "The order of the strategy in the list in feature environment configuration"
          },
          "constraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/constraintSchema"
            },
            "description": "A list of the constraints attached to the strategy. See https://docs.getunleash.io/reference/strategy-constraints"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "description": "A descriptive title for the strategy",
            "example": "Gradual Rollout 25-Prod"
          },
          "disabled": {
            "type": "boolean",
            "description": "A toggle to disable the strategy. defaults to true. Disabled strategies are not evaluated or returned to the SDKs",
            "example": false,
            "nullable": true
          },
          "parameters": {
            "$ref": "#/components/schemas/parametersSchema"
          }
        }
      },
      "updateFeatureStrategySegmentsSchema": {
        "type": "object",
        "required": [
          "projectId",
          "strategyId",
          "environmentId",
          "segmentIds"
        ],
        "description": "Data required to update segments for a strategy.",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The ID of the project that the strategy belongs to.",
            "example": "red-vista"
          },
          "strategyId": {
            "type": "string",
            "description": "The ID of the strategy to update segments for.",
            "example": "15d1e20b-6310-4e17-a0c2-9fb84de3053a"
          },
          "environmentId": {
            "type": "string",
            "description": "The ID of the strategy environment.",
            "example": "development"
          },
          "segmentIds": {
            "type": "array",
            "description": "The new list of segments (IDs) to use for this strategy. Any segments not in this list will be removed from the strategy.",
            "example": [
              1,
              5,
              6
            ],
            "items": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      },
      "updateFeatureTypeLifetimeSchema": {
        "type": "object",
        "required": [
          "lifetimeDays"
        ],
        "description": "Data used when updating the lifetime of a [feature flag type](https://docs.getunleash.io/reference/feature-toggle-types).",
        "properties": {
          "lifetimeDays": {
            "description": "The new lifetime (in days) that you want to assign to the feature flag type. If the value is `null` or `0`, then the feature flags of that type will never be marked as potentially stale. Otherwise, they will be considered potentially stale after the number of days indicated by this property.",
            "example": 7,
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "maximum": 2147483647
          }
        }
      },
      "updateStrategySchema": {
        "type": "object",
        "description": "The data required to update a strategy type.",
        "required": [
          "parameters"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of the strategy type.",
            "example": "Enable the feature for users who have not logged in before."
          },
          "parameters": {
            "type": "array",
            "description": "The parameter list lets you pass arguments to your custom activation strategy. These will be made available to your custom strategy implementation.",
            "items": {
              "type": "object",
              "required": [
                "name",
                "type"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the parameter",
                  "example": "Rollout percentage"
                },
                "type": {
                  "type": "string",
                  "description": "The [type of the parameter](https://docs.getunleash.io/reference/custom-activation-strategies#parameter-types)",
                  "enum": [
                    "string",
                    "percentage",
                    "list",
                    "number",
                    "boolean"
                  ],
                  "example": "percentage"
                },
                "description": {
                  "type": "string",
                  "description": "A description of this strategy parameter. Use this to indicate to the users what the parameter does.",
                  "example": "How many percent of users should see this feature?"
                },
                "required": {
                  "type": "boolean",
                  "description": "Whether this parameter must be configured when using the strategy. Defaults to `false`",
                  "example": false
                }
              }
            }
          }
        }
      },
      "updateTagTypeSchema": {
        "type": "object",
        "description": "The request body for updating a tag type.",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the tag type.",
            "example": "A tag type for describing the color of a tag."
          },
          "icon": {
            "type": "string",
            "description": "The icon of the tag type.",
            "example": "not-really-used"
          }
        }
      },
      "updateTagsSchema": {
        "type": "object",
        "description": "Represents a set of changes to a feature's tags, such as adding or removing tags.",
        "additionalProperties": false,
        "required": [
          "addedTags",
          "removedTags"
        ],
        "properties": {
          "addedTags": {
            "type": "array",
            "description": "Tags to add to the feature.",
            "items": {
              "$ref": "#/components/schemas/tagSchema"
            }
          },
          "removedTags": {
            "type": "array",
            "description": "Tags to remove from the feature.",
            "items": {
              "$ref": "#/components/schemas/tagSchema"
            }
          }
        },
        "example": {
          "addedTags": [
            {
              "value": "tag-to-add",
              "type": "simple"
            }
          ],
          "removedTags": [
            {
              "value": "tag-to-remove",
              "type": "simple"
            }
          ]
        }
      },
      "updateUserSchema": {
        "type": "object",
        "description": "All fields that can be directly changed for the user",
        "properties": {
          "email": {
            "description": "The user's email address. Must be provided if username is not provided.",
            "type": "string",
            "example": "user@example.com"
          },
          "name": {
            "description": "The user's name (not the user's username).",
            "type": "string",
            "example": "Sam Seawright"
          },
          "rootRole": {
            "description": "The role to assign to the user. Can be either the role's ID or its unique name.",
            "oneOf": [
              {
                "type": "integer",
                "example": 1,
                "minimum": 0
              },
              {
                "type": "string",
                "example": "Admin",
                "enum": [
                  "Admin",
                  "Editor",
                  "Viewer",
                  "Owner",
                  "Member"
                ]
              }
            ]
          }
        }
      },
      "upsertSegmentSchema": {
        "type": "object",
        "description": "Data used to create or update a segment",
        "required": [
          "name",
          "constraints"
        ],
        "properties": {
          "name": {
            "description": "The name of the segment",
            "example": "beta-users",
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "A description of what the segment is for",
            "example": "Users willing to help us test and build new features."
          },
          "project": {
            "type": "string",
            "nullable": true,
            "description": "The project the segment belongs to if any.",
            "example": "red-vista"
          },
          "constraints": {
            "type": "array",
            "description": "The list of constraints that make up this segment",
            "items": {
              "$ref": "#/components/schemas/constraintSchema"
            }
          }
        }
      },
      "userSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "An Unleash user",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "The user id",
            "type": "integer",
            "example": 123
          },
          "isAPI": {
            "description": "Deprecated in v5. Used internally to know which operations the user should be allowed to perform",
            "type": "boolean",
            "example": true,
            "deprecated": true
          },
          "name": {
            "description": "Name of the user",
            "type": "string",
            "example": "User",
            "nullable": true
          },
          "email": {
            "description": "Email of the user",
            "type": "string",
            "example": "user@example.com"
          },
          "username": {
            "description": "A unique username for the user",
            "type": "string",
            "example": "hunter",
            "nullable": true
          },
          "imageUrl": {
            "description": "URL used for the user profile image",
            "type": "string",
            "example": "https://example.com/242x200.png"
          },
          "inviteLink": {
            "description": "If the user is actively inviting other users, this is the link that can be shared with other users",
            "type": "string",
            "example": "http://localhost:4242/invite-link/some-secret"
          },
          "loginAttempts": {
            "description": "How many unsuccessful attempts at logging in has the user made",
            "type": "integer",
            "minimum": 0,
            "example": 3
          },
          "emailSent": {
            "description": "Is the welcome email sent to the user or not",
            "type": "boolean",
            "example": false
          },
          "rootRole": {
            "description": "Which [root role](https://docs.getunleash.io/reference/rbac#predefined-roles) this user is assigned",
            "type": "integer",
            "example": 1,
            "minimum": 0
          },
          "seenAt": {
            "description": "The last time this user logged in",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-06-30T11:42:00.345Z"
          },
          "createdAt": {
            "description": "The user was created at this time",
            "type": "string",
            "format": "date-time",
            "example": "2023-06-30T11:41:00.123Z"
          },
          "accountType": {
            "description": "A user is either an actual User or a Service Account",
            "type": "string",
            "example": "User"
          },
          "permissions": {
            "description": "Deprecated",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scimId": {
            "description": "The SCIM ID of the user, only present if managed by SCIM",
            "type": "string",
            "nullable": true,
            "example": "01HTMEXAMPLESCIMID7SWWGHN6"
          }
        }
      },
      "usersGroupsBaseSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "An overview of user groups and users.",
        "properties": {
          "groups": {
            "type": "array",
            "description": "A list of user groups and their configuration.",
            "items": {
              "$ref": "#/components/schemas/groupSchema"
            },
            "example": [
              {
                "id": 1,
                "name": "unleash-e2e-7095756699593281",
                "userCount": 1,
                "rootRole": null
              }
            ]
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userSchema"
            },
            "description": "A list of users.",
            "example": [
              {
                "id": 4,
                "name": "unleash-e2e-user2-7095756699593281",
                "email": "unleash-e2e-user2-7095756699593281@test.com",
                "accountType": "User"
              },
              {
                "id": 1,
                "username": "admin",
                "accountType": "User"
              }
            ]
          }
        }
      },
      "usersSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Users and root roles",
        "required": [
          "users"
        ],
        "properties": {
          "users": {
            "type": "array",
            "description": "A list of users in the Unleash instance.",
            "items": {
              "$ref": "#/components/schemas/userSchema"
            }
          },
          "rootRoles": {
            "type": "array",
            "description": "A list of [root roles](https://docs.getunleash.io/reference/rbac#predefined-roles) in the Unleash instance.",
            "items": {
              "$ref": "#/components/schemas/roleSchema"
            }
          }
        }
      },
      "usersSearchSchema": {
        "type": "array",
        "description": "A list of users",
        "items": {
          "$ref": "#/components/schemas/userSchema"
        }
      },
      "validateArchiveFeaturesSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Validation details for features archive operation",
        "required": [
          "parentsWithChildFeatures",
          "hasDeletedDependencies"
        ],
        "properties": {
          "parentsWithChildFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of parent features that would orphan child features that are not part of the archive operation",
            "example": [
              "my-feature-4",
              "my-feature-5",
              "my-feature-6"
            ]
          },
          "hasDeletedDependencies": {
            "type": "boolean",
            "description": "Whether any dependencies will be deleted as part of archive",
            "example": true
          }
        }
      },
      "validateFeatureSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "description": "Data used to validate a feature flag's name.",
        "properties": {
          "name": {
            "description": "The feature name to validate.",
            "type": "string",
            "example": "my-feature-3"
          },
          "projectId": {
            "description": "The id of the project that the feature flag will belong to. If the target project has a feature naming pattern defined, the name will be validated against that pattern.",
            "nullable": true,
            "type": "string",
            "example": "project-y"
          }
        }
      },
      "validatePasswordSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "password"
        ],
        "description": "Used to validate passwords obeying [Unleash password guidelines](https://docs.getunleash.io/reference/deploy/securing-unleash#password-requirements)",
        "properties": {
          "password": {
            "description": "The password to validate",
            "type": "string",
            "example": "hunter2"
          }
        }
      },
      "validateTagTypeSchema": {
        "type": "object",
        "required": [
          "valid",
          "tagType"
        ],
        "description": "The result of validating a tag type.",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Whether or not the tag type is valid.",
            "example": true
          },
          "tagType": {
            "$ref": "#/components/schemas/tagTypeSchema"
          }
        }
      },
      "validatedEdgeTokensSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "tokens"
        ],
        "description": "A object containing a list of valid Unleash tokens.",
        "properties": {
          "tokens": {
            "description": "The list of Unleash token objects. Each object contains the token itself and some additional metadata.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/edgeTokenSchema"
            }
          }
        }
      },
      "variantFlagSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "A representation of an evaluated Unleash feature variant.",
        "properties": {
          "name": {
            "description": "The name of the variant. Will always be disabled if `enabled` is false.",
            "example": "blue",
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the variant is enabled or not.",
            "example": true
          },
          "payload": {
            "type": "object",
            "description": "Additional data associated with this variant.",
            "additionalProperties": false,
            "properties": {
              "type": {
                "description": "The type of data contained.",
                "type": "string",
                "enum": [
                  "string",
                  "json",
                  "csv",
                  "number"
                ],
                "example": "json"
              },
              "value": {
                "description": "The actual associated data",
                "type": "string",
                "example": "{ \"starter\": \"squirtle\" }"
              }
            }
          },
          "feature_enabled": {
            "type": "boolean",
            "description": "Whether the feature is enabled or not.",
            "example": true
          },
          "featureEnabled": {
            "deprecated": true,
            "type": "boolean",
            "description": "Use `feature_enabled` instead.",
            "example": true
          }
        }
      },
      "variantSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "A variant allows for further separation of users into segments. See [our excellent documentation](https://docs.getunleash.io/reference/feature-toggle-variants#what-are-variants) for a more detailed description",
        "required": [
          "name",
          "weight"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The variants name. Is unique for this feature flag",
            "example": "blue_group"
          },
          "weight": {
            "type": "number",
            "description": "The weight is the likelihood of any one user getting this variant. It is a number between 0 and 1000. See the section on [variant weights](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight) for more information",
            "minimum": 0,
            "maximum": 1000
          },
          "weightType": {
            "description": "Set to fix if this variant must have exactly the weight allocated to it. If the type is variable, the weight will adjust so that the total weight of all variants adds up to 1000",
            "type": "string",
            "example": "variable",
            "enum": [
              "variable",
              "fix"
            ]
          },
          "stickiness": {
            "type": "string",
            "description": "[Stickiness](https://docs.getunleash.io/reference/feature-toggle-variants#variant-stickiness) is how Unleash guarantees that the same user gets the same variant every time",
            "example": "custom.context.field"
          },
          "payload": {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "description": "Extra data configured for this variant",
            "additionalProperties": false,
            "properties": {
              "type": {
                "description": "The type of the value. Commonly used types are string, number, json and csv.",
                "type": "string",
                "enum": [
                  "json",
                  "csv",
                  "string",
                  "number"
                ]
              },
              "value": {
                "description": "The actual value of payload",
                "type": "string"
              }
            },
            "example": {
              "type": "json",
              "value": "{\"color\": \"red\"}"
            }
          },
          "overrides": {
            "description": "Overrides assigning specific variants to specific users. The weighting system automatically assigns users to specific groups for you, but any overrides in this list will take precedence.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/overrideSchema"
            }
          }
        }
      },
      "variantsSchema": {
        "type": "array",
        "description": "A list of variants",
        "items": {
          "$ref": "#/components/schemas/variantSchema"
        }
      },
      "versionSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Detailed information about an Unleash version",
        "required": [
          "current",
          "latest",
          "isLatest"
        ],
        "properties": {
          "current": {
            "type": "object",
            "additionalProperties": false,
            "description": "The current version of Unleash.",
            "properties": {
              "oss": {
                "description": "The OSS version used when building this Unleash instance, represented as a git revision belonging to the [main Unleash git repo](https://github.com/Unleash/unleash/)",
                "example": "5.3.0-main",
                "type": "string"
              },
              "enterprise": {
                "description": "The Enterpris version of Unleash used to build this instance, represented as a git revision belonging to the [Unleash Enterprise](https://github.com/ivarconr/unleash-enterprise) repository. Will be an empty string if no enterprise version was used,",
                "example": "5.3.0-main+2105.45ed03c9",
                "type": "string"
              }
            }
          },
          "latest": {
            "type": "object",
            "additionalProperties": false,
            "description": "Information about the latest available Unleash releases. Will be an empty object if no data is available.",
            "properties": {
              "oss": {
                "description": "The latest available OSS version of Unleash",
                "type": "string",
                "example": "5.1.5"
              },
              "enterprise": {
                "description": "The latest available Enterprise version of Unleash",
                "type": "string",
                "example": "5.1.5"
              }
            }
          },
          "isLatest": {
            "type": "boolean",
            "description": "Whether the Unleash server is running the latest release (`true`) or if there are updates available (`false`)",
            "example": true
          },
          "instanceId": {
            "type": "string",
            "description": "The instance identifier of the Unleash instance",
            "example": "0d652a82-43db-4144-8e02-864b0b030710"
          }
        }
      },
      "adminPermissionSchema": {
        "type": "object",
        "required": [
          "id",
          "name",
          "displayName",
          "type"
        ],
        "additionalProperties": false,
        "description": "Describes a single permission",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The identifier for this permission",
            "example": 3
          },
          "name": {
            "type": "string",
            "description": "The name of this permission",
            "example": "UPDATE_FEATURE"
          },
          "displayName": {
            "type": "string",
            "description": "The name to display in listings of permissions",
            "example": "Update feature flags"
          },
          "type": {
            "type": "string",
            "description": "What level this permission applies to. Either root, project or the name of the environment it applies to",
            "example": "project"
          },
          "environment": {
            "description": "Which environment this permission applies to",
            "type": "string",
            "example": "development"
          }
        }
      },
      "adminPermissionsSchema": {
        "type": "object",
        "required": [
          "permissions",
          "version"
        ],
        "additionalProperties": false,
        "description": "What kind of permissions are available",
        "properties": {
          "permissions": {
            "type": "object",
            "required": [
              "project",
              "environments"
            ],
            "additionalProperties": false,
            "description": "Returns permissions available at all three levels (root|project|environment)",
            "properties": {
              "root": {
                "type": "array",
                "description": "Permissions available at the root level, i.e. not connected to any specific project or environment",
                "items": {
                  "$ref": "#/components/schemas/adminPermissionSchema"
                }
              },
              "project": {
                "type": "array",
                "description": "Permissions available at the project level",
                "items": {
                  "$ref": "#/components/schemas/adminPermissionSchema"
                }
              },
              "environments": {
                "type": "array",
                "description": "A list of environments with available permissions per environment",
                "items": {
                  "type": "object",
                  "required": [
                    "name",
                    "permissions"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the environment",
                      "example": "development"
                    },
                    "permissions": {
                      "type": "array",
                      "description": "Permissions available for this environment",
                      "items": {
                        "$ref": "#/components/schemas/adminPermissionSchema"
                      }
                    }
                  }
                }
              }
            }
          },
          "version": {
            "type": "integer",
            "minimum": 1,
            "enum": [
              1,
              2
            ],
            "description": "The api version of this response. A natural increasing number. Only increases if format changes",
            "example": 1
          }
        }
      },
      "changeProjectSchema": {
        "type": "object",
        "description": "Data required to move a feature flag to a project.",
        "required": [
          "newProjectId"
        ],
        "properties": {
          "newProjectId": {
            "type": "string",
            "description": "The project to move the feature flag to.",
            "example": "newProject"
          }
        }
      },
      "cloneEnvironmentSchema": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "description": "Data used to clone an environment.",
        "properties": {
          "name": {
            "type": "string",
            "example": "development",
            "description": "The name of the new cloned environment, this cannot be changed later"
          },
          "type": {
            "type": "string",
            "example": "development",
            "description": "Updates the type of environment (i.e. development or production)."
          },
          "projects": {
            "type": "array",
            "description": "A list of projects that should be included in the cloned environment.",
            "items": {
              "type": "string"
            }
          },
          "clonePermissions": {
            "type": "boolean",
            "description": "Copies the RBAC permissions from the source environment if true. Defaults to true"
          }
        }
      },
      "createEnvironmentSchema": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "description": "Data required to create a new [environment](https://docs.getunleash.io/reference/environments)",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the environment. Must be a URL-friendly string according to [RFC 3968, section 2.3](https://www.rfc-editor.org/rfc/rfc3986#section-2.3)",
            "pattern": "^[a-zA-Z0-9~_.-]+$"
          },
          "type": {
            "type": "string",
            "minLength": 1,
            "description": "The [type of environment](https://docs.getunleash.io/reference/environments#environment-types) you would like to create. Unleash officially recognizes the following values:\n- `development`\n- `test`\n- `preproduction`\n- `production`\n\nIf you pass a string that is not one of the recognized values, Unleash will accept it, but it will carry no special semantics."
          },
          "enabled": {
            "type": "boolean",
            "description": "Newly created environments are enabled by default. Set this property to `false` to create the environment in a disabled state."
          },
          "sortOrder": {
            "type": "integer",
            "description": "Defines where in the list of environments to place this environment. The list uses an ascending sort, so lower numbers are shown first. You can change this value later."
          }
        }
      },
      "createProjectSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "description": "Data used to create a new [project](https://docs.getunleash.io/reference/projects).",
        "properties": {
          "id": {
            "deprecated": true,
            "description": "The project's identifier. If this property is not present or is an empty string, Unleash will generate the project id automatically. This property is deprecated.",
            "type": "string",
            "pattern": "[A-Za-z0-9_~.-]*",
            "example": "pet-shop"
          },
          "name": {
            "description": "The project's name. The name must contain at least one non-whitespace character.",
            "type": "string",
            "pattern": "^(?!\\s*$).+",
            "example": "Pet shop"
          },
          "description": {
            "description": "The project's description.",
            "type": "string",
            "nullable": true,
            "example": "This project contains features related to the new pet shop."
          },
          "mode": {
            "type": "string",
            "enum": [
              "open",
              "protected",
              "private"
            ],
            "example": "open",
            "default": "open",
            "description": "A mode of the project affecting what actions are possible in this project"
          },
          "defaultStickiness": {
            "type": "string",
            "example": "userId",
            "default": "default",
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy"
          },
          "environments": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "production"
            },
            "description": "A list of environments that should be enabled for this project. When provided, the list must contain at least one environment. If this property is missing, Unleash will default to enabling all non-deprecated environments for the project.",
            "minItems": 1,
            "example": [
              "production",
              "development"
            ]
          },
          "changeRequestEnvironments": {
            "type": "array",
            "description": "A list of environments that should have change requests enabled. If the list includes environments not in the `environments` list, they will still have change requests enabled.",
            "items": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "example": "production",
                  "description": "The name of the environment to configure change requests for."
                },
                "requiredApprovals": {
                  "type": "integer",
                  "example": 3,
                  "default": 1,
                  "description": "The number of approvals required for a change request to be fully approved and ready to applied in this environment. If no value is provided, it will be set to the default number, which is 1. Values will be clamped to between 1 and 10 inclusive."
                }
              }
            }
          }
        }
      },
      "createRoleWithPermissionsSchema": {
        "type": "object",
        "description": "A write model for the custom role and permissions to allow Unleash to decide what actions a role holder is allowed to perform",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "The name of the custom role",
                "type": "string",
                "example": "external-contributors"
              },
              "description": {
                "description": "A more detailed description of the custom role and what use it's intended for",
                "type": "string",
                "example": "Users with external-contributors role have limited access to most features in Unleash"
              },
              "type": {
                "description": "[Custom root roles](https://docs.getunleash.io/reference/rbac#custom-root-roles) (type=root-custom) are root roles with a custom set of permissions. [Custom project roles](https://docs.getunleash.io/reference/rbac#custom-project-roles) (type=custom) contain a specific set of permissions for project resources.",
                "type": "string",
                "enum": [
                  "root-custom",
                  "custom"
                ],
                "example": "root-custom"
              },
              "permissions": {
                "type": "array",
                "description": "A list of permissions assigned to this role",
                "items": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "The name of the permission",
                      "type": "string",
                      "example": "CREATE_PROJECT"
                    },
                    "environment": {
                      "type": "string",
                      "example": "development",
                      "description": "The environments of the permission if the permission is environment specific"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "The name of the custom role",
                "type": "string",
                "example": "external-contributors"
              },
              "description": {
                "description": "A more detailed description of the custom role and what use it's intended for",
                "type": "string",
                "example": "Users with external-contributors role have limited access to most features in Unleash"
              },
              "type": {
                "description": "[Custom project roles](https://docs.getunleash.io/reference/rbac#custom-project-roles) contain a specific set of permissions for project resources.",
                "type": "string",
                "enum": [
                  "custom"
                ],
                "example": "custom"
              },
              "permissions": {
                "type": "array",
                "description": "A list of permissions assigned to this role",
                "items": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "description": "The id of the permission",
                      "type": "number",
                      "example": 2
                    },
                    "name": {
                      "description": "The name of the permission",
                      "type": "string",
                      "example": "CREATE_PROJECT"
                    },
                    "environment": {
                      "type": "string",
                      "example": "development",
                      "description": "The environments of the permission if the permission is environment specific"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "invoicesSchema": {
        "type": "array",
        "description": "A list of invoices",
        "items": {
          "type": "object",
          "description": "Data describing an invoice",
          "required": [
            "amountFormatted",
            "paid",
            "status",
            "invoiceURL",
            "invoicePDF"
          ],
          "additionalProperties": false,
          "properties": {
            "amountFormatted": {
              "type": "string",
              "description": "A formatted representation of the amount due.",
              "example": "€ 123.00"
            },
            "paid": {
              "type": "boolean",
              "description": "`true` if the invoice has been paid, `false` if it has not.",
              "example": true
            },
            "status": {
              "type": "string",
              "description": "The current status of the invoice",
              "example": "pending"
            },
            "dueDate": {
              "type": "string",
              "description": "When the invoice is due",
              "example": "2018-11-13"
            },
            "invoiceURL": {
              "type": "string",
              "format": "uri",
              "description": "A URL pointing to where the invoice can be found.",
              "example": "https://invoice.url"
            },
            "invoicePDF": {
              "type": "string",
              "format": "uri",
              "description": "A link to a PDF-version of the invoice.",
              "example": "https://invoice.url/pdf"
            }
          }
        }
      },
      "oidcSettingsSchema": {
        "type": "object",
        "description": "Settings for configuring OpenID Connect as a login provider for Unleash",
        "oneOf": [
          {
            "required": [
              "enabled",
              "clientId",
              "secret"
            ],
            "properties": {
              "enabled": {
                "description": "Whether to enable or disable OpenID Connect for this instance",
                "type": "boolean",
                "example": true,
                "enum": [
                  true
                ]
              },
              "discoverUrl": {
                "description": "The [.well-known OpenID discover URL](https://swagger.io/docs/specification/authentication/openid-connect-discovery/)",
                "example": "https://myoidchost.azure.com/.well-known/openid-configuration",
                "type": "string",
                "format": "uri"
              },
              "clientId": {
                "description": "The OIDC client ID of this application.",
                "example": "FB87266D-CDDB-4BCF-BB1F-8392FD0EDC1B",
                "type": "string"
              },
              "secret": {
                "description": "Shared secret from OpenID server. Used to authenticate login requests",
                "type": "string",
                "example": "qjcVfeFjEfoYAF3AEsX2IMUWYuUzAbXO"
              },
              "autoCreate": {
                "description": "Auto create users based on email addresses from login tokens",
                "type": "boolean"
              },
              "enableSingleSignOut": {
                "description": "Support Single sign out when user clicks logout in Unleash. If `true` user is signed out of all OpenID Connect sessions against the clientId they may have active",
                "type": "boolean"
              },
              "defaultRootRole": {
                "description": "[Default role](https://docs.getunleash.io/reference/rbac#standard-roles) granted to users auto-created from email. Only relevant if autoCreate is `true`",
                "type": "string",
                "enum": [
                  "Viewer",
                  "Editor",
                  "Admin"
                ]
              },
              "defaultRootRoleId": {
                "description": "Assign this root role to auto created users. Should be a role ID and takes precedence over `defaultRootRole`.",
                "type": "number",
                "example": 2
              },
              "emailDomains": {
                "description": "Comma separated list of email domains that are automatically approved for an account in the server. Only relevant if autoCreate is `true`",
                "type": "string",
                "example": "getunleash.io,getunleash.ai"
              },
              "acrValues": {
                "description": "Authentication Context Class Reference, used to request extra values in the acr claim returned from the server. If multiple values are required, they should be space separated. \n Consult [the OIDC reference](https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint) for more information \n",
                "type": "string",
                "example": "urn:okta:loa:2fa:any phr"
              },
              "idTokenSigningAlgorithm": {
                "description": "The signing algorithm used to sign our token. Refer to the [JWT signatures](https://jwt.io/introduction) documentation for more information.",
                "type": "string",
                "example": "RS256",
                "enum": [
                  "RS256",
                  "RS384",
                  "RS512"
                ]
              },
              "enableGroupSyncing": {
                "description": "Should we enable group syncing. Refer to the documentation [Group syncing](https://docs.getunleash.io/how-to/how-to-set-up-group-sso-sync)",
                "type": "boolean",
                "example": false
              },
              "groupJsonPath": {
                "description": "Specifies the path in the OIDC token response to read which groups the user belongs to from.",
                "type": "string",
                "example": "groups"
              },
              "addGroupsScope": {
                "description": "When enabled Unleash will also request the 'groups' scope as part of the login request.",
                "type": "boolean",
                "example": false
              }
            }
          },
          {
            "properties": {
              "enabled": {
                "description": "Whether to enable or disable OpenID Connect for this instance",
                "type": "boolean",
                "example": false,
                "enum": [
                  false
                ]
              },
              "discoverUrl": {
                "description": "The [.well-known OpenID discover URL](https://swagger.io/docs/specification/authentication/openid-connect-discovery/)",
                "example": "https://myoidchost.azure.com/.well-known/openid-configuration",
                "type": "string",
                "format": "uri"
              },
              "clientId": {
                "description": "The OIDC client ID of this application.",
                "example": "FB87266D-CDDB-4BCF-BB1F-8392FD0EDC1B",
                "type": "string"
              },
              "secret": {
                "description": "Shared secret from OpenID server. Used to authenticate login requests",
                "type": "string",
                "example": "qjcVfeFjEfoYAF3AEsX2IMUWYuUzAbXO"
              },
              "autoCreate": {
                "description": "Auto create users based on email addresses from login tokens",
                "type": "boolean"
              },
              "enableSingleSignOut": {
                "description": "Support Single sign out when user clicks logout in Unleash. If `true` user is signed out of all OpenID Connect sessions against the clientId they may have active",
                "type": "boolean"
              },
              "defaultRootRole": {
                "description": "[Default role](https://docs.getunleash.io/reference/rbac#standard-roles) granted to users auto-created from email. Only relevant if autoCreate is `true`",
                "type": "string",
                "enum": [
                  "Viewer",
                  "Editor",
                  "Admin"
                ]
              },
              "defaultRootRoleId": {
                "description": "Assign this root role to auto created users. Should be a role ID and takes precedence over `defaultRootRole`.",
                "type": "number",
                "example": 2
              },
              "emailDomains": {
                "description": "Comma separated list of email domains that are automatically approved for an account in the server. Only relevant if autoCreate is `true`",
                "type": "string",
                "example": "getunleash.io,getunleash.ai"
              },
              "acrValues": {
                "description": "Authentication Context Class Reference, used to request extra values in the acr claim returned from the server. If multiple values are required, they should be space separated. \n Consult [the OIDC reference](https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint) for more information \n",
                "type": "string",
                "example": "urn:okta:loa:2fa:any phr"
              },
              "idTokenSigningAlgorithm": {
                "description": "The signing algorithm used to sign our token. Refer to the [JWT signatures](https://jwt.io/introduction) documentation for more information.",
                "type": "string",
                "example": "RS256",
                "enum": [
                  "RS256",
                  "RS384",
                  "RS512"
                ]
              },
              "enableGroupSyncing": {
                "description": "Should we enable group syncing. Refer to the documentation [Group syncing](https://docs.getunleash.io/how-to/how-to-set-up-group-sso-sync)",
                "type": "boolean",
                "example": false
              },
              "groupJsonPath": {
                "description": "Specifies the path in the OIDC token response to read which groups the user belongs to from.",
                "type": "string",
                "example": "groups"
              },
              "addGroupsScope": {
                "description": "When enabled Unleash will also request the 'groups' scope as part of the login request.",
                "type": "boolean",
                "example": false
              }
            }
          }
        ]
      },
      "passwordAuthSchema": {
        "type": "object",
        "description": "Does the server allow username/password authentication",
        "properties": {
          "enabled": {
            "description": "Is username/password authentication enabled",
            "type": "boolean",
            "example": false
          }
        }
      },
      "projectUsersSchema": {
        "type": "object",
        "required": [
          "roles",
          "users"
        ],
        "description": "An overview of users and available roles within a project.",
        "deprecated": true,
        "additionalProperties": false,
        "properties": {
          "users": {
            "type": "array",
            "description": "A list of users with access to this project and their role within it.",
            "items": {
              "$ref": "#/components/schemas/userWithProjectRoleSchema"
            }
          },
          "roles": {
            "type": "array",
            "description": "A list of roles that are available for this project",
            "items": {
              "$ref": "#/components/schemas/roleSchema"
            }
          }
        }
      },
      "projectAccessConfigurationSchema": {
        "type": "object",
        "required": [
          "roles"
        ],
        "description": "An object describing roles for a project and what users and groups are part of that role.",
        "additionalProperties": false,
        "properties": {
          "roles": {
            "type": "array",
            "description": "A list of roles that are available within this project.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The id of the role.",
                  "example": 1,
                  "minimum": 1
                },
                "groups": {
                  "description": "A list of group ids that will be assigned this role",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "example": [
                    1,
                    2,
                    3
                  ]
                },
                "users": {
                  "type": "array",
                  "description": "A list of user ids that will be assigned this role",
                  "items": {
                    "type": "integer"
                  },
                  "example": [
                    1,
                    2,
                    3
                  ]
                }
              }
            }
          }
        }
      },
      "projectAccessSchema": {
        "type": "object",
        "required": [
          "roles",
          "users",
          "groups"
        ],
        "description": "An object describing access permissions for a given project.",
        "additionalProperties": false,
        "properties": {
          "groups": {
            "description": "A list of groups that have access to this project",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/groupWithProjectRoleSchema"
            }
          },
          "users": {
            "type": "array",
            "description": "A list of users and their roles within this project",
            "items": {
              "$ref": "#/components/schemas/userWithProjectRoleSchema"
            }
          },
          "roles": {
            "type": "array",
            "description": "A list of roles that are available within this project.",
            "items": {
              "$ref": "#/components/schemas/roleSchema"
            }
          }
        }
      },
      "projectAddAccessSchema": {
        "type": "object",
        "required": [
          "roles",
          "groups",
          "users"
        ],
        "description": "An object containing a collection of roles, a collection of groups and a collection of users.",
        "properties": {
          "roles": {
            "description": "A list of role IDs",
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0,
              "example": 5,
              "description": "A role ID"
            }
          },
          "groups": {
            "description": "A list of group IDs",
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0,
              "example": 5,
              "description": "A group ID"
            }
          },
          "users": {
            "description": "A list of user IDs",
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0,
              "example": 5,
              "description": "A user ID"
            }
          }
        }
      },
      "projectAddRoleAccessSchema": {
        "type": "object",
        "required": [
          "users",
          "groups"
        ],
        "description": "An object containing a collection of users and a collection of groups.",
        "properties": {
          "groups": {
            "description": "A list of groups IDs",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "minimum": 0,
                  "example": 5,
                  "description": "A group ID"
                }
              }
            }
          },
          "users": {
            "description": "A list of user IDs",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "minimum": 0,
                  "example": 5,
                  "description": "A user ID"
                }
              }
            }
          }
        }
      },
      "projectCreatedSchema": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "description": "Details about the newly created project.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "The project's identifier.",
            "type": "string",
            "pattern": "[A-Za-z0-9_~.-]+",
            "example": "pet-shop"
          },
          "name": {
            "description": "The project's name.",
            "type": "string",
            "minLength": 1,
            "example": "Pet shop"
          },
          "description": {
            "description": "The project's description.",
            "type": "string",
            "nullable": true,
            "example": "This project contains features related to the new pet shop."
          },
          "featureLimit": {
            "type": "integer",
            "nullable": true,
            "example": 100,
            "description": "A limit on the number of features allowed in the project. `null` if no limit."
          },
          "mode": {
            "type": "string",
            "enum": [
              "open",
              "protected",
              "private"
            ],
            "example": "open",
            "description": "A mode of the project affecting what actions are possible in this project"
          },
          "defaultStickiness": {
            "type": "string",
            "example": "userId",
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy"
          },
          "environments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The environments enabled for the project.",
            "example": [
              "production",
              "staging"
            ],
            "minItems": 1
          },
          "changeRequestEnvironments": {
            "type": "array",
            "description": "The list of environments that have change requests enabled.",
            "items": {
              "type": "object",
              "required": [
                "name",
                "requiredApprovals"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "example": "production",
                  "description": "The name of the environment this change request configuration applies to."
                },
                "requiredApprovals": {
                  "type": "integer",
                  "example": 3,
                  "minimum": 1,
                  "default": 1,
                  "description": "The number of approvals required for a change request to be fully approved and ready to applied in this environment. If no value is provided, it will be set to the default number, which is 1. The value must be greater than or equal to 1."
                }
              }
            }
          }
        }
      },
      "projectRoleSchema": {
        "type": "object",
        "description": "An overview of how many users and groups are mapped to the specified project with the specified role.",
        "required": [
          "project"
        ],
        "additionalProperties": false,
        "properties": {
          "project": {
            "type": "string",
            "example": "project-a",
            "description": "The id of the project user and group count are counted for."
          },
          "role": {
            "type": "integer",
            "example": 3,
            "description": "Id of the role the user and group count are counted for."
          },
          "userCount": {
            "type": "integer",
            "example": 1,
            "description": "Number of users mapped to this project.",
            "minimum": 0
          },
          "serviceAccountCount": {
            "type": "integer",
            "example": 1,
            "description": "Number of service accounts mapped to this project.",
            "minimum": 0
          },
          "groupCount": {
            "type": "integer",
            "example": 1,
            "description": "Number of groups mapped to this project.",
            "minimum": 0
          }
        }
      },
      "projectRoleUsageSchema": {
        "type": "object",
        "description": "A collection of projects with counts of users and groups mapped to them with specified roles.",
        "additionalProperties": false,
        "properties": {
          "projects": {
            "type": "array",
            "description": "A collection of projects with counts of users and groups mapped to them with specified roles.",
            "items": {
              "$ref": "#/components/schemas/projectRoleSchema"
            }
          }
        }
      },
      "roleWithPermissionsSchema": {
        "type": "object",
        "description": "A read model for the role and permissions to allow Unleash to decide what actions a role holder is allowed to perform",
        "required": [
          "id",
          "type",
          "name",
          "permissions"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "The role id",
            "type": "number",
            "example": 9
          },
          "type": {
            "description": "A role can either be a global `root` role, or a `project` role or a `custom` project role or a custom global `root-custom` role",
            "type": "string",
            "example": "root"
          },
          "name": {
            "description": "The name of the role",
            "type": "string",
            "example": "Editor"
          },
          "description": {
            "description": "A more detailed description of the role and what use it's intended for",
            "type": "string",
            "example": "Users with the editor role have access to most features in Unleash but can not manage users and roles in the global scope. Editors will be added as project owners when creating projects and get superuser rights within the context of these projects. Users with the editor role will also get access to most permissions on the default project by default."
          },
          "permissions": {
            "description": "A list of permissions assigned to this role",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/adminPermissionSchema"
            }
          }
        }
      },
      "roleWithVersionSchema": {
        "type": "object",
        "required": [
          "version",
          "roles"
        ],
        "description": "A single user role received after creation or update of a role",
        "additionalProperties": false,
        "properties": {
          "version": {
            "description": "The version of this schema",
            "type": "integer",
            "example": 1,
            "minimum": 1
          },
          "roles": {
            "$ref": "#/components/schemas/roleSchema",
            "description": "A single role"
          }
        }
      },
      "rolesWithVersionSchema": {
        "type": "object",
        "required": [
          "version",
          "roles"
        ],
        "description": "A collection of user roles",
        "additionalProperties": false,
        "properties": {
          "version": {
            "description": "The version of this schema",
            "type": "integer",
            "example": 1,
            "minimum": 1
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/roleSchema"
            },
            "description": "A list of roles"
          }
        }
      },
      "samlSettingsSchema": {
        "type": "object",
        "description": "Settings used to authenticate via SAML",
        "oneOf": [
          {
            "required": [
              "entityId",
              "signOnUrl",
              "certificate"
            ],
            "properties": {
              "enabled": {
                "description": "Whether to enable or disable SAML 2.0 for this instance",
                "type": "boolean",
                "example": true,
                "enum": [
                  true
                ]
              },
              "entityId": {
                "description": "The SAML 2.0 entity ID",
                "type": "string",
                "example": "http://localhost:8080/auth/realms/master"
              },
              "signOnUrl": {
                "description": "Which URL to use for Single Sign On",
                "type": "string",
                "example": "http://localhost:8080/auth/realms/master/protocol/saml"
              },
              "certificate": {
                "description": "The X509 certificate used to validate requests",
                "type": "string",
                "example": "MIIE/zCCBGgCAg4CMA0GCSqGSIb3DQEBBQUAMIGbMQswCQYDVQQGEwJKUDEOMAwG\nA1UECBMFVG9reW8xEDAOBgNVBAcTB0NodW8ta3UxETAPBgNVBAoTCEZyYW5rNERE\nMRgwFgYDVQQLEw9XZWJDZXJ0IFN1cHBvcnQxGDAWBgNVBAMTD0ZyYW5rNEREIFdl\nYiBDQTEjMCEGCSqGSIb3DQEJARYUc3VwcG9ydEBmcmFuazRkZC5jb20wHhcNMTIw\nODIyMDcyNzIyWhcNMTcwODIxMDcyNzIyWjBKMQswCQYDVQQGEwJKUDEOMAwGA1UE\nCAwFVG9reW8xETAPBgNVBAoMCEZyYW5rNEREMRgwFgYDVQQDDA93d3cuZXhhbXBs\nZS5jb20wggNHMIICOQYHKoZIzjgEATCCAiwCggEBAMbmu6uSdZWRxnO5PteARz5I\nnrdM7vJadzJcY9Spf0cAhUDWyINCrUDn8h8QjbMiAxd+E7v5N85TbfvrW+/g7lYa\ne7DB0uX02Rw29yoK+TE/znNTNq6HdPn/H4ll77uJqpkWgQwXgAQ3qDKRv96QaTfr\nfSXYRxG9NvKzUBs9S7Woby7K6Pgh7/EmgeiOHKSX49XD+ihvkFRSFdeL5qV5hzDf\nepfk8Ghl0cyK9jpM/yKlRuUUkP1pSMwUrCrptyRpqqXmam0UfFuFhMT2SJyNTyo2\nSfnyZb78lbYcVLJQLJA+O3l469eOH3Odv/Pq7bvOstBKg96Q7imz5t0honf63EMC\nIQCw7FeY0QQbxWYy+MI8/0m2kiRzIruA8RUPcEs4il1mwwKCAQB4W3QLepQRTWhR\n69Xv+fC5JLEDyngw9KEalKorlg6o4Z9hASMbFMwECjlXZCxKd/NFjUMbtPcrMCoa\n/KuaqRvHLs2bqe94X5VR4lWCv0SgOunKBj58jnVuN/OkkLu4cSZQ/jia/yPkdcMv\nw8ZjF7zjPXGVhh9XC0QU9ipVfrreGaBSN+0zODKY5TyQI84FsZFZNetOTIT0HT2S\nfIDRGYaL/0xMfQx070Z07cdTTuibzJHVr38qjKqEDiwAUyjXVdE+GJ15ZD4d56Ef\n0qgRpzDmuvUjOtv1t8Hr2O2HTABqRMtAKZsLEVPjwnpKpcStixfg0uIPGVIKbej4\nFzHHpO6bA4IBBgACggEBAJNRaaTFe253sOVm/JmUgsO1QB5GI5hOEWLpC8KHxgwn\nnf/GQUaJLrN8TT4hXgJM2CdvdAkY6et1HpT6BUoz1cYTgsE3ToIsbH3SzPJvU7jz\ncPOvY1jQv+xVBrU8Ydw2D8pydbAcw/L6JZnGpFBqeHa1iFAQc0B8ToXEgxnmGAdP\nIOAKAHX0S4m6CrP5fKwYbmzu8WuWO4bRqvX7QJofrs2RaGFESulw0VrMFffJ/guf\nHTvhDaMW7TSCKo1tBZK9SdEbWCQN2stnfnRSyZFQ+v02oyQtLg+3vSuCx4PS9DM9\n/Uh3r9JDDH3GveUMbqw8Dmy6WH9iV3oOJt8aVF8F4CMwDQYJKoZIhvcNAQEFBQAD\ngYEAbxDoJM8vKVfhltpfG3YXmBKnoGb2UpdKpcjmxMt1/yX8lWJaRBwUDeiDqjVC\nJGi9gXO2SDAtXl7GI1cXTs/l7QlmoTmnc6kDwqk3pl6jC72rQH3E/Fpg7hBkSWL9\n3V1dbLU5id63lVD8sUEULyfWFGk3L+Uka5oiSsxwZhdIb/Q=\n"
              },
              "signOutUrl": {
                "description": "Which URL to use for Single Sign Out",
                "type": "string",
                "example": "http://localhost:8080/auth/realms/master/protocol/saml"
              },
              "spCertificate": {
                "description": "Signing certificate for sign out requests",
                "type": "string",
                "example": "MIIE/zCCBGgCAg4CMA0GCSqGSIb3DQEBBQUAMIGbMQswCQYDVQQGEwJKUDEOMAwG\nA1UECBMFVG9reW8xEDAOBgNVBAcTB0NodW8ta3UxETAPBgNVBAoTCEZyYW5rNERE\nMRgwFgYDVQQLEw9XZWJDZXJ0IFN1cHBvcnQxGDAWBgNVBAMTD0ZyYW5rNEREIFdl\nYiBDQTEjMCEGCSqGSIb3DQEJARYUc3VwcG9ydEBmcmFuazRkZC5jb20wHhcNMTIw\nODIyMDcyNzIyWhcNMTcwODIxMDcyNzIyWjBKMQswCQYDVQQGEwJKUDEOMAwGA1UE\nCAwFVG9reW8xETAPBgNVBAoMCEZyYW5rNEREMRgwFgYDVQQDDA93d3cuZXhhbXBs\nZS5jb20wggNHMIICOQYHKoZIzjgEATCCAiwCggEBAMbmu6uSdZWRxnO5PteARz5I\nnrdM7vJadzJcY9Spf0cAhUDWyINCrUDn8h8QjbMiAxd+E7v5N85TbfvrW+/g7lYa\ne7DB0uX02Rw29yoK+TE/znNTNq6HdPn/H4ll77uJqpkWgQwXgAQ3qDKRv96QaTfr\nfSXYRxG9NvKzUBs9S7Woby7K6Pgh7/EmgeiOHKSX49XD+ihvkFRSFdeL5qV5hzDf\nepfk8Ghl0cyK9jpM/yKlRuUUkP1pSMwUrCrptyRpqqXmam0UfFuFhMT2SJyNTyo2\nSfnyZb78lbYcVLJQLJA+O3l469eOH3Odv/Pq7bvOstBKg96Q7imz5t0honf63EMC\nIQCw7FeY0QQbxWYy+MI8/0m2kiRzIruA8RUPcEs4il1mwwKCAQB4W3QLepQRTWhR\n69Xv+fC5JLEDyngw9KEalKorlg6o4Z9hASMbFMwECjlXZCxKd/NFjUMbtPcrMCoa\n/KuaqRvHLs2bqe94X5VR4lWCv0SgOunKBj58jnVuN/OkkLu4cSZQ/jia/yPkdcMv\nw8ZjF7zjPXGVhh9XC0QU9ipVfrreGaBSN+0zODKY5TyQI84FsZFZNetOTIT0HT2S\nfIDRGYaL/0xMfQx070Z07cdTTuibzJHVr38qjKqEDiwAUyjXVdE+GJ15ZD4d56Ef\n0qgRpzDmuvUjOtv1t8Hr2O2HTABqRMtAKZsLEVPjwnpKpcStixfg0uIPGVIKbej4\nFzHHpO6bA4IBBgACggEBAJNRaaTFe253sOVm/JmUgsO1QB5GI5hOEWLpC8KHxgwn\nnf/GQUaJLrN8TT4hXgJM2CdvdAkY6et1HpT6BUoz1cYTgsE3ToIsbH3SzPJvU7jz\ncPOvY1jQv+xVBrU8Ydw2D8pydbAcw/L6JZnGpFBqeHa1iFAQc0B8ToXEgxnmGAdP\nIOAKAHX0S4m6CrP5fKwYbmzu8WuWO4bRqvX7QJofrs2RaGFESulw0VrMFffJ/guf\nHTvhDaMW7TSCKo1tBZK9SdEbWCQN2stnfnRSyZFQ+v02oyQtLg+3vSuCx4PS9DM9\n/Uh3r9JDDH3GveUMbqw8Dmy6WH9iV3oOJt8aVF8F4CMwDQYJKoZIhvcNAQEFBQAD\ngYEAbxDoJM8vKVfhltpfG3YXmBKnoGb2UpdKpcjmxMt1/yX8lWJaRBwUDeiDqjVC\nJGi9gXO2SDAtXl7GI1cXTs/l7QlmoTmnc6kDwqk3pl6jC72rQH3E/Fpg7hBkSWL9\n3V1dbLU5id63lVD8sUEULyfWFGk3L+Uka5oiSsxwZhdIb/Q=\n"
              },
              "autoCreate": {
                "description": "Should Unleash create users based on the emails coming back in the authentication reply from the SAML server",
                "type": "boolean",
                "example": true
              },
              "emailDomains": {
                "description": "A comma separated list of email domains that Unleash will auto create user accounts for.",
                "type": "string",
                "example": "getunleash.io,unleash-hosted.com"
              },
              "defaultRootRole": {
                "description": "Assign this root role to auto created users",
                "type": "string",
                "enum": [
                  "Viewer",
                  "Editor",
                  "Admin"
                ],
                "example": "Editor"
              },
              "defaultRootRoleId": {
                "description": "Assign this root role to auto created users. Should be a role ID and takes precedence over `defaultRootRole`.",
                "type": "number",
                "example": 2
              },
              "enableGroupSyncing": {
                "description": "Should we enable group syncing. Refer to the documentation [Group syncing](https://docs.getunleash.io/how-to/how-to-set-up-group-sso-sync)",
                "type": "boolean",
                "example": false
              },
              "groupJsonPath": {
                "description": "Specifies the path in the SAML token response from which to read the groups the user belongs to.",
                "type": "string",
                "example": "groups"
              }
            }
          },
          {
            "properties": {
              "enabled": {
                "description": "Whether to enable or disable SAML 2.0 for this instance",
                "type": "boolean",
                "example": false,
                "enum": [
                  false
                ]
              },
              "entityId": {
                "description": "The SAML 2.0 entity ID",
                "type": "string",
                "example": "http://localhost:8080/auth/realms/master"
              },
              "signOnUrl": {
                "description": "Which URL to use for Single Sign On",
                "type": "string",
                "example": "http://localhost:8080/auth/realms/master/protocol/saml"
              },
              "certificate": {
                "description": "The X509 certificate used to validate requests",
                "type": "string",
                "example": "MIIE/zCCBGgCAg4CMA0GCSqGSIb3DQEBBQUAMIGbMQswCQYDVQQGEwJKUDEOMAwG\nA1UECBMFVG9reW8xEDAOBgNVBAcTB0NodW8ta3UxETAPBgNVBAoTCEZyYW5rNERE\nMRgwFgYDVQQLEw9XZWJDZXJ0IFN1cHBvcnQxGDAWBgNVBAMTD0ZyYW5rNEREIFdl\nYiBDQTEjMCEGCSqGSIb3DQEJARYUc3VwcG9ydEBmcmFuazRkZC5jb20wHhcNMTIw\nODIyMDcyNzIyWhcNMTcwODIxMDcyNzIyWjBKMQswCQYDVQQGEwJKUDEOMAwGA1UE\nCAwFVG9reW8xETAPBgNVBAoMCEZyYW5rNEREMRgwFgYDVQQDDA93d3cuZXhhbXBs\nZS5jb20wggNHMIICOQYHKoZIzjgEATCCAiwCggEBAMbmu6uSdZWRxnO5PteARz5I\nnrdM7vJadzJcY9Spf0cAhUDWyINCrUDn8h8QjbMiAxd+E7v5N85TbfvrW+/g7lYa\ne7DB0uX02Rw29yoK+TE/znNTNq6HdPn/H4ll77uJqpkWgQwXgAQ3qDKRv96QaTfr\nfSXYRxG9NvKzUBs9S7Woby7K6Pgh7/EmgeiOHKSX49XD+ihvkFRSFdeL5qV5hzDf\nepfk8Ghl0cyK9jpM/yKlRuUUkP1pSMwUrCrptyRpqqXmam0UfFuFhMT2SJyNTyo2\nSfnyZb78lbYcVLJQLJA+O3l469eOH3Odv/Pq7bvOstBKg96Q7imz5t0honf63EMC\nIQCw7FeY0QQbxWYy+MI8/0m2kiRzIruA8RUPcEs4il1mwwKCAQB4W3QLepQRTWhR\n69Xv+fC5JLEDyngw9KEalKorlg6o4Z9hASMbFMwECjlXZCxKd/NFjUMbtPcrMCoa\n/KuaqRvHLs2bqe94X5VR4lWCv0SgOunKBj58jnVuN/OkkLu4cSZQ/jia/yPkdcMv\nw8ZjF7zjPXGVhh9XC0QU9ipVfrreGaBSN+0zODKY5TyQI84FsZFZNetOTIT0HT2S\nfIDRGYaL/0xMfQx070Z07cdTTuibzJHVr38qjKqEDiwAUyjXVdE+GJ15ZD4d56Ef\n0qgRpzDmuvUjOtv1t8Hr2O2HTABqRMtAKZsLEVPjwnpKpcStixfg0uIPGVIKbej4\nFzHHpO6bA4IBBgACggEBAJNRaaTFe253sOVm/JmUgsO1QB5GI5hOEWLpC8KHxgwn\nnf/GQUaJLrN8TT4hXgJM2CdvdAkY6et1HpT6BUoz1cYTgsE3ToIsbH3SzPJvU7jz\ncPOvY1jQv+xVBrU8Ydw2D8pydbAcw/L6JZnGpFBqeHa1iFAQc0B8ToXEgxnmGAdP\nIOAKAHX0S4m6CrP5fKwYbmzu8WuWO4bRqvX7QJofrs2RaGFESulw0VrMFffJ/guf\nHTvhDaMW7TSCKo1tBZK9SdEbWCQN2stnfnRSyZFQ+v02oyQtLg+3vSuCx4PS9DM9\n/Uh3r9JDDH3GveUMbqw8Dmy6WH9iV3oOJt8aVF8F4CMwDQYJKoZIhvcNAQEFBQAD\ngYEAbxDoJM8vKVfhltpfG3YXmBKnoGb2UpdKpcjmxMt1/yX8lWJaRBwUDeiDqjVC\nJGi9gXO2SDAtXl7GI1cXTs/l7QlmoTmnc6kDwqk3pl6jC72rQH3E/Fpg7hBkSWL9\n3V1dbLU5id63lVD8sUEULyfWFGk3L+Uka5oiSsxwZhdIb/Q=\n"
              },
              "signOutUrl": {
                "description": "Which URL to use for Single Sign Out",
                "type": "string",
                "example": "http://localhost:8080/auth/realms/master/protocol/saml"
              },
              "spCertificate": {
                "description": "Signing certificate for sign out requests",
                "type": "string",
                "example": "MIIE/zCCBGgCAg4CMA0GCSqGSIb3DQEBBQUAMIGbMQswCQYDVQQGEwJKUDEOMAwG\nA1UECBMFVG9reW8xEDAOBgNVBAcTB0NodW8ta3UxETAPBgNVBAoTCEZyYW5rNERE\nMRgwFgYDVQQLEw9XZWJDZXJ0IFN1cHBvcnQxGDAWBgNVBAMTD0ZyYW5rNEREIFdl\nYiBDQTEjMCEGCSqGSIb3DQEJARYUc3VwcG9ydEBmcmFuazRkZC5jb20wHhcNMTIw\nODIyMDcyNzIyWhcNMTcwODIxMDcyNzIyWjBKMQswCQYDVQQGEwJKUDEOMAwGA1UE\nCAwFVG9reW8xETAPBgNVBAoMCEZyYW5rNEREMRgwFgYDVQQDDA93d3cuZXhhbXBs\nZS5jb20wggNHMIICOQYHKoZIzjgEATCCAiwCggEBAMbmu6uSdZWRxnO5PteARz5I\nnrdM7vJadzJcY9Spf0cAhUDWyINCrUDn8h8QjbMiAxd+E7v5N85TbfvrW+/g7lYa\ne7DB0uX02Rw29yoK+TE/znNTNq6HdPn/H4ll77uJqpkWgQwXgAQ3qDKRv96QaTfr\nfSXYRxG9NvKzUBs9S7Woby7K6Pgh7/EmgeiOHKSX49XD+ihvkFRSFdeL5qV5hzDf\nepfk8Ghl0cyK9jpM/yKlRuUUkP1pSMwUrCrptyRpqqXmam0UfFuFhMT2SJyNTyo2\nSfnyZb78lbYcVLJQLJA+O3l469eOH3Odv/Pq7bvOstBKg96Q7imz5t0honf63EMC\nIQCw7FeY0QQbxWYy+MI8/0m2kiRzIruA8RUPcEs4il1mwwKCAQB4W3QLepQRTWhR\n69Xv+fC5JLEDyngw9KEalKorlg6o4Z9hASMbFMwECjlXZCxKd/NFjUMbtPcrMCoa\n/KuaqRvHLs2bqe94X5VR4lWCv0SgOunKBj58jnVuN/OkkLu4cSZQ/jia/yPkdcMv\nw8ZjF7zjPXGVhh9XC0QU9ipVfrreGaBSN+0zODKY5TyQI84FsZFZNetOTIT0HT2S\nfIDRGYaL/0xMfQx070Z07cdTTuibzJHVr38qjKqEDiwAUyjXVdE+GJ15ZD4d56Ef\n0qgRpzDmuvUjOtv1t8Hr2O2HTABqRMtAKZsLEVPjwnpKpcStixfg0uIPGVIKbej4\nFzHHpO6bA4IBBgACggEBAJNRaaTFe253sOVm/JmUgsO1QB5GI5hOEWLpC8KHxgwn\nnf/GQUaJLrN8TT4hXgJM2CdvdAkY6et1HpT6BUoz1cYTgsE3ToIsbH3SzPJvU7jz\ncPOvY1jQv+xVBrU8Ydw2D8pydbAcw/L6JZnGpFBqeHa1iFAQc0B8ToXEgxnmGAdP\nIOAKAHX0S4m6CrP5fKwYbmzu8WuWO4bRqvX7QJofrs2RaGFESulw0VrMFffJ/guf\nHTvhDaMW7TSCKo1tBZK9SdEbWCQN2stnfnRSyZFQ+v02oyQtLg+3vSuCx4PS9DM9\n/Uh3r9JDDH3GveUMbqw8Dmy6WH9iV3oOJt8aVF8F4CMwDQYJKoZIhvcNAQEFBQAD\ngYEAbxDoJM8vKVfhltpfG3YXmBKnoGb2UpdKpcjmxMt1/yX8lWJaRBwUDeiDqjVC\nJGi9gXO2SDAtXl7GI1cXTs/l7QlmoTmnc6kDwqk3pl6jC72rQH3E/Fpg7hBkSWL9\n3V1dbLU5id63lVD8sUEULyfWFGk3L+Uka5oiSsxwZhdIb/Q=\n"
              },
              "autoCreate": {
                "description": "Should Unleash create users based on the emails coming back in the authentication reply from the SAML server",
                "type": "boolean",
                "example": true
              },
              "emailDomains": {
                "description": "A comma separated list of email domains that Unleash will auto create user accounts for.",
                "type": "string",
                "example": "getunleash.io,unleash-hosted.com"
              },
              "defaultRootRole": {
                "description": "Assign this root role to auto created users",
                "type": "string",
                "enum": [
                  "Viewer",
                  "Editor",
                  "Admin"
                ],
                "example": "Editor"
              },
              "defaultRootRoleId": {
                "description": "Assign this root role to auto created users. Should be a role ID and takes precedence over `defaultRootRole`.",
                "type": "number",
                "example": 2
              },
              "enableGroupSyncing": {
                "description": "Should we enable group syncing. Refer to the documentation [Group syncing](https://docs.getunleash.io/how-to/how-to-set-up-group-sso-sync)",
                "type": "boolean",
                "example": false
              },
              "groupJsonPath": {
                "description": "Specifies the path in the SAML token response from which to read the groups the user belongs to.",
                "type": "string",
                "example": "groups"
              }
            }
          }
        ]
      },
      "changeRequestCreateSchema": {
        "type": "object",
        "description": "Data used to create a [change request](https://docs.getunleash.io/reference/change-requests) for a single feature or segment change.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "payload",
              "action"
            ],
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "updateSegment"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "id"
                ],
                "$ref": "#/components/schemas/upsertSegmentSchema",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The ID of the segment to update.",
                    "example": 1
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "payload",
              "action"
            ],
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "deleteSegment"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "id"
                ],
                "type": "object",
                "description": "Required data to delete a segment.",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The ID of the segment to delete.",
                    "example": 1
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "Update the enabled state for a feature.",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "updateEnabled"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "enabled"
                ],
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "The new state of the feature."
                  },
                  "shouldActivateDisabledStrategies": {
                    "type": "boolean",
                    "example": true,
                    "description": "Only relevant when ALL the strategies are disabled. If `true`, all the disabled strategies will be enabled. If `false`, the default strategy will be added"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Add a strategy to the feature",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "addStrategy"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "constraints",
                  "parameters",
                  "name"
                ],
                "$ref": "#/components/schemas/createFeatureStrategySchema",
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Update a strategy belonging to this feature.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "updateStrategy"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "id"
                ],
                "$ref": "#/components/schemas/updateFeatureStrategySchema",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "0103487d-8788-4cda-af59-0a68642dbc5a",
                    "description": "The ID of the strategy to update."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Delete a strategy from this feature.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "deleteStrategy"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "id"
                ],
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "0103487d-8788-4cda-af59-0a68642dbc5a",
                    "description": "The ID of the strategy to update."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "action"
            ],
            "description": "Archive a feature.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "archiveFeature"
                ],
                "description": "The name of this action."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Update variants for this feature.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "patchVariant"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "type": "object",
                "required": [
                  "variants"
                ],
                "properties": {
                  "variants": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/variantSchema"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Reorder strategies for this feature",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "reorderStrategy"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "$ref": "#/components/schemas/setStrategySortOrderSchema"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Add a parent feature dependency.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "addDependency"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "$ref": "#/components/schemas/createDependentFeatureSchema",
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "action"
            ],
            "description": "Remove a parent feature dependency or all dependencies if no payload.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "deleteDependency"
                ],
                "description": "The name of this action."
              }
            }
          }
        ]
      },
      "changeRequestOneOrManyCreateSchema": {
        "description": "Either a single change or a list of changes to create a change request from.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "payload",
              "action"
            ],
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "updateSegment"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "id"
                ],
                "$ref": "#/components/schemas/upsertSegmentSchema",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The ID of the segment to update.",
                    "example": 1
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "payload",
              "action"
            ],
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "deleteSegment"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "id"
                ],
                "type": "object",
                "description": "Required data to delete a segment.",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The ID of the segment to delete.",
                    "example": 1
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "Update the enabled state for a feature.",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "updateEnabled"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "enabled"
                ],
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "The new state of the feature."
                  },
                  "shouldActivateDisabledStrategies": {
                    "type": "boolean",
                    "example": true,
                    "description": "Only relevant when ALL the strategies are disabled. If `true`, all the disabled strategies will be enabled. If `false`, the default strategy will be added"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Add a strategy to the feature",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "addStrategy"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "constraints",
                  "parameters",
                  "name"
                ],
                "$ref": "#/components/schemas/createFeatureStrategySchema",
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Update a strategy belonging to this feature.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "updateStrategy"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "id"
                ],
                "$ref": "#/components/schemas/updateFeatureStrategySchema",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "0103487d-8788-4cda-af59-0a68642dbc5a",
                    "description": "The ID of the strategy to update."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Delete a strategy from this feature.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "deleteStrategy"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "id"
                ],
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "0103487d-8788-4cda-af59-0a68642dbc5a",
                    "description": "The ID of the strategy to update."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "action"
            ],
            "description": "Archive a feature.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "archiveFeature"
                ],
                "description": "The name of this action."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Update variants for this feature.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "patchVariant"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "type": "object",
                "required": [
                  "variants"
                ],
                "properties": {
                  "variants": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/variantSchema"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Reorder strategies for this feature",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "reorderStrategy"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "$ref": "#/components/schemas/setStrategySortOrderSchema"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Add a parent feature dependency.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "addDependency"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "$ref": "#/components/schemas/createDependentFeatureSchema",
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "action"
            ],
            "description": "Remove a parent feature dependency or all dependencies if no payload.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "deleteDependency"
                ],
                "description": "The name of this action."
              }
            }
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/changeRequestCreateSchema"
            }
          }
        ]
      },
      "changeRequestFeatureSchema": {
        "additionalProperties": false,
        "description": "A feature and all its suggested changes.",
        "type": "object",
        "required": [
          "name",
          "changes"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "my-feature",
            "description": "The name of the feature"
          },
          "conflict": {
            "type": "string",
            "example": "Feature has been archived",
            "description": "A string describing the conflicts related to this change. Only present if there are any concflicts on the feature level."
          },
          "changes": {
            "type": "array",
            "description": "List of changes inside change request. This list may be empty when listing all change requests for a project.",
            "items": {
              "$ref": "#/components/schemas/changeRequestChangeSchema"
            }
          },
          "defaultChange": {
            "$ref": "#/components/schemas/changeRequestDefaultChangeSchema"
          }
        }
      },
      "changeRequestCreateFeatureSchema": {
        "type": "object",
        "description": "Data used to create a [change request](https://docs.getunleash.io/reference/change-requests) for a single feature change.",
        "oneOf": [
          {
            "type": "object",
            "description": "Update the enabled state for a feature.",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "updateEnabled"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "enabled"
                ],
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "The new state of the feature."
                  },
                  "shouldActivateDisabledStrategies": {
                    "type": "boolean",
                    "example": true,
                    "description": "Only relevant when ALL the strategies are disabled. If `true`, all the disabled strategies will be enabled. If `false`, the default strategy will be added"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Add a strategy to the feature",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "addStrategy"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "constraints",
                  "parameters",
                  "name"
                ],
                "$ref": "#/components/schemas/createFeatureStrategySchema",
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Update a strategy belonging to this feature.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "updateStrategy"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "id"
                ],
                "$ref": "#/components/schemas/updateFeatureStrategySchema",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "0103487d-8788-4cda-af59-0a68642dbc5a",
                    "description": "The ID of the strategy to update."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Delete a strategy from this feature.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "deleteStrategy"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "id"
                ],
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "0103487d-8788-4cda-af59-0a68642dbc5a",
                    "description": "The ID of the strategy to update."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "action"
            ],
            "description": "Archive a feature.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "archiveFeature"
                ],
                "description": "The name of this action."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Update variants for this feature.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "patchVariant"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "type": "object",
                "required": [
                  "variants"
                ],
                "properties": {
                  "variants": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/variantSchema"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Reorder strategies for this feature",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "reorderStrategy"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "$ref": "#/components/schemas/setStrategySortOrderSchema"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "payload",
              "action"
            ],
            "description": "Add a parent feature dependency.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "addDependency"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "$ref": "#/components/schemas/createDependentFeatureSchema",
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "feature",
              "action"
            ],
            "description": "Remove a parent feature dependency or all dependencies if no payload.",
            "properties": {
              "feature": {
                "type": "string",
                "example": "my-best-feature",
                "description": "The name of the feature that this change applies to."
              },
              "action": {
                "type": "string",
                "enum": [
                  "deleteDependency"
                ],
                "description": "The name of this action."
              }
            }
          }
        ]
      },
      "changeRequestCreateSegmentSchema": {
        "type": "object",
        "description": "Data used to create a [change request](https://docs.getunleash.io/reference/change-requests) for a single segment change.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "payload",
              "action"
            ],
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "updateSegment"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "id"
                ],
                "$ref": "#/components/schemas/upsertSegmentSchema",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The ID of the segment to update.",
                    "example": 1
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "payload",
              "action"
            ],
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "deleteSegment"
                ],
                "description": "The name of this action."
              },
              "payload": {
                "required": [
                  "id"
                ],
                "type": "object",
                "description": "Required data to delete a segment.",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The ID of the segment to delete.",
                    "example": 1
                  }
                }
              }
            }
          }
        ]
      },
      "changeRequestApprovalSchema": {
        "additionalProperties": false,
        "type": "object",
        "description": "Information about a [change request](https://docs.getunleash.io/reference/change-requests) approval.",
        "required": [
          "createdBy",
          "createdAt"
        ],
        "properties": {
          "createdBy": {
            "type": "object",
            "description": "Information about the user who gave this approval.",
            "properties": {
              "id": {
                "type": "number",
                "example": 33,
                "description": "The ID of the user who gave this approval."
              },
              "username": {
                "type": "string",
                "example": "unleash-user",
                "description": "The approving user's username."
              },
              "imageUrl": {
                "type": "string",
                "format": "uri",
                "description": "The URL where the user's image can be found."
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2022-12-12T12:13:24.218Z",
            "description": "When the approval was given."
          }
        }
      },
      "changeRequestConfigSchema": {
        "type": "array",
        "description": "A list of environment-specific [change request](https://docs.getunleash.io/reference/change-requests) configurations.",
        "items": {
          "$ref": "#/components/schemas/changeRequestEnvironmentConfigSchema"
        }
      },
      "changeRequestEnvironmentConfigSchema": {
        "additionalProperties": false,
        "description": "The [change request](https://docs.getunleash.io/reference/change-requests) configuration for a specific environment.",
        "type": "object",
        "required": [
          "environment",
          "type",
          "changeRequestEnabled",
          "requiredApprovals"
        ],
        "properties": {
          "environment": {
            "type": "string",
            "example": "my-dev-environment",
            "description": "The environment that this configuration applies to."
          },
          "type": {
            "type": "string",
            "example": "development",
            "description": "The [type of the environment](https://docs.getunleash.io/reference/environments#environment-types) listed in `environment`."
          },
          "changeRequestEnabled": {
            "type": "boolean",
            "description": "`true` if this environment has change requests enabled, otherwise `false`.",
            "example": true
          },
          "requiredApprovals": {
            "type": "number",
            "nullable": true,
            "example": 2,
            "description": "The number of approvals that are required for a change request to be fully approved and ready to be applied in this environment."
          }
        }
      },
      "changeRequestAddCommentSchema": {
        "additionalProperties": false,
        "type": "object",
        "description": "Data used to add a comment to a [change request](https://docs.getunleash.io/reference/change-requests).",
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "example": "This is a comment",
            "description": "The content of the comment."
          }
        }
      },
      "changeRequestCommentSchema": {
        "additionalProperties": false,
        "type": "object",
        "description": "A comment belonging to a [change request](https://docs.getunleash.io/reference/change-requests).",
        "required": [
          "text",
          "createdBy",
          "createdAt"
        ],
        "properties": {
          "id": {
            "type": "number",
            "example": 33,
            "description": "The comment's ID. Unique per change request."
          },
          "text": {
            "type": "string",
            "example": "This is a comment",
            "description": "The content of the comment."
          },
          "createdBy": {
            "type": "object",
            "description": "Information about the user who posted the comment",
            "properties": {
              "username": {
                "type": "string",
                "nullable": true,
                "example": "unleash-user",
                "description": "The user's username."
              },
              "imageUrl": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "description": "The URL where the user's image can be found."
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2022-12-12T12:13:24.218Z",
            "description": "When the comment was made."
          }
        }
      },
      "updateChangeRequestEnvironmentConfigSchema": {
        "type": "object",
        "description": "Data used to update change request in an environment",
        "required": [
          "changeRequestsEnabled"
        ],
        "properties": {
          "changeRequestsEnabled": {
            "type": "boolean",
            "description": "`true` if change requests should be enabled, otherwise `false`."
          },
          "requiredApprovals": {
            "type": "integer",
            "description": "The number of approvals required before a change request can be applied in this environment.",
            "minimum": 0,
            "example": 3
          }
        }
      },
      "changeRequestChangeSchema": {
        "type": "object",
        "description": "A change request change, containing info about the type of change and the specific changes.",
        "required": [
          "id",
          "action",
          "payload"
        ],
        "properties": {
          "id": {
            "type": "number",
            "example": 33,
            "description": "The ID of this change."
          },
          "action": {
            "type": "string",
            "example": "updateStrategy",
            "description": "The kind of action that the change contains information about."
          },
          "conflict": {
            "type": "string",
            "example": "Strategy has been deleted",
            "description": "A description of the conflict caused by this change. Only present if there are any conflicts."
          },
          "payload": {
            "description": "The data required to perform this action.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              },
              {
                "type": "object"
              },
              {
                "type": "number"
              },
              {
                "$ref": "#/components/schemas/setStrategySortOrderSchema"
              }
            ]
          },
          "createdBy": {
            "type": "object",
            "description": "The user who created this change.",
            "properties": {
              "username": {
                "type": "string",
                "nullable": true,
                "description": "The user's username."
              },
              "imageUrl": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "description": "The URL where the user's image can be found."
              }
            }
          },
          "createdAt": {
            "description": "When this change was suggested",
            "type": "string",
            "format": "date-time",
            "example": "2023-07-31T13:22:03+02:00"
          }
        }
      },
      "changeRequestSegmentChangeSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "A change request segment change, containing info about the type of segment change and the specific changes.",
        "required": [
          "id",
          "action",
          "payload",
          "name"
        ],
        "properties": {
          "id": {
            "type": "number",
            "example": 33,
            "description": "The ID of this change."
          },
          "action": {
            "type": "string",
            "example": "updateStrategy",
            "description": "The kind of action that the change contains information about."
          },
          "conflict": {
            "type": "string",
            "example": "Strategy has been deleted",
            "description": "A description of the conflict caused by this change. Only present if there are any conflicts."
          },
          "payload": {
            "description": "The data required to perform this action.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              },
              {
                "type": "object"
              },
              {
                "type": "number"
              },
              {
                "$ref": "#/components/schemas/setStrategySortOrderSchema"
              }
            ]
          },
          "createdBy": {
            "type": "object",
            "description": "The user who created this change.",
            "properties": {
              "username": {
                "type": "string",
                "nullable": true,
                "description": "The user's username."
              },
              "imageUrl": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "description": "The URL where the user's image can be found."
              }
            }
          },
          "createdAt": {
            "description": "When this change was suggested",
            "type": "string",
            "format": "date-time",
            "example": "2023-07-31T13:22:03+02:00"
          },
          "name": {
            "type": "string",
            "example": "beta-users",
            "description": "The current name of the segment"
          }
        }
      },
      "changeRequestDefaultChangeSchema": {
        "type": "object",
        "description": "A description of a default change that will be applied with the change request to prevent invalid states.\n\nDefault changes are changes that are applied in addition to explicit user-specified changes when a change request is applied. Any default changes are applied in the background and are not a real part of the change request.",
        "additionalProperties": false,
        "required": [
          "action",
          "payload"
        ],
        "properties": {
          "action": {
            "type": "string",
            "example": "addStrategy",
            "description": "The kind of action this is."
          },
          "payload": {
            "type": "object",
            "description": "The necessary data to perform this change.",
            "x-enforcer-exception-skip-codes": "WSCH006",
            "example": {
              "name": "flexibleRollout",
              "title": "",
              "disabled": false,
              "segments": [],
              "parameters": {
                "groupId": "my-feature",
                "rollout": "100",
                "stickiness": "default"
              },
              "constraints": [
                {
                  "values": [
                    "ux"
                  ],
                  "inverted": false,
                  "operator": "STR_CONTAINS",
                  "contextName": "userId",
                  "caseInsensitive": false
                }
              ]
            }
          }
        }
      },
      "changeRequestSchema": {
        "type": "object",
        "description": "A [change request](https://docs.getunleash.io/reference/change-requests)",
        "oneOf": [
          {
            "required": [
              "id",
              "environment",
              "state",
              "minApprovals",
              "project",
              "features",
              "segments",
              "createdAt",
              "createdBy"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "number",
                "example": 3,
                "description": "This change requests's ID."
              },
              "title": {
                "type": "string",
                "example": "Increasing gradual rollout",
                "description": "A title describing the change request's content."
              },
              "environment": {
                "type": "string",
                "example": "development",
                "description": "The environment in which the changes should be applied."
              },
              "minApprovals": {
                "type": "number",
                "example": 2,
                "description": "The minimum number of approvals required before this change request can be applied."
              },
              "project": {
                "type": "string",
                "example": "unleash-project",
                "description": "The project this change request belongs to."
              },
              "features": {
                "type": "array",
                "description": "The list of features and their changes that relate to this change request.",
                "items": {
                  "$ref": "#/components/schemas/changeRequestFeatureSchema"
                }
              },
              "segments": {
                "type": "array",
                "description": "The list of segments and their changes that relate to this change request.",
                "items": {
                  "$ref": "#/components/schemas/changeRequestSegmentChangeSchema"
                }
              },
              "approvals": {
                "type": "array",
                "description": "A list of approvals that this change request has received.",
                "items": {
                  "$ref": "#/components/schemas/changeRequestApprovalSchema"
                }
              },
              "rejections": {
                "type": "array",
                "description": "A list of rejections that this change request has received. ",
                "items": {
                  "$ref": "#/components/schemas/changeRequestApprovalSchema"
                }
              },
              "comments": {
                "type": "array",
                "description": "All comments that have been made on this change request.",
                "items": {
                  "$ref": "#/components/schemas/changeRequestCommentSchema"
                }
              },
              "createdBy": {
                "description": "The user who created this change request.",
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "nullable": true,
                    "example": "Hunter"
                  },
                  "imageUrl": {
                    "type": "string",
                    "format": "uri",
                    "nullable": true,
                    "description": "The URL of the user's profile image."
                  }
                }
              },
              "createdAt": {
                "description": "When this change request was created.",
                "type": "string",
                "format": "date-time",
                "example": "2023-07-31T13:33:02Z"
              },
              "state": {
                "type": "string",
                "enum": [
                  "Draft",
                  "In review",
                  "Approved",
                  "Applied",
                  "Cancelled",
                  "Rejected"
                ],
                "description": "The current state of the change request."
              }
            }
          },
          {
            "required": [
              "id",
              "environment",
              "state",
              "minApprovals",
              "project",
              "features",
              "segments",
              "createdAt",
              "createdBy",
              "schedule"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "number",
                "example": 3,
                "description": "This change requests's ID."
              },
              "title": {
                "type": "string",
                "example": "Increasing gradual rollout",
                "description": "A title describing the change request's content."
              },
              "environment": {
                "type": "string",
                "example": "development",
                "description": "The environment in which the changes should be applied."
              },
              "minApprovals": {
                "type": "number",
                "example": 2,
                "description": "The minimum number of approvals required before this change request can be applied."
              },
              "project": {
                "type": "string",
                "example": "unleash-project",
                "description": "The project this change request belongs to."
              },
              "features": {
                "type": "array",
                "description": "The list of features and their changes that relate to this change request.",
                "items": {
                  "$ref": "#/components/schemas/changeRequestFeatureSchema"
                }
              },
              "segments": {
                "type": "array",
                "description": "The list of segments and their changes that relate to this change request.",
                "items": {
                  "$ref": "#/components/schemas/changeRequestSegmentChangeSchema"
                }
              },
              "approvals": {
                "type": "array",
                "description": "A list of approvals that this change request has received.",
                "items": {
                  "$ref": "#/components/schemas/changeRequestApprovalSchema"
                }
              },
              "rejections": {
                "type": "array",
                "description": "A list of rejections that this change request has received. ",
                "items": {
                  "$ref": "#/components/schemas/changeRequestApprovalSchema"
                }
              },
              "comments": {
                "type": "array",
                "description": "All comments that have been made on this change request.",
                "items": {
                  "$ref": "#/components/schemas/changeRequestCommentSchema"
                }
              },
              "createdBy": {
                "description": "The user who created this change request.",
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "nullable": true,
                    "example": "Hunter"
                  },
                  "imageUrl": {
                    "type": "string",
                    "format": "uri",
                    "nullable": true,
                    "description": "The URL of the user's profile image."
                  }
                }
              },
              "createdAt": {
                "description": "When this change request was created.",
                "type": "string",
                "format": "date-time",
                "example": "2023-07-31T13:33:02Z"
              },
              "state": {
                "type": "string",
                "enum": [
                  "Scheduled"
                ],
                "description": "The current state of the change request."
              },
              "schedule": {
                "$ref": "#/components/schemas/changeRequestScheduleSchema"
              }
            }
          }
        ]
      },
      "changeRequestsCountSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "total",
          "applied",
          "rejected",
          "reviewRequired",
          "approved",
          "scheduled"
        ],
        "description": "Count of change requests in different stages of the [process](https://docs.getunleash.io/reference/change-requests#change-request-flow).",
        "properties": {
          "total": {
            "type": "number",
            "description": "The number of total change requests in this project",
            "example": 10
          },
          "applied": {
            "type": "number",
            "description": "The number of applied change requests",
            "example": 5
          },
          "rejected": {
            "type": "number",
            "description": "The number of rejected change requests",
            "example": 2
          },
          "reviewRequired": {
            "type": "number",
            "description": "The number of change requests awaiting the review",
            "example": 2
          },
          "approved": {
            "type": "number",
            "description": "The number of approved change requests",
            "example": 1
          },
          "scheduled": {
            "type": "number",
            "description": "The number of scheduled change requests",
            "example": 1
          }
        }
      },
      "changeRequestsSchema": {
        "type": "array",
        "description": "A list of change requests",
        "items": {
          "$ref": "#/components/schemas/changeRequestSchema"
        }
      },
      "changeRequestScheduleSchema": {
        "description": "A schedule for a change request's application. The schedule can either be pending, failed, or suspended. The schedule will always contain the state of the schedule and the last scheduled time, but other data varies between the different states.",
        "type": "object",
        "oneOf": [
          {
            "required": [
              "scheduledAt",
              "status"
            ],
            "additionalProperties": false,
            "description": "A pending schedule for a change request.",
            "properties": {
              "scheduledAt": {
                "description": "When this change request will be applied.",
                "type": "string",
                "format": "date-time",
                "example": "2023-07-31T13:33:02Z"
              },
              "status": {
                "description": "The status of the schedule.",
                "type": "string",
                "enum": [
                  "pending"
                ],
                "example": "pending"
              }
            }
          },
          {
            "required": [
              "scheduledAt",
              "status",
              "reason"
            ],
            "additionalProperties": false,
            "description": "A failed schedule for a change request.",
            "properties": {
              "scheduledAt": {
                "description": "When Unleash last attempted to apply this change request.",
                "type": "string",
                "format": "date-time",
                "example": "2023-07-31T13:33:02Z"
              },
              "status": {
                "description": "The status of the schedule.",
                "type": "string",
                "enum": [
                  "failed"
                ],
                "example": "failed"
              },
              "reason": {
                "description": "The reason the scheduled failed to apply.",
                "type": "string",
                "example": "conflicts"
              },
              "failureReason": {
                "deprecated": true,
                "description": "The reason the scheduled failed to apply. Deprecated in favor of the `reason` property.",
                "type": "string",
                "nullable": true,
                "example": "conflicts"
              }
            }
          },
          {
            "required": [
              "scheduledAt",
              "status",
              "reason"
            ],
            "additionalProperties": false,
            "description": "A suspended schedule for a change request.",
            "properties": {
              "scheduledAt": {
                "description": "When Unleash would have attempted to apply this change request if the schedule was not suspended.",
                "type": "string",
                "format": "date-time",
                "example": "2023-07-31T13:33:02Z"
              },
              "status": {
                "description": "The status of the schedule.",
                "type": "string",
                "enum": [
                  "suspended"
                ],
                "example": "suspended"
              },
              "reason": {
                "description": "Why the schedule was suspended.",
                "type": "string",
                "example": "The user who scheduled this change request (user id: 123) has been deleted from this Unleash instance."
              }
            }
          }
        ]
      },
      "changeRequestUpdateTitleSchema": {
        "type": "object",
        "description": "Data used to update a [change request](https://docs.getunleash.io/reference/change-requests)'s title.",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "Increasing gradual rollout",
            "description": "The new title to use for this change request."
          }
        }
      },
      "scheduledChangeRequestViewModelSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "environment"
        ],
        "description": "A change request view model, used in the UI to identify change requests in conflict",
        "properties": {
          "id": {
            "type": "number",
            "description": "The change request id",
            "example": 1
          },
          "environment": {
            "type": "string",
            "description": "The environment of the change request",
            "example": "production"
          },
          "title": {
            "type": "string",
            "description": "The change request title",
            "example": "My awesome change"
          }
        }
      },
      "changeRequestScheduledQueryParamsSchema": {
        "type": "object",
        "description": "Query parameters used to modify the list of scheduled change requests returned. For each parameter you add, the list will add any scheduled change requests matching that parameter.",
        "properties": {
          "feature": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "myFeature1",
                  "myFeature2"
                ]
              },
              {
                "type": "string",
                "example": "myFeature"
              }
            ],
            "description": "The name of one or more feature flags."
          },
          "strategyId": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "976ecee6-7629-4d5d-96dd-859c2cb15b89"
                ]
              },
              {
                "type": "string",
                "example": "976ecee6-7629-4d5d-96dd-859c2cb15b89"
              }
            ],
            "description": "One or more strategy IDs."
          },
          "variantForFlag": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "MyFeature1",
                  "MyFeature2"
                ]
              },
              {
                "type": "string",
                "example": "MyFeature1"
              }
            ],
            "description": "One or more features whose variants have been changed in a scheduled change request. This applies to flag-level variants. For changes to strategy variants, use the `strategyId` query parameter with the relevant strategy's ID."
          }
        }
      },
      "changeRequestScheduledResultSchema": {
        "description": "A list of scheduled change request view models",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/scheduledChangeRequestViewModelSchema"
        }
      },
      "updateEnvironmentSchema": {
        "type": "object",
        "description": "Data used to update an [environment](https://docs.getunleash.io/reference/environments).",
        "properties": {
          "type": {
            "type": "string",
            "description": "Updates the type of environment (i.e. development or production)."
          },
          "sortOrder": {
            "type": "integer",
            "description": "Changes the sort order of this environment."
          }
        }
      },
      "updateProjectSchema": {
        "type": "object",
        "description": "Data used to update a [project](https://docs.getunleash.io/reference/projects)",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "The new name of the project. The name must contain at least one non-whitespace character.",
            "type": "string",
            "pattern": "^(?!\\s*$).+",
            "example": "my-renamed-project"
          },
          "description": {
            "type": "string",
            "description": "A new description for the project",
            "example": "Anything related to the new UI"
          },
          "mode": {
            "type": "string",
            "enum": [
              "open",
              "protected",
              "private"
            ],
            "example": "open",
            "description": "A mode of the project affecting what actions are possible in this project"
          },
          "defaultStickiness": {
            "type": "string",
            "example": "userId",
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy"
          }
        }
      },
      "updateProjectEnterpriseSettingsSchema": {
        "type": "object",
        "description": "Data used to update a [project](https://docs.getunleash.io/reference/projects) settings",
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "open",
              "protected",
              "private"
            ],
            "example": "open",
            "description": "A mode of the project affecting what actions are possible in this project"
          },
          "featureNaming": {
            "$ref": "#/components/schemas/createFeatureNamingPatternSchema"
          }
        }
      },
      "userWithProjectRoleSchema": {
        "type": "object",
        "description": "Data about a user including their project role",
        "required": [
          "id"
        ],
        "properties": {
          "isAPI": {
            "type": "boolean",
            "description": "Whether this user is authenticated through Unleash tokens or logged in with a session",
            "deprecated": true,
            "example": false
          },
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "Hunter Burgan"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "The user's email address",
            "example": "hunter@hunter.com"
          },
          "id": {
            "type": "integer",
            "minimum": 0,
            "description": "The user's ID in the Unleash system",
            "example": 1
          },
          "imageUrl": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "description": "A URL pointing to the user's image."
          },
          "addedAt": {
            "type": "string",
            "description": "When this user was added to the project",
            "format": "date-time",
            "example": "2023-08-01T14:35:16Z"
          },
          "roleId": {
            "description": "The ID of the role this user has in the given project",
            "type": "integer",
            "minimum": 0,
            "example": 5
          },
          "roles": {
            "type": "array",
            "description": "A list of roles this user has in the given project",
            "items": {
              "type": "integer",
              "minimum": 0,
              "example": 5
            }
          }
        }
      },
      "groupWithProjectRoleSchema": {
        "type": "object",
        "description": "Data about a group including their project role",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the group",
            "example": "DX team"
          },
          "id": {
            "type": "integer",
            "minimum": 0,
            "description": "The group's ID in the Unleash system",
            "example": 1
          },
          "addedAt": {
            "type": "string",
            "description": "When this group was added to the project",
            "format": "date-time",
            "example": "2023-08-01T14:35:16Z"
          },
          "roleId": {
            "description": "The ID of the role this group has in the given project",
            "type": "integer",
            "minimum": 0,
            "example": 5
          },
          "roles": {
            "type": "array",
            "description": "A list of roles this user has in the given project",
            "items": {
              "type": "integer",
              "minimum": 0,
              "example": 5
            }
          },
          "description": {
            "description": "A custom description of the group",
            "type": "string",
            "nullable": true,
            "example": "Current members of the DX squad"
          },
          "mappingsSSO": {
            "description": "A list of SSO groups that should map to this Unleash group",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SSOGroup1",
              "SSOGroup2"
            ]
          },
          "rootRole": {
            "type": "number",
            "nullable": true,
            "description": "A role id that is used as the root role for all users in this group. This can be either the id of the Viewer, Editor or Admin role.",
            "example": 1
          },
          "createdBy": {
            "description": "A user who created this group",
            "type": "string",
            "nullable": true,
            "example": "admin"
          },
          "createdAt": {
            "description": "When was this group created",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-06-30T11:41:00.123Z"
          },
          "users": {
            "type": "array",
            "description": "A list of users belonging to this group",
            "items": {
              "$ref": "#/components/schemas/groupUserModelSchema"
            }
          },
          "scimId": {
            "description": "The SCIM ID of the group, only present if managed by SCIM",
            "type": "string",
            "nullable": true,
            "example": "01HTMEXAMPLESCIMID7SWWGHN7"
          }
        }
      },
      "validateProjectSchema": {
        "type": "object",
        "description": "Data used to validate a project ID",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "The project ID to validate",
            "type": "string",
            "example": "new-project-id"
          }
        }
      },
      "projectSettingsSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Project settings for a given project",
        "required": [
          "defaultStickiness",
          "mode"
        ],
        "properties": {
          "defaultStickiness": {
            "type": "string",
            "enum": [
              "default",
              "sessionId",
              "userId",
              "random"
            ],
            "description": "The [default stickiness for this project](https://docs.getunleash.io/reference/stickiness#project-default-stickiness)",
            "nullable": true
          },
          "mode": {
            "type": "string",
            "enum": [
              "open",
              "protected"
            ],
            "nullable": true,
            "description": "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode)."
          }
        }
      },
      "changeRequestStateSchema": {
        "type": "object",
        "description": "Data used to update the state of a [change request](https://docs.getunleash.io/reference/change-requests).",
        "oneOf": [
          {
            "required": [
              "state"
            ],
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "Draft",
                  "In review",
                  "Approved",
                  "Applied",
                  "Cancelled",
                  "Rejected"
                ],
                "description": "The new desired state for the change request"
              },
              "comment": {
                "type": "string",
                "example": "This is a comment for my change request",
                "description": "Any comments accompanying the state changed. Used when sending a draft to review."
              }
            }
          },
          {
            "required": [
              "state",
              "scheduledAt"
            ],
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "Scheduled"
                ],
                "description": "The new desired state for the change request"
              },
              "scheduledAt": {
                "type": "string",
                "format": "date-time",
                "description": "The time at which the change request should be applied."
              },
              "comment": {
                "type": "string",
                "example": "This is a comment for my change request",
                "description": "Any comments accompanying the state changed. Used when sending a draft to review."
              }
            }
          }
        ]
      },
      "serviceAccountSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "description": "Represents a [service account](https://docs.getunleash.io/reference/service-accounts). Service accounts are used to let systems interact with the Unleash API.",
        "properties": {
          "id": {
            "type": "number",
            "description": "The service account id",
            "example": 54321
          },
          "isAPI": {
            "type": "boolean",
            "deprecated": true,
            "example": false,
            "description": "Deprecated: for internal use only, should not be exposed through the API"
          },
          "name": {
            "type": "string",
            "description": "The name of the service account",
            "example": "My Service Account"
          },
          "email": {
            "type": "string",
            "example": "noemail@getunleash.io",
            "deprecated": true,
            "description": "Deprecated: service accounts don't have emails associated with them"
          },
          "username": {
            "type": "string",
            "description": "The service account username",
            "example": "my-service-account"
          },
          "imageUrl": {
            "type": "string",
            "description": "The service account image url",
            "example": "https://example.com/my-service-account.png"
          },
          "inviteLink": {
            "type": "string",
            "deprecated": true,
            "example": "https://example.com/invite-link",
            "description": "Deprecated: service accounts cannot be invited via an invitation link"
          },
          "loginAttempts": {
            "type": "number",
            "deprecated": true,
            "example": 0,
            "description": "Deprecated: service accounts cannot log in to Unleash"
          },
          "emailSent": {
            "type": "boolean",
            "deprecated": true,
            "example": false,
            "description": "Deprecated: internal use only"
          },
          "rootRole": {
            "type": "integer",
            "description": "The root role id associated with the service account",
            "example": 1
          },
          "seenAt": {
            "type": "string",
            "format": "date-time",
            "example": null,
            "nullable": true,
            "deprecated": true,
            "description": "Deprecated. This property is always `null`. To find out when a service account was last seen, check its `tokens` list and refer to each token's `lastSeen` property instead."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The service account creation date",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "tokens": {
            "type": "array",
            "description": "The list of tokens associated with the service account",
            "items": {
              "$ref": "#/components/schemas/patSchema"
            }
          }
        }
      },
      "serviceAccountsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "serviceAccounts"
        ],
        "description": "Represents a list of service accounts, and includes a list of root roles they reference",
        "properties": {
          "serviceAccounts": {
            "description": "A list of service accounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/serviceAccountSchema"
            }
          },
          "rootRoles": {
            "description": "A list of root roles that are referenced from service account objects in the `serviceAccounts` list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/roleSchema"
            }
          }
        }
      },
      "createServiceAccountSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "rootRole"
        ],
        "description": "Describes the properties required to create a new service account",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username of the service account",
            "example": "service-account-1"
          },
          "name": {
            "type": "string",
            "description": "The name of the service account",
            "example": "Service Account 1"
          },
          "rootRole": {
            "type": "integer",
            "description": "The id of the root role for the service account",
            "example": 1
          }
        }
      },
      "updateServiceAccountSchema": {
        "type": "object",
        "description": "Describes the properties required to update a service account",
        "additionalProperties": true,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the service account",
            "example": "Service Account 1"
          },
          "rootRole": {
            "type": "integer",
            "description": "The id of the root role for the service account",
            "example": 1
          }
        }
      },
      "notificationsSchema": {
        "type": "array",
        "description": "A list of [notifications](https://docs.getunleash.io/reference/notifications)",
        "items": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "id",
            "message",
            "link",
            "notificationType",
            "createdBy",
            "createdAt",
            "readAt"
          ],
          "properties": {
            "id": {
              "type": "number",
              "example": 1,
              "description": "The id of this notification"
            },
            "message": {
              "type": "string",
              "example": "Your change request got approved",
              "description": "The actual notification message"
            },
            "link": {
              "type": "string",
              "example": "/myunleash/projects/myproject/change-requests/46",
              "description": "The link to change request or feature flag the notification refers to"
            },
            "notificationType": {
              "enum": [
                "change-request",
                "toggle"
              ],
              "description": "The type of the notification used e.g. for the graphical hints"
            },
            "createdBy": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "username": {
                  "type": "string",
                  "example": "Jane Smith",
                  "description": "The name of the user who triggered the notification",
                  "nullable": true
                },
                "imageUrl": {
                  "type": "string",
                  "example": "https://gravatar.com/avatar/758f27d1f066779a62a65665242b8780107df403509a62a9e8a5924df5469f68?s=42&d=retro&r=g",
                  "description": "The avatar url of the user who triggered the notification",
                  "nullable": true
                }
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "example": "2022-12-02T13:17:12.445Z",
              "description": "The date and time when the notification was created"
            },
            "readAt": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "example": "2022-12-02T13:17:12.445Z",
              "description": "The date and time when the notification was read or marked as read, otherwise `null`"
            }
          }
        }
      },
      "markNotificationsAsReadSchema": {
        "type": "object",
        "description": "Data used to mark notifications as being read",
        "required": [
          "notifications"
        ],
        "properties": {
          "notifications": {
            "type": "array",
            "description": "A list of IDs belonging to the notifications you want to mark as read.",
            "items": {
              "type": "integer",
              "description": "A notification ID",
              "minimum": 0,
              "example": 5
            }
          }
        }
      },
      "loginEventSchema": {
        "description": "A model representing a single login event.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "The event's ID. Event IDs are incrementing integers. In other words, a more recent event will always have a higher ID than an older event.",
            "type": "integer",
            "minimum": 1,
            "example": 13
          },
          "username": {
            "description": "The username of the user that attempted to log in. Will return \"Incorrectly configured provider\" when attempting to log in using a misconfigured provider.",
            "type": "string",
            "example": "admin"
          },
          "auth_type": {
            "description": "The authentication type used to log in.",
            "example": "simple",
            "type": "string"
          },
          "created_at": {
            "description": "The date and time of when the login was attempted.",
            "type": "string",
            "format": "date-time",
            "example": "2023-03-01T12:04:26.061Z"
          },
          "successful": {
            "description": "Whether the login was successful or not.",
            "type": "boolean",
            "example": true
          },
          "ip": {
            "description": "The IP address of the client that attempted to log in.",
            "type": "string",
            "nullable": true,
            "example": "::ffff:127.0.0.1"
          },
          "failure_reason": {
            "description": "The reason for the login failure. This property is only present if the login was unsuccessful.",
            "type": "string",
            "nullable": true,
            "example": "No user found"
          }
        }
      },
      "loginHistorySchema": {
        "description": "A response model with a list of login events.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "events"
        ],
        "properties": {
          "events": {
            "type": "array",
            "description": "A list of login events",
            "items": {
              "$ref": "#/components/schemas/loginEventSchema"
            }
          }
        }
      },
      "accessOverviewSchema": {
        "description": "Data containing an overview of all the projects and groups users have access to",
        "type": "object",
        "properties": {
          "overview": {
            "type": "array",
            "description": "A list of user access details",
            "items": {
              "$ref": "#/components/schemas/userAccessSchema"
            }
          }
        }
      },
      "userAccessSchema": {
        "type": "object",
        "required": [
          "userId",
          "userEmail",
          "accessibleProjects",
          "groups",
          "rootRole"
        ],
        "additionalProperties": false,
        "description": "Describes a single set of access for a user",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "The identifier for the user",
            "example": 3
          },
          "createdAt": {
            "type": "string",
            "nullable": true,
            "description": "When the user was created",
            "format": "date-time",
            "example": "2023-03-01T12:04:26.061Z"
          },
          "userName": {
            "type": "string",
            "nullable": true,
            "description": "The name of the user",
            "example": "SomeUser"
          },
          "lastSeen": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The last time the user logged in",
            "example": "2023-03-01T12:04:26.061Z"
          },
          "accessibleProjects": {
            "description": "A list of project ids that this user has access to",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "default",
              "project2"
            ]
          },
          "groups": {
            "description": "A list of group names that this user is a member of",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "group1",
              "group2"
            ]
          },
          "rootRole": {
            "description": "The name of the root role that this user has",
            "type": "string",
            "example": "ADMIN"
          },
          "userEmail": {
            "description": "The email address of the user",
            "type": "string",
            "example": "some-user@example.com"
          }
        }
      },
      "createBannerSchema": {
        "type": "object",
        "required": [
          "message"
        ],
        "description": "Describes the properties required to create or update a banner.",
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string",
            "description": "The message to display to all users. Supports markdown.",
            "example": "**Reminder to everyone**: Maintenance is scheduled for *2337-12-27*."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the banner should be displayed currently. If not specified, defaults to true.",
            "example": true
          },
          "variant": {
            "type": "string",
            "description": "The variant of the banner. One of \"info\", \"warning\", \"error\", or \"success\". If not specified, defaults to \"info\".",
            "example": "info"
          },
          "sticky": {
            "type": "boolean",
            "description": "Whether the banner should be sticky on the screen. If not specified, defaults to `false`.",
            "example": true
          },
          "icon": {
            "type": "string",
            "description": "The icon to display on the banner. Can be one of https://fonts.google.com/icons. If not specified, this will be the default icon for the variant. If \"none\", no icon will be displayed.",
            "example": "build",
            "nullable": true
          },
          "link": {
            "type": "string",
            "description": "The link to display on the banner. Can either be an absolute or a relative link (e.g. absolute: \"https://example.com\" or relative: \"/admin/service-accounts\"). If \"dialog\", will display a dialog when clicked. If not specified, no link will be displayed.",
            "example": "dialog",
            "nullable": true
          },
          "linkText": {
            "type": "string",
            "description": "The text to display on the link. If not specified, will be displayed as \"More info\".",
            "example": "Learn more",
            "nullable": true
          },
          "dialogTitle": {
            "type": "string",
            "description": "The title to display on the dialog. If not specified, this will be the same as `linkText`.",
            "example": "Learn more about it here",
            "nullable": true
          },
          "dialog": {
            "type": "string",
            "description": "The markdown to display on the dialog. If not specified, no dialog will be displayed.",
            "example": "# Information\n\nMaintenance is **scheduled**.\n\n## More details\n\nThis is an example dialog that supports Markdown.",
            "nullable": true
          }
        }
      },
      "bannerSchema": {
        "type": "object",
        "required": [
          "id",
          "message",
          "createdAt"
        ],
        "description": "An object describing a banner to be displayed to all users.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "The banner's ID. Banner IDs are incrementing integers. In other words, a more recently created banner will always have a higher ID than an older one.",
            "minimum": 1,
            "example": 7
          },
          "message": {
            "type": "string",
            "description": "The message to display to all users. Supports markdown.",
            "example": "**Reminder to everyone**: Maintenance is scheduled for *2337-12-27*."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the banner should be displayed currently. If not specified, defaults to true.",
            "example": true
          },
          "variant": {
            "type": "string",
            "description": "The variant of the banner. One of \"info\", \"warning\", \"error\", or \"success\". If not specified, defaults to \"info\".",
            "example": "info"
          },
          "sticky": {
            "type": "boolean",
            "description": "Whether the banner should be sticky on the screen. If not specified, defaults to `false`.",
            "example": true
          },
          "icon": {
            "type": "string",
            "description": "The icon to display on the banner. Can be one of https://fonts.google.com/icons. If not specified, this will be the default icon for the variant. If \"none\", no icon will be displayed.",
            "example": "build",
            "nullable": true
          },
          "link": {
            "type": "string",
            "description": "The link to display on the banner. Can either be an absolute or a relative link (e.g. absolute: \"https://example.com\" or relative: \"/admin/service-accounts\"). If \"dialog\", will display a dialog when clicked. If not specified, no link will be displayed.",
            "example": "dialog",
            "nullable": true
          },
          "linkText": {
            "type": "string",
            "description": "The text to display on the link. If not specified, will be displayed as \"More info\".",
            "example": "Learn more",
            "nullable": true
          },
          "dialogTitle": {
            "type": "string",
            "description": "The title to display on the dialog. If not specified, this will be the same as `linkText`.",
            "example": "Learn more about it here",
            "nullable": true
          },
          "dialog": {
            "type": "string",
            "description": "The markdown to display on the dialog. If not specified, no dialog will be displayed.",
            "example": "# Information\n\nMaintenance is **scheduled**.\n\n## More details\n\nThis is an example dialog that supports Markdown.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of when the banner was created.",
            "example": "2023-12-27T13:37:00+01:00"
          }
        }
      },
      "bannersSchema": {
        "description": "A response model with a list of banners.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "banners"
        ],
        "properties": {
          "banners": {
            "type": "array",
            "description": "A list of banners.",
            "items": {
              "$ref": "#/components/schemas/bannerSchema"
            }
          }
        }
      },
      "createSignalEndpointSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "description": "Describes the properties required to create or update a signal endpoint.",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether the signal endpoint is currently enabled. If not specified, defaults to true.",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The signal endpoint name. Must be URL-safe.",
            "example": "cpu-over-90"
          },
          "description": {
            "type": "string",
            "description": "A more detailed description of the signal endpoint and its intended use.",
            "example": "Notifies when CPU usage is over 90%.",
            "nullable": true
          }
        }
      },
      "signalEndpointSchema": {
        "type": "object",
        "required": [
          "id",
          "enabled",
          "name",
          "createdAt",
          "createdByUserId"
        ],
        "description": "An object describing a signal endpoint.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "The signal endpoint's ID. Signal endpoint IDs are incrementing integers. In other words, a more recently created signal endpoint will always have a higher ID than an older one.",
            "minimum": 1,
            "example": 7
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the signal endpoint is currently enabled. If not specified, defaults to true.",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The signal endpoint name. Must be URL-safe.",
            "example": "cpu-over-90"
          },
          "description": {
            "type": "string",
            "description": "A more detailed description of the signal endpoint and its intended use.",
            "example": "Notifies when CPU usage is over 90%.",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of when the signal endpoint was created.",
            "example": "2023-12-27T13:37:00+01:00"
          },
          "createdByUserId": {
            "type": "integer",
            "description": "The ID of the user that created this signal endpoint.",
            "example": 1337
          },
          "url": {
            "type": "string",
            "description": "The full URL that should be used to call the signal endpoint. This property is only returned for newly created or updated signal endpoints.",
            "example": "https://app.unleash-hosted.com/my-instance/signal-endpoint/cpu-over-90"
          },
          "tokens": {
            "type": "array",
            "description": "The list of tokens associated with the signal endpoint.",
            "items": {
              "$ref": "#/components/schemas/signalEndpointTokenSchema"
            }
          }
        }
      },
      "signalEndpointsSchema": {
        "description": "A response model with a list of signal endpoints.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "signalEndpoints"
        ],
        "properties": {
          "signalEndpoints": {
            "type": "array",
            "description": "A list of signal endpoints.",
            "items": {
              "$ref": "#/components/schemas/signalEndpointSchema"
            }
          }
        }
      },
      "createSignalEndpointTokenSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "description": "Describes the properties required to create or update a signal endpoint token.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The signal endpoint token name.",
            "example": "My external app #1"
          }
        }
      },
      "signalEndpointTokenSchema": {
        "type": "object",
        "required": [
          "id",
          "name",
          "signalEndpointId",
          "createdAt",
          "createdByUserId"
        ],
        "description": "An object describing a signal endpoint token.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "The signal endpoint token's ID. Signal endpoint token IDs are incrementing integers. In other words, a more recently created signal endpoint token will always have a higher ID than an older one.",
            "minimum": 1,
            "example": 7
          },
          "token": {
            "type": "string",
            "description": "The token used for authentication. It is automatically generated by Unleash when the token is created and that is the only time this property is returned.",
            "example": "signal_xyzrandomstring"
          },
          "name": {
            "type": "string",
            "description": "The signal endpoint token name.",
            "example": "My external app #1"
          },
          "signalEndpointId": {
            "type": "integer",
            "description": "The signal endpoint ID that this token belongs to.",
            "example": 1337
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of when the signal endpoint token was created.",
            "example": "2023-12-27T13:37:00+01:00"
          },
          "createdByUserId": {
            "type": "integer",
            "description": "The ID of the user that created this signal endpoint token.",
            "example": 1337
          }
        }
      },
      "signalEndpointTokensSchema": {
        "description": "A response model with a list of signal endpoint tokens.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "signalEndpointTokens"
        ],
        "properties": {
          "signalEndpointTokens": {
            "type": "array",
            "description": "A list of signal endpoint tokens.",
            "items": {
              "$ref": "#/components/schemas/signalEndpointTokenSchema"
            }
          }
        }
      },
      "feedbackSchema": {
        "additionalProperties": false,
        "description": "Schema representing feedback information.",
        "type": "object",
        "required": [
          "id",
          "category",
          "userType",
          "difficultyScore",
          "positive",
          "areasForImprovement",
          "createdAt"
        ],
        "properties": {
          "id": {
            "type": "number",
            "example": 123,
            "description": "The unique identifier of the feedback."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2022-12-12T12:13:24.218Z",
            "description": "The date and time when the feedback was provided."
          },
          "category": {
            "type": "string",
            "example": "UI/UX",
            "description": "The category of the feedback."
          },
          "userType": {
            "type": "string",
            "nullable": true,
            "example": "developer",
            "description": "The type of user providing the feedback."
          },
          "difficultyScore": {
            "type": "number",
            "nullable": true,
            "example": 5,
            "description": "A score indicating the difficulty experienced by the user."
          },
          "positive": {
            "type": "string",
            "nullable": true,
            "example": "Easy to navigate.",
            "description": "This field is for users to mention what they liked."
          },
          "areasForImprovement": {
            "nullable": true,
            "type": "string",
            "example": "Slow response time.",
            "description": "Details aspects of the service or product that could benefit from enhancements or modifications. Aids in pinpointing areas needing attention for improvement."
          }
        }
      },
      "feedbackListSchema": {
        "type": "array",
        "description": "A list of feedback items.",
        "items": {
          "$ref": "#/components/schemas/feedbackSchema"
        }
      },
      "provideFeedbackSchema": {
        "additionalProperties": false,
        "description": "Schema representing the creation of feedback information.",
        "type": "object",
        "required": [
          "category"
        ],
        "properties": {
          "category": {
            "type": "string",
            "example": "UI/UX",
            "description": "The category of the feedback."
          },
          "userType": {
            "type": "string",
            "nullable": true,
            "example": "developer",
            "description": "The type of user providing the feedback."
          },
          "difficultyScore": {
            "type": "number",
            "nullable": true,
            "example": 5,
            "description": "A score indicating the difficulty experienced by the user."
          },
          "positive": {
            "type": "string",
            "nullable": true,
            "example": "Easy to navigate.",
            "description": "This field is for users to mention what they liked."
          },
          "areasForImprovement": {
            "nullable": true,
            "type": "string",
            "example": "Slow response time.",
            "description": "Details aspects of the service or product that could benefit from enhancements or modifications. Aids in pinpointing areas needing attention for improvement."
          }
        }
      },
      "licenseUpdateSchema": {
        "description": "A model representing a set license token.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "description": "The actual license token.",
            "type": "string"
          }
        }
      },
      "licenseReadSchema": {
        "description": "A model representing a license response.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "description": "The actual license token.",
            "type": "string"
          },
          "customer": {
            "description": "Name of the customer that owns the license. This is the name of the company that purchased the license.",
            "type": "string"
          },
          "plan": {
            "description": "Name of plan that the license is for.",
            "type": "string"
          },
          "seats": {
            "description": "Number of seats in the license.",
            "type": "number"
          },
          "expireAt": {
            "description": "Date when the license expires.",
            "type": "string",
            "format": "date-time",
            "example": "2023-07-31T13:33:02Z"
          }
        }
      },
      "licenseCheckSchema": {
        "description": "A model representing a license check response.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "isValid"
        ],
        "properties": {
          "isValid": {
            "description": "Whether or not the current Unleash license is considered valid",
            "type": "boolean"
          },
          "message": {
            "description": "Message describing the current state of the Unleash license",
            "type": "string",
            "example": "Your license expired 3 days ago"
          }
        }
      },
      "signalSchema": {
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "source",
          "sourceId"
        ],
        "description": "An object describing a signal.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "The signal's ID. Signal IDs are incrementing integers. In other words, a more recently created signal will always have a higher ID than an older one.",
            "minimum": 1,
            "example": 7
          },
          "payload": {
            "type": "object",
            "x-enforcer-exception-skip-codes": "WSCH006",
            "description": "The payload of the signal.",
            "example": {
              "cpu": 92,
              "memory": 85
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of when the signal was created.",
            "example": "2023-12-27T13:37:00+01:00"
          },
          "source": {
            "type": "string",
            "enum": [
              "signal-endpoint"
            ],
            "description": "The signal source type. Should be used along with `sourceId` to uniquely identify the resource that created this signal.",
            "example": "signal-endpoint"
          },
          "sourceId": {
            "type": "integer",
            "description": "The ID of the source that created this signal. Should be used along with `source` to uniquely identify the resource that created this signal.",
            "example": 1337
          },
          "createdBySourceTokenId": {
            "type": "integer",
            "nullable": true,
            "description": "The ID of the source token that created this signal. Only present if the signal was created by a signal endpoint.",
            "example": 1337
          }
        }
      },
      "signalsSchema": {
        "description": "A response model with a list of signals.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "signals"
        ],
        "properties": {
          "signals": {
            "type": "array",
            "description": "A list of signals.",
            "items": {
              "$ref": "#/components/schemas/signalSchema"
            }
          }
        }
      },
      "createActionsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "actorId",
          "actions",
          "match"
        ],
        "description": "An action set defines actions that Unleash performs when a signal is matched.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the action set",
            "example": "Disable new features"
          },
          "description": {
            "type": "string",
            "description": "The description of the action set",
            "example": "Disables new features when error rate is above threshold",
            "nullable": true
          },
          "actorId": {
            "type": "integer",
            "description": "The id of the service account that will execute the action",
            "minimum": 1,
            "example": 12
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether this action set is enabled or not",
            "example": true,
            "default": true
          },
          "actions": {
            "type": "array",
            "description": "The list of actions to execute in sequential order when the action set is triggered",
            "items": {
              "$ref": "#/components/schemas/createActionSchema"
            }
          },
          "match": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "source",
              "sourceId",
              "payload"
            ],
            "description": "Defines a matching rule for the signal that will trigger the action set",
            "properties": {
              "source": {
                "type": "string",
                "description": "Match the source of the signal",
                "example": "signal-endpoint",
                "enum": [
                  "signal-endpoint"
                ]
              },
              "sourceId": {
                "type": "number",
                "description": "Match the source id of the signal",
                "example": 123
              },
              "payload": {
                "type": "object",
                "x-enforcer-exception-skip-codes": "WSCH006",
                "description": "Match the payload of the signal",
                "additionalProperties": true,
                "example": {
                  "type": "error-rate-above-threshold"
                }
              }
            }
          }
        }
      },
      "actionsSchema": {
        "description": "A response model with an identifiable action set.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "project",
          "createdAt",
          "createdByUserId",
          "name",
          "actorId",
          "actions",
          "match"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the action set.",
            "minimum": 1,
            "example": 1
          },
          "project": {
            "type": "string",
            "description": "The project that this action set belongs to.",
            "example": "default"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of when the action set was created.",
            "example": "2023-12-27T13:37:00+01:00"
          },
          "createdByUserId": {
            "type": "integer",
            "description": "The ID of the user that created this action set.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the action set",
            "example": "Disable new features"
          },
          "description": {
            "type": "string",
            "description": "The description of the action set",
            "example": "Disables new features when error rate is above threshold",
            "nullable": true
          },
          "actorId": {
            "type": "integer",
            "description": "The id of the service account that will execute the action",
            "minimum": 1,
            "example": 12
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether this action set is enabled or not",
            "example": true,
            "default": true
          },
          "actions": {
            "type": "array",
            "description": "The list of actions to execute in sequential order when the action set is triggered.",
            "items": {
              "$ref": "#/components/schemas/actionSchema"
            }
          },
          "match": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "source",
              "sourceId",
              "payload"
            ],
            "description": "Defines a matching rule for the signal that will trigger the action set",
            "properties": {
              "source": {
                "type": "string",
                "description": "Match the source of the signal",
                "example": "signal-endpoint",
                "enum": [
                  "signal-endpoint"
                ]
              },
              "sourceId": {
                "type": "number",
                "description": "Match the source id of the signal",
                "example": 123
              },
              "payload": {
                "type": "object",
                "x-enforcer-exception-skip-codes": "WSCH006",
                "description": "Match the payload of the signal",
                "additionalProperties": true,
                "example": {
                  "type": "error-rate-above-threshold"
                }
              }
            }
          }
        }
      },
      "actionSchema": {
        "description": "Represents a single action response",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "createdAt",
          "createdByUserId",
          "action",
          "sortOrder"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the action set",
            "minimum": 1,
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of when the action was created.",
            "example": "2023-12-27T13:37:00+01:00"
          },
          "createdByUserId": {
            "type": "integer",
            "description": "The id of user that created this action set",
            "example": 1
          },
          "action": {
            "type": "string",
            "description": "The name of the action to execute",
            "example": "disable-feature"
          },
          "sortOrder": {
            "type": "integer",
            "description": "The order in which the action should be executed",
            "minimum": 1,
            "example": 1
          },
          "executionParams": {
            "type": "object",
            "x-enforcer-exception-skip-codes": "WSCH006",
            "description": "A map of parameters to pass to the action",
            "additionalProperties": true,
            "default": {},
            "example": {
              "featureName": "my-feature"
            }
          }
        }
      },
      "createActionSchema": {
        "description": "Represents a single action",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "action",
          "sortOrder"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "The name of the action to execute",
            "example": "disable-feature"
          },
          "sortOrder": {
            "type": "integer",
            "description": "The order in which the action should be executed",
            "minimum": 1,
            "example": 1
          },
          "executionParams": {
            "type": "object",
            "x-enforcer-exception-skip-codes": "WSCH006",
            "description": "A map of parameters to pass to the action",
            "additionalProperties": true,
            "default": {},
            "example": {
              "featureName": "my-feature"
            }
          }
        }
      },
      "actionsListSchema": {
        "description": "A response model with a list of action sets.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "actions"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "description": "A list of action sets.",
            "items": {
              "$ref": "#/components/schemas/actionsSchema"
            }
          }
        }
      },
      "instanceInsightsSchema": {
        "additionalProperties": false,
        "description": "A summary of this Unleash instance's usage statistics, including user and flag counts, and trends over time.",
        "type": "object",
        "required": [
          "users",
          "flags",
          "userTrends",
          "flagTrends",
          "projectFlagTrends",
          "metricsSummaryTrends",
          "environmentTypeTrends"
        ],
        "properties": {
          "users": {
            "type": "object",
            "additionalProperties": false,
            "description": "High level user count statistics",
            "required": [
              "total",
              "active",
              "inactive"
            ],
            "properties": {
              "total": {
                "type": "number",
                "example": 100,
                "description": "The number of actual Unleash users"
              },
              "active": {
                "type": "number",
                "example": 98,
                "description": "The number of active Unleash users who have user Unleash in the past 60 days"
              },
              "inactive": {
                "type": "number",
                "example": 2,
                "description": "The number of inactive Unleash users who have not used Unleash in the past 60 days."
              }
            }
          },
          "flags": {
            "type": "object",
            "additionalProperties": false,
            "description": "High level flag count statistics",
            "required": [
              "total"
            ],
            "properties": {
              "total": {
                "type": "number",
                "example": 100,
                "description": "The number of non-archived flags"
              }
            }
          },
          "userTrends": {
            "type": "array",
            "description": "How number of users changed over time",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "date",
                "total",
                "active",
                "inactive"
              ],
              "properties": {
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-12T23:59:59.999Z",
                  "description": "A UTC date when the stats were captured. Time is the very end of a given day."
                },
                "total": {
                  "type": "number",
                  "example": 100,
                  "description": "The number of actual Unleash users on a particular day"
                },
                "active": {
                  "type": "number",
                  "example": 98,
                  "description": "The number of active Unleash users on a particular day"
                },
                "inactive": {
                  "type": "number",
                  "example": 2,
                  "description": "The number of inactive Unleash users on a particular day"
                }
              }
            }
          },
          "flagTrends": {
            "type": "array",
            "description": "How number of flags changed over time",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "date",
                "total",
                "active",
                "stale",
                "potentiallyStale"
              ],
              "properties": {
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-12T23:59:59.999Z",
                  "description": "A UTC date when the stats were captured. Time is the very end of a given day."
                },
                "total": {
                  "type": "number",
                  "example": 100,
                  "description": "The number of all flags on a particular day"
                },
                "active": {
                  "type": "number",
                  "example": 98,
                  "description": "The number of active flags on a particular day"
                },
                "stale": {
                  "type": "number",
                  "example": 0,
                  "description": "The number of user marked stale flags on a particular day"
                },
                "potentiallyStale": {
                  "type": "number",
                  "example": 2,
                  "description": "The number of time calculated potentially stale flags on a particular day"
                }
              }
            }
          },
          "projectFlagTrends": {
            "type": "array",
            "description": "How number of flags per project changed over time",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "project",
                "date",
                "total",
                "active",
                "stale",
                "potentiallyStale",
                "week",
                "health"
              ],
              "properties": {
                "week": {
                  "type": "string",
                  "example": "2024-40",
                  "description": "Year and week in a given year for which the stats were calculated"
                },
                "project": {
                  "type": "string",
                  "example": "default",
                  "description": "Project id of the project the flag trends belong to"
                },
                "health": {
                  "type": "number",
                  "example": 50,
                  "description": "An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating) on a scale from 0 to 100"
                },
                "timeToProduction": {
                  "type": "number",
                  "example": 10,
                  "description": "The average time from when a feature was created to when it was enabled in the \"production\" environment during the current window"
                },
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-12T23:59:59.999Z",
                  "description": "A UTC date when the stats were captured. Time is the very end of a given day."
                },
                "total": {
                  "type": "number",
                  "example": 100,
                  "description": "The number of all flags on a particular day"
                },
                "active": {
                  "type": "number",
                  "example": 98,
                  "description": "The number of active flags on a particular day"
                },
                "stale": {
                  "type": "number",
                  "example": 0,
                  "description": "The number of user marked stale flags on a particular day"
                },
                "potentiallyStale": {
                  "type": "number",
                  "example": 2,
                  "description": "The number of time calculated potentially stale flags on a particular day"
                },
                "users": {
                  "type": "number",
                  "example": 30,
                  "description": "The number of users who have access to the project"
                }
              }
            }
          },
          "metricsSummaryTrends": {
            "type": "array",
            "description": "How metrics data per project changed over time",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "week",
                "date",
                "project",
                "totalRequests",
                "totalYes",
                "totalNo",
                "totalApps",
                "totalFlags",
                "totalEnvironments"
              ],
              "properties": {
                "week": {
                  "type": "string",
                  "example": "2024-01",
                  "description": "Year and week in a given year for which the metrics summary was calculated"
                },
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-12T23:59:59.999Z",
                  "description": "A UTC date when metrics summary was captured. Time is the very end of a given day."
                },
                "project": {
                  "type": "string",
                  "example": "default",
                  "description": "Project id of the project the impressions summary belong to"
                },
                "totalRequests": {
                  "type": "number",
                  "example": 50,
                  "description": "Total number of times all project flags were requested "
                },
                "totalYes": {
                  "type": "number",
                  "example": 50,
                  "description": "Total number of times all project flags were exposed across all environments"
                },
                "totalNo": {
                  "type": "number",
                  "example": 50,
                  "description": "Total number of times all project flags were not exposed across all environments"
                },
                "totalApps": {
                  "type": "number",
                  "example": 50,
                  "description": "Total number of applications the impression data belong to"
                },
                "totalFlags": {
                  "type": "number",
                  "example": 50,
                  "description": "Total number of flags the impression data belong to"
                },
                "totalEnvironments": {
                  "type": "number",
                  "example": 50,
                  "description": "Total number of environments the impression data belong to"
                }
              }
            }
          },
          "environmentTypeTrends": {
            "type": "array",
            "description": "How updates per environment type changed over time",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "date",
                "week",
                "environmentType",
                "totalUpdates"
              ],
              "properties": {
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-12T23:59:59.999Z",
                  "description": "A UTC date when the stats were captured. Time is the very end of a given day."
                },
                "week": {
                  "type": "string",
                  "example": "2024-01",
                  "description": "Year and week in a given year for which the stats were calculated"
                },
                "environmentType": {
                  "type": "string",
                  "example": "production",
                  "description": "Environment type the data belongs too"
                },
                "totalUpdates": {
                  "type": "number",
                  "example": 50,
                  "description": "Total number of times configuration has been updated in the environment type "
                }
              }
            }
          }
        }
      },
      "signalEndpointSignalSchema": {
        "type": "object",
        "required": [
          "createdAt",
          "source",
          "sourceId"
        ],
        "description": "An object describing a signal originated from a signal endpoint.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "The signal's ID. Signal IDs are incrementing integers. In other words, a more recently created signal will always have a higher ID than an older one.",
            "minimum": 1,
            "example": 7
          },
          "payload": {
            "type": "object",
            "x-enforcer-exception-skip-codes": "WSCH006",
            "description": "The payload of the signal.",
            "example": {
              "cpu": 92,
              "memory": 85
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of when the signal was created.",
            "example": "2023-12-27T13:37:00+01:00"
          },
          "source": {
            "type": "string",
            "enum": [
              "signal-endpoint"
            ],
            "description": "The signal source type. Should be used along with `sourceId` to uniquely identify the resource that created this signal.",
            "example": "signal-endpoint"
          },
          "sourceId": {
            "type": "integer",
            "description": "The ID of the source that created this signal. Should be used along with `source` to uniquely identify the resource that created this signal.",
            "example": 1337
          },
          "tokenName": {
            "type": "string",
            "nullable": true,
            "description": "The name of the token used to register this signal.",
            "example": "signal-endpoint-token"
          }
        }
      },
      "signalEndpointSignalsSchema": {
        "description": "A response model with a list of signals originated from a signals endpoint.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "signalEndpointSignals"
        ],
        "properties": {
          "signalEndpointSignals": {
            "type": "array",
            "description": "A list of signals originated from a signals endpoint.",
            "items": {
              "$ref": "#/components/schemas/signalEndpointSignalSchema"
            }
          }
        }
      },
      "actionEventSchema": {
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "createdByUserId",
          "action",
          "sortOrder",
          "state"
        ],
        "description": "An object describing an action event.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the action set",
            "minimum": 1,
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of when the action was created.",
            "example": "2023-12-27T13:37:00+01:00"
          },
          "createdByUserId": {
            "type": "integer",
            "description": "The id of user that created this action set",
            "example": 1
          },
          "action": {
            "type": "string",
            "description": "The name of the action to execute",
            "example": "disable-feature"
          },
          "sortOrder": {
            "type": "integer",
            "description": "The order in which the action should be executed",
            "minimum": 1,
            "example": 1
          },
          "executionParams": {
            "type": "object",
            "x-enforcer-exception-skip-codes": "WSCH006",
            "description": "A map of parameters to pass to the action",
            "additionalProperties": true,
            "default": {},
            "example": {
              "featureName": "my-feature"
            }
          },
          "state": {
            "type": "string",
            "description": "The state of the action. Can be one of `not started`, `started`, `success`, or `failed`.",
            "enum": [
              "not started",
              "started",
              "success",
              "failed"
            ]
          },
          "details": {
            "type": "string",
            "nullable": true,
            "description": "The details of the action event, if any."
          }
        }
      },
      "actionSetEventsSchema": {
        "description": "A response model with a list of action set events.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "actionSetEvents"
        ],
        "properties": {
          "actionSetEvents": {
            "type": "array",
            "description": "A list of action set events.",
            "items": {
              "$ref": "#/components/schemas/actionSetEventSchema"
            }
          }
        }
      },
      "actionSetEventSchema": {
        "type": "object",
        "required": [
          "id",
          "actionSetId",
          "signalId",
          "createdAt",
          "state",
          "signal",
          "actionSet"
        ],
        "description": "An object describing an action event.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "The action set event's ID. Action set event IDs are incrementing integers. In other words, a more recently created action set event will always have a higher ID than an older one.",
            "minimum": 1,
            "example": 7
          },
          "actionSetId": {
            "type": "integer",
            "description": "The ID of the action set that the action set event belongs to.",
            "example": 42
          },
          "signalId": {
            "type": "integer",
            "description": "The ID of the signal that triggered this action set event.",
            "example": 1337
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of when the action set event was created. In other words, the date and time of when the action set started executing.",
            "example": "2023-12-27T13:37:00+01:00"
          },
          "state": {
            "type": "string",
            "enum": [
              "started",
              "success",
              "failed"
            ],
            "description": "The state of the action set event. Can be one of `started`, `success`, or `failed`.",
            "example": "started"
          },
          "signal": {
            "$ref": "#/components/schemas/signalSchema",
            "description": "The signal that triggered this action set event."
          },
          "actionSet": {
            "type": "object",
            "required": [
              "id",
              "project",
              "createdAt",
              "createdByUserId",
              "name",
              "actorId",
              "actions",
              "match"
            ],
            "description": "The action set this action set event belongs to, where the individual actions are decorated with the respective action states.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "integer",
                "description": "The ID of the action set.",
                "minimum": 1,
                "example": 1
              },
              "project": {
                "type": "string",
                "description": "The project that this action set belongs to.",
                "example": "default"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "The date and time of when the action set was created.",
                "example": "2023-12-27T13:37:00+01:00"
              },
              "createdByUserId": {
                "type": "integer",
                "description": "The ID of the user that created this action set.",
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "The name of the action set",
                "example": "Disable new features"
              },
              "description": {
                "type": "string",
                "description": "The description of the action set",
                "example": "Disables new features when error rate is above threshold",
                "nullable": true
              },
              "actorId": {
                "type": "integer",
                "description": "The id of the service account that will execute the action",
                "minimum": 1,
                "example": 12
              },
              "enabled": {
                "type": "boolean",
                "description": "Whether this action set is enabled or not",
                "example": true,
                "default": true
              },
              "actions": {
                "type": "array",
                "description": "The list of actions executed in sequential order when the action set was triggered, decorated with the individual action states.",
                "items": {
                  "$ref": "#/components/schemas/actionEventSchema"
                }
              },
              "match": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "source",
                  "sourceId",
                  "payload"
                ],
                "description": "Defines a matching rule for the signal that will trigger the action set",
                "properties": {
                  "source": {
                    "type": "string",
                    "description": "Match the source of the signal",
                    "example": "signal-endpoint",
                    "enum": [
                      "signal-endpoint"
                    ]
                  },
                  "sourceId": {
                    "type": "number",
                    "description": "Match the source id of the signal",
                    "example": 123
                  },
                  "payload": {
                    "type": "object",
                    "x-enforcer-exception-skip-codes": "WSCH006",
                    "description": "Match the payload of the signal",
                    "additionalProperties": true,
                    "example": {
                      "type": "error-rate-above-threshold"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "actionDefinitionParameterSchema": {
        "description": "Defines a parameter for an action.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "label",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "project",
              "environment",
              "featureName",
              "tag"
            ],
            "description": "The name of the parameter.",
            "example": "project"
          },
          "label": {
            "type": "string",
            "description": "The label of the parameter.",
            "example": "Param name"
          },
          "type": {
            "type": "string",
            "enum": [
              "select",
              "hidden"
            ],
            "description": "The parameter type.",
            "example": "select"
          },
          "optional": {
            "type": "boolean",
            "default": true,
            "description": "Whether the parameter is optional.",
            "example": true
          },
          "options": {
            "type": "array",
            "description": "Lists of options to be used for the parameter.",
            "items": {
              "type": "string",
              "example": "default"
            }
          }
        }
      },
      "actionDefinitionSchema": {
        "description": "Configuration of a single action and its parameters.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "label",
          "description",
          "category",
          "permissions",
          "parameters"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": "The label of the action.",
            "example": "Enable a feature"
          },
          "description": {
            "type": "string",
            "description": "A description for the action.",
            "example": "Enable a feature flag in a specific environment."
          },
          "category": {
            "type": "string",
            "description": "The category of the action.",
            "example": "Feature flags"
          },
          "permissions": {
            "type": "array",
            "description": "The permissions required to perform the action.",
            "items": {
              "type": "string"
            },
            "example": [
              "UPDATE_FEATURE"
            ]
          },
          "parameters": {
            "type": "array",
            "description": "The parameters required to perform the action.",
            "items": {
              "$ref": "#/components/schemas/actionDefinitionParameterSchema"
            }
          }
        }
      },
      "actionDefinitionsConfigSchema": {
        "description": "Configuration of different actions and their parameters.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TOGGLE_FEATURE_ON": {
            "$ref": "#/components/schemas/actionDefinitionSchema"
          },
          "TOGGLE_FEATURE_OFF": {
            "$ref": "#/components/schemas/actionDefinitionSchema"
          },
          "TOGGLE_FEATURES_ON_BY_TAG": {
            "$ref": "#/components/schemas/actionDefinitionSchema"
          },
          "TOGGLE_FEATURES_OFF_BY_TAG": {
            "$ref": "#/components/schemas/actionDefinitionSchema"
          }
        }
      },
      "toggleFeatureActionSchema": {
        "description": "Input data required for the action",
        "type": "object",
        "required": [
          "project",
          "environment",
          "featureName"
        ],
        "properties": {
          "project": {
            "type": "string",
            "description": "The project where the feature is located"
          },
          "environment": {
            "type": "string",
            "description": "The environment we want to target"
          },
          "featureName": {
            "type": "string",
            "description": "The name of the feature we want to target"
          }
        }
      },
      "toggleFeaturesByTagActionSchema": {
        "description": "Input data required for the action",
        "type": "object",
        "required": [
          "project",
          "environment",
          "tag"
        ],
        "properties": {
          "project": {
            "type": "string",
            "description": "The project where the feature is located",
            "example": "default"
          },
          "environment": {
            "type": "string",
            "description": "The environment we want to target",
            "example": "development"
          },
          "tag": {
            "type": "string",
            "description": "The tag we want to target, in the following format: `[TAG_TYPE]:[TAG_VALUE]`",
            "example": "simple:tag"
          }
        }
      },
      "trafficUsageApiDataSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Contains the recorded data usage for each API path, segmented by day and type of traffic",
        "required": [
          "days",
          "apiPath"
        ],
        "properties": {
          "days": {
            "type": "array",
            "description": "An array containing each day in the selected period that has data usage recorded",
            "items": {
              "type": "object",
              "properties": {
                "day": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-04-19T00:00:00.000Z",
                  "description": "The day of the period for which the usage is recorded"
                },
                "trafficTypes": {
                  "type": "array",
                  "description": "Contains the recorded data usage for each type of traffic group",
                  "items": {
                    "type": "object",
                    "properties": {
                      "group": {
                        "type": "string",
                        "description": "The traffic group",
                        "example": "successful-requests"
                      },
                      "count": {
                        "type": "number",
                        "description": "The number of requests",
                        "example": 100
                      }
                    },
                    "required": [
                      "group",
                      "count"
                    ]
                  }
                }
              },
              "required": [
                "day",
                "trafficTypes"
              ]
            }
          },
          "apiPath": {
            "type": "string",
            "description": "The path of the API that the recorded data usage is for",
            "example": "/api/client/features"
          }
        }
      },
      "trafficUsageDataSegmentedSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Contains the recorded data usage for each API path, segmented by day and type of traffic",
        "required": [
          "period",
          "apiData"
        ],
        "properties": {
          "period": {
            "type": "string",
            "example": "2023-04",
            "description": "The year-month period for which the data usage is counted"
          },
          "apiData": {
            "type": "array",
            "description": "Contains the recorded daily data usage for each API path",
            "items": {
              "$ref": "#/components/schemas/trafficUsageApiDataSchema"
            }
          }
        }
      },
      "scimSettingsSchema": {
        "type": "object",
        "required": [
          "enabled",
          "assumeControlOfExisting",
          "hasToken"
        ],
        "description": "An object describing settings for SCIM provisioning.",
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether SCIM provisioning is currently enabled.",
            "example": true
          },
          "assumeControlOfExisting": {
            "type": "boolean",
            "description": "Whether SCIM assumes control of existing users",
            "example": false
          },
          "hasToken": {
            "type": "boolean",
            "description": "Whether a SCIM provisioning API token is currently set.",
            "example": true
          }
        }
      },
      "setScimSettingsSchema": {
        "type": "object",
        "required": [
          "enabled",
          "assumeControlOfExisting"
        ],
        "description": "An object describing settings for SCIM provisioning.",
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether SCIM provisioning is currently enabled.",
            "example": true
          },
          "assumeControlOfExisting": {
            "type": "boolean",
            "description": "Whether SCIM assumes control of existing users",
            "example": false
          }
        }
      },
      "scimTokenSchema": {
        "type": "object",
        "required": [
          "token"
        ],
        "description": "An object describing a SCIM provisioning API token.",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "description": "The token used for SCIM API authentication. Can be revoked at a later stage by generating a new one.",
            "example": "xyzrandomstring"
          }
        }
      },
      "changeRequestPlaygroundRequestSchema": {
        "description": "Data for the playground API to evaluate flags with change request applied in preview mode",
        "type": "object",
        "required": [
          "context"
        ],
        "properties": {
          "context": {
            "$ref": "#/components/schemas/sdkContextSchema"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Addons",
      "description": "Create, update, and delete [Unleash addons](https://docs.getunleash.io/addons)."
    },
    {
      "name": "Admin UI",
      "description": "Configuration for the Unleash Admin UI. These endpoints should not be relied upon and can change at any point without prior notice."
    },
    {
      "name": "API tokens",
      "description": "Create, update, and delete [Unleash API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys)."
    },
    {
      "name": "Archive",
      "description": "Revive or permanently delete [archived feature flags](https://docs.getunleash.io/advanced/archived_toggles)."
    },
    {
      "name": "Auth",
      "description": "Manage logins, passwords, etc."
    },
    {
      "name": "Banners",
      "description": "Create, update, flag, and delete [banners](https://docs.getunleash.io/reference/banners)."
    },
    {
      "name": "Change Requests",
      "description": "API for managing [change requests](https://docs.getunleash.io/reference/change-requests)."
    },
    {
      "name": "Client",
      "description": "Endpoints for [Unleash server-side clients](https://docs.getunleash.io/reference/sdks)."
    },
    {
      "name": "Context",
      "description": "Create, update, and delete [context fields](https://docs.getunleash.io/reference/unleash-context) that Unleash is aware of."
    },
    {
      "name": "Dependencies",
      "description": "Manage feature dependencies."
    },
    {
      "name": "Edge",
      "description": "Endpoints related to Unleash on the Edge."
    },
    {
      "name": "Environments",
      "description": "Create, update, delete, enable or disable [environments](https://docs.getunleash.io/reference/environments) for this Unleash instance."
    },
    {
      "name": "Events",
      "description": "Read events from this Unleash instance."
    },
    {
      "name": "Feature Types",
      "description": "Manage [feature flag types](https://docs.getunleash.io/reference/feature-toggle-types)."
    },
    {
      "name": "Features",
      "description": "Create, update, and delete [feature flags](https://docs.getunleash.io/reference/feature-toggles)."
    },
    {
      "name": "Frontend API",
      "description": "API for connecting client-side (frontend) applications to Unleash."
    },
    {
      "name": "Import/Export",
      "description": "[Import and export](https://docs.getunleash.io/how-to/how-to-environment-import-export) the state of your Unleash instance."
    },
    {
      "name": "Instance Admin",
      "description": "Instance admin endpoints used to manage the Unleash instance itself."
    },
    {
      "name": "Maintenance",
      "description": "Enable/disable the maintenance mode of Unleash."
    },
    {
      "name": "Metrics",
      "description": "Register, read, or delete metrics recorded by Unleash."
    },
    {
      "name": "Notifications",
      "description": "API for managing [notifications](https://docs.getunleash.io/reference/notifications)."
    },
    {
      "name": "Operational",
      "description": "Endpoints related to the operational status of this Unleash instance."
    },
    {
      "name": "Personal access tokens",
      "description": "Create, update, and delete [Personal access tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens)."
    },
    {
      "name": "Playground",
      "description": "Evaluate an Unleash context against your feature flags."
    },
    {
      "name": "Projects",
      "description": "Create, update, and delete [Unleash projects](https://docs.getunleash.io/reference/projects)."
    },
    {
      "name": "Public signup tokens",
      "description": "Create, update, and delete [Unleash Public Signup tokens](https://docs.getunleash.io/reference/public-signup-tokens)."
    },
    {
      "name": "Search",
      "description": "Search for features."
    },
    {
      "name": "Segments",
      "description": "Create, update, delete, and manage [segments](https://docs.getunleash.io/reference/segments)."
    },
    {
      "name": "Service Accounts",
      "description": "Endpoints for managing [Service Accounts](https://docs.getunleash.io/reference/service-accounts), which enable programmatic access to the Unleash API."
    },
    {
      "name": "Strategies",
      "description": "Create, update, delete, manage [custom strategies](https://docs.getunleash.io/reference/custom-activation-strategies)."
    },
    {
      "name": "Tags",
      "description": "Create, update, and delete [tags and tag types](https://docs.getunleash.io/reference/tags)."
    },
    {
      "name": "Telemetry",
      "description": "API for information about telemetry collection"
    },
    {
      "name": "Unstable",
      "description": "Experimental endpoints that may change or disappear at any time."
    },
    {
      "name": "Users",
      "description": "Manage users and passwords."
    }
  ],
  "paths": {
    "/auth/simple/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log in",
        "description": "Logs in the user and creates an active session",
        "operationId": "login",
        "requestBody": {
          "description": "loginSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loginSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "userSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/auth/saml/settings": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get SAML auth settings",
        "description": "Returns the current settings for SAML authentication",
        "operationId": "getSamlSettings",
        "responses": {
          "200": {
            "description": "samlSettingsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/samlSettingsSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "setSamlSettings",
        "summary": "Update SAML auth settings",
        "description": "Updates the settings for SAML Authentication",
        "requestBody": {
          "description": "samlSettingsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/samlSettingsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "samlSettingsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/samlSettingsSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/auth/oidc/settings": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get OIDC auth settings",
        "description": "Returns the current settings for OIDC Authentication",
        "operationId": "getOidcSettings",
        "responses": {
          "200": {
            "description": "oidcSettingsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oidcSettingsSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "setOidcSettings",
        "summary": "Set OIDC settings",
        "description": "Configure OpenID Connect as a login provider for Unleash.",
        "requestBody": {
          "description": "oidcSettingsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/oidcSettingsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "oidcSettingsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oidcSettingsSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/auth/simple/settings": {
      "get": {
        "tags": [
          "Auth"
        ],
        "operationId": "getSimpleSettings",
        "summary": "Get Simple auth settings",
        "description": "Is simple authentication (username/password) enabled for this server",
        "responses": {
          "200": {
            "description": "passwordAuthSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/passwordAuthSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "setSimpleSettings",
        "summary": "Update Simple auth settings",
        "description": "Enable or disable simple authentication (username/password)",
        "requestBody": {
          "description": "passwordAuthSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/passwordAuthSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "passwordAuthSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/passwordAuthSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/groups": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getGroups",
        "summary": "Get a list of groups",
        "description": "Get a list of user groups for Role-Based Access Control",
        "responses": {
          "200": {
            "description": "groupsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "createGroup",
        "summary": "Create a new group",
        "description": "Create a new user group for Role-Based Access Control",
        "requestBody": {
          "description": "createGroupSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createGroupSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/groups/{groupId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getGroup",
        "summary": "Get a single group",
        "description": "Get a single user group by group id",
        "responses": {
          "200": {
            "description": "groupSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "operationId": "updateGroup",
        "summary": "Update a group",
        "description": "Update existing user group by group id. It overrides previous group details.",
        "requestBody": {
          "description": "createGroupSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createGroupSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "groupSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "operationId": "deleteGroup",
        "summary": "Delete a single group",
        "description": "Delete a single user group by group id",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getRoles",
        "summary": "Get a list of roles",
        "description": "Get a list of project, root and custom roles for Role-Based Access Control",
        "responses": {
          "200": {
            "description": "rolesWithVersionSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rolesWithVersionSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "createRole",
        "summary": "Create a new role",
        "description": "Create a new custom role for Role-Based Access Control",
        "requestBody": {
          "description": "createRoleWithPermissionsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createRoleWithPermissionsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "roleWithVersionSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/roleWithVersionSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/roles/{roleId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getRoleById",
        "summary": "Get a single role",
        "description": "Get a single role by role id",
        "responses": {
          "200": {
            "description": "roleWithPermissionsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/roleWithPermissionsSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "operationId": "updateRole",
        "summary": "Update a role",
        "description": "Update a custom role by role id",
        "requestBody": {
          "description": "createRoleWithPermissionsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createRoleWithPermissionsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "roleWithVersionSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/roleWithVersionSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "operationId": "deleteRole",
        "summary": "Delete a custom role",
        "description": "Delete a custom role by id. You cannot delete built-in roles or roles that are in use.",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/roles/validate": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "validateRole",
        "summary": "Validate a role",
        "description": "Check if the role matches schema and has a unique name",
        "requestBody": {
          "description": "createRoleWithPermissionsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createRoleWithPermissionsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/environments": {
      "post": {
        "summary": "Creates a new environment",
        "description": "Uses the details provided in the payload to create a new environment",
        "tags": [
          "Environments"
        ],
        "operationId": "createEnvironment",
        "requestBody": {
          "description": "createEnvironmentSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createEnvironmentSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environmentSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get all environments",
        "description": "Retrieves all environments that exist in this Unleash instance.",
        "operationId": "getAllEnvironments",
        "responses": {
          "200": {
            "description": "environmentsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environmentsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/environments/validate": {
      "post": {
        "summary": "Validates if an environment name exists",
        "description": "Uses the name provided in the body of the request to validate if the given name exists or not",
        "tags": [
          "Environments"
        ],
        "operationId": "validateEnvironmentName",
        "requestBody": {
          "description": "nameSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nameSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/environments/update/{name}": {
      "put": {
        "summary": "Updates an environment by name",
        "description": "Given an environment by name updates the environment with the given payload. Note that `name`, `enabled` and `protected` cannot be changed by this API",
        "tags": [
          "Environments"
        ],
        "operationId": "updateEnvironment",
        "requestBody": {
          "description": "updateEnvironmentSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateEnvironmentSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "environmentSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environmentSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/environments/{name}": {
      "delete": {
        "summary": "Deletes an environment by name",
        "description": "Given an existing environment by name, this endpoint will attempt to delete it",
        "tags": [
          "Environments"
        ],
        "operationId": "removeEnvironment",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "Environments"
        ],
        "operationId": "getEnvironment",
        "summary": "Get the environment with `name`",
        "description": "Retrieves the environment with `name` if it exists in this Unleash instance",
        "responses": {
          "200": {
            "description": "environmentSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environmentSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/environments/{name}/clone": {
      "post": {
        "summary": "Clones an environment",
        "description": "Given an existing environment name and a set of options, this will create a copy of that environment",
        "tags": [
          "Environments"
        ],
        "operationId": "cloneEnvironment",
        "requestBody": {
          "description": "cloneEnvironmentSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloneEnvironmentSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "environmentSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environmentSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/change-requests/config": {
      "get": {
        "summary": "Retrieves change request configuration for a project",
        "description": "Given a projectId, this endpoint will retrieve change request configuration for the project",
        "tags": [
          "Change Requests"
        ],
        "operationId": "getProjectChangeRequestConfig",
        "responses": {
          "200": {
            "description": "changeRequestConfigSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changeRequestConfigSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/environments/{environment}/change-requests/config": {
      "put": {
        "summary": "Updates change request configuration for an environment in the project",
        "description": "This endpoint will change the change request configuration for a given environment, set it to either on/off and optionally configure the number of approvals needed. The minimum number of approvals is 1 and the maximum number is 10. If you provide a number higher than 10 or lower than 1, Unleash will clamp it to the allowed range.",
        "tags": [
          "Change Requests"
        ],
        "operationId": "updateProjectChangeRequestConfig",
        "requestBody": {
          "description": "updateChangeRequestEnvironmentConfigSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateChangeRequestEnvironmentConfigSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/change-requests/scheduled": {
      "get": {
        "summary": "Get scheduled change requests matching a query.",
        "description": "This endpoint retrieves basic information about all scheduled change requests that match the search criteria provided in the query parameters. The endpoint will return any change request that matches one or more of the provided parameters. If you use no query parameters, you'll get an empty list.\n\nFor instance, to find all the scheduled change requests that either touch feature `MyFeature` or strategy `0D198067-7D55-460C-9EC7-DB86E3AE261A`, you would use the query string `feature=MyFeature&strategyId=0D198067-7D55-460C-9EC7-DB86E3AE261A`.",
        "tags": [
          "Change Requests"
        ],
        "operationId": "getScheduledChangeRequests",
        "responses": {
          "200": {
            "description": "changeRequestScheduledResultSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changeRequestScheduledResultSchema"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/environments/{environment}/change-requests": {
      "post": {
        "summary": "Create/Add change to a change request",
        "description": "Given a change request exists, this endpoint will attempt to add a change to\n                         an existing change request for the user. If a change request does not exist.\n                         It will attempt to create it.",
        "tags": [
          "Change Requests"
        ],
        "operationId": "changeRequest",
        "requestBody": {
          "description": "changeRequestOneOrManyCreateSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changeRequestOneOrManyCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "changeRequestSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changeRequestSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/change-requests/count": {
      "get": {
        "summary": "Retrieves number of project change requests in each state",
        "description": "This endpoint will retrieve the number of project change requests that are: approved, applied, rejected, scheduled or awaiting review",
        "tags": [
          "Change Requests"
        ],
        "operationId": "getChangeRequestsCount",
        "responses": {
          "200": {
            "description": "changeRequestsCountSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changeRequestsCountSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/change-requests/open": {
      "get": {
        "summary": "Retrieves pending change requests in configured environments",
        "description": "This endpoint will retrieve the pending change requests in the configured environments for the project, for the current user performing the request.",
        "tags": [
          "Change Requests"
        ],
        "operationId": "getOpenChangeRequestsForUser",
        "responses": {
          "200": {
            "description": "changeRequestsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changeRequestsSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/change-requests/pending": {
      "get": {
        "summary": "Retrieves pending change requests in configured environments",
        "description": "This endpoint will retrieve the pending change requests in the configured environments for the project, for the current user performing the request.",
        "tags": [
          "Change Requests"
        ],
        "operationId": "getPendingChangeRequestsForUser",
        "responses": {
          "200": {
            "description": "changeRequestsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changeRequestsSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/change-requests": {
      "get": {
        "summary": "Retrieves all change requests for a project",
        "description": "This endpoint will retrieve all change requests regardless of status for a given project. There's an upper limit of last 300 change requests ordered by creation date.",
        "tags": [
          "Change Requests"
        ],
        "operationId": "getChangeRequestsForProject",
        "responses": {
          "200": {
            "description": "changeRequestsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changeRequestsSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/change-requests/pending/{featureName}": {
      "get": {
        "summary": "Retrieves all pending change requests referencing a feature in the project",
        "description": "This endpoint will retrieve all pending change requests (change requests with a status of Draft | In review | Approved) referencing the given feature flag name.",
        "tags": [
          "Change Requests"
        ],
        "operationId": "getPendingChangeRequestsForFeature",
        "responses": {
          "200": {
            "description": "changeRequestsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changeRequestsSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/change-requests/{id}": {
      "get": {
        "summary": "Retrieves one change request by id",
        "description": "This endpoint will retrieve one change request if it matches the provided id.",
        "tags": [
          "Change Requests"
        ],
        "operationId": "getChangeRequest",
        "responses": {
          "200": {
            "description": "changeRequestSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changeRequestSchema"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "summary": "Deletes a change request by id",
        "description": "This endpoint will delete one change request if it matches the provided id.",
        "tags": [
          "Change Requests"
        ],
        "operationId": "deleteChangeRequest",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/change-requests/{changeRequestId}/changes/{changeId}": {
      "delete": {
        "summary": "Discards a change from a change request by change id",
        "description": "This endpoint will discard one change from a change request if it matches the provided id.",
        "tags": [
          "Change Requests"
        ],
        "operationId": "deleteChange",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changeRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "summary": "Edits a single change in a change request",
        "description": "This endpoint will edit one change from a change request if it matches the provided id. The edit removes previous change and inserts a new one. You\n                    should not rely on the changeId for subsequent edits and always check the most recent changeId.",
        "tags": [
          "Change Requests"
        ],
        "operationId": "editChange",
        "requestBody": {
          "description": "changeRequestCreateSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changeRequestCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "changeRequestSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changeRequestSchema"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changeRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/change-requests/{id}/state": {
      "put": {
        "summary": "This endpoint will update the state of a change request",
        "description": "This endpoint will update the state of a change request if the business rules allow it. The state can be one of the following: Draft, In review, Approved, Cancelled, Applied. In order to be approved, the change request must have at least one change and the number of approvals must be greater than or equal to the number of approvals required for the environment.\n\n                    Once a change request has been approved, it can be applied. Once a change request has been applied, it cannot be changed. Once a change request has been cancelled, it cannot be changed. Any change to a change request in the state of Approved will result in the state being set to In Review and the number of approvals will be reset.",
        "tags": [
          "Change Requests"
        ],
        "operationId": "updateChangeRequestState",
        "responses": {
          "200": {
            "description": "changeRequestStateSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changeRequestStateSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/change-requests/{id}/title": {
      "put": {
        "summary": "This endpoint will update the custom title of a change request",
        "description": "Change requests get a default title e.g. Change Request #1. This endpoint allows to make the title\n                    more meaningful and describe the intent behind the Change Request",
        "tags": [
          "Change Requests"
        ],
        "operationId": "updateChangeRequestTitle",
        "responses": {
          "204": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/change-requests/{id}/comments": {
      "post": {
        "summary": "This endpoint will add a comment to a change request",
        "description": "This endpoint will add a comment to a change request for the user making the request.",
        "tags": [
          "Change Requests"
        ],
        "operationId": "addChangeRequestComment",
        "requestBody": {
          "description": "changeRequestAddCommentSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changeRequestAddCommentSchema"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/playground/change-request/{id}": {
      "post": {
        "operationId": "getChangeRequestPlayground",
        "tags": [
          "Playground"
        ],
        "responses": {
          "200": {
            "description": "advancedPlaygroundResponseSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/advancedPlaygroundResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "changeRequestPlaygroundRequestSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changeRequestPlaygroundRequestSchema"
              }
            }
          }
        },
        "description": "Use the provided `context` to evaluate toggles on this Unleash instance with a change request applied in preview mode. You can use comma-separated values to provide multiple values to each context field. Returns a combinatorial list of all toggles that match the parameters and what they evaluate to.",
        "summary": "Evaluate an Unleash context against a change request preview.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/service-account": {
      "get": {
        "tags": [
          "Service Accounts"
        ],
        "operationId": "getServiceAccounts",
        "summary": "List service accounts.",
        "description": "Returns the list of all service accounts.",
        "responses": {
          "200": {
            "description": "#/components/schemas/serviceAccountsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serviceAccountsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Service Accounts"
        ],
        "operationId": "createServiceAccount",
        "summary": "Create a service account.",
        "description": "Creates a new service account.",
        "requestBody": {
          "description": "#/components/schemas/createServiceAccountSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createServiceAccountSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serviceAccountSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/service-account/{id}": {
      "put": {
        "tags": [
          "Service Accounts"
        ],
        "operationId": "updateServiceAccount",
        "summary": "Update a service account.",
        "description": "Updates an existing service account identified by its id.",
        "requestBody": {
          "description": "#/components/schemas/updateServiceAccountSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateServiceAccountSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "#/components/schemas/serviceAccountSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serviceAccountSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Service Accounts"
        ],
        "operationId": "deleteServiceAccount",
        "summary": "Delete a service account.",
        "description": "Deletes an existing service account identified by its id.",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/service-account/{id}/token": {
      "get": {
        "tags": [
          "Service Accounts"
        ],
        "operationId": "getServiceAccountTokens",
        "summary": "List all tokens for a service account.",
        "description": "Returns the list of all tokens for a service account identified by the id.",
        "responses": {
          "200": {
            "description": "#/components/schemas/patsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/patsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "Service Accounts"
        ],
        "operationId": "createServiceAccountToken",
        "summary": "Create a token for a service account.",
        "description": "Creates a new token for the service account identified by the id.",
        "requestBody": {
          "description": "#/components/schemas/createPatSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createPatSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/patSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/service-account/{id}/token/{tokenId}": {
      "delete": {
        "tags": [
          "Service Accounts"
        ],
        "operationId": "deleteServiceAccountToken",
        "summary": "Delete a token for a service account.",
        "description": "Deletes a token for the service account identified both by the service account's id and the token's id.",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/service-account/{id}/permissions": {
      "get": {
        "tags": [
          "Auth"
        ],
        "operationId": "getServiceAccountPermissions",
        "summary": "Returns the list of permissions for the service account.",
        "description": "Gets a list of permissions for a service account. Project and environment can be specified.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/feedback": {
      "get": {
        "tags": [
          "Unstable"
        ],
        "operationId": "getFeedback",
        "responses": {
          "200": {
            "description": "feedbackListSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/feedbackListSchema"
                }
              }
            }
          }
        },
        "description": "Get all feedback events.",
        "summary": "Get all feedback events."
      },
      "post": {
        "tags": [
          "Admin UI"
        ],
        "operationId": "createFeedback",
        "summary": "Send Unleash feedback",
        "description": "Sends feedback gathered from the Unleash UI to the Unleash server. Must be called with a token with an identifiable user (either from being sent from the UI or from using a [PAT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens)).",
        "requestBody": {
          "description": "feedbackCreateSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/feedbackCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "feedbackResponseSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/feedbackResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/feedback": {
      "post": {
        "summary": "Submit user feedback",
        "description": "Allows users to submit feedback.",
        "tags": [
          "Unstable"
        ],
        "operationId": "provideFeedback",
        "requestBody": {
          "description": "provideFeedbackSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/provideFeedbackSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "feedbackSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/feedbackSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/features-batch/export": {
      "post": {
        "tags": [
          "Import/Export"
        ],
        "operationId": "exportFeatures",
        "requestBody": {
          "description": "exportQuerySchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/exportQuerySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "exportResultSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exportResultSchema"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Exports all features listed in the `features` property from the environment specified in the request body. If set to `true`, the `downloadFile` property will let you download a file with the exported data. Otherwise, the export data is returned directly as JSON. Refer to the documentation for more information about [Unleash's export functionality](https://docs.getunleash.io/reference/deploy/environment-import-export#export).",
        "summary": "Export feature flags from an environment"
      }
    },
    "/api/admin/features-batch/validate": {
      "post": {
        "tags": [
          "Import/Export"
        ],
        "operationId": "validateImport",
        "requestBody": {
          "description": "importTogglesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/importTogglesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "importTogglesValidateSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/importTogglesValidateSchema"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Validate feature import data",
        "description": "Validates a feature flag data set. Checks whether the data can be imported into the specified project and environment. The returned value is an object that contains errors, warnings, and permissions required to perform the import, as described in the [import documentation](https://docs.getunleash.io/reference/deploy/environment-import-export#import)."
      }
    },
    "/api/admin/features-batch/import": {
      "post": {
        "tags": [
          "Import/Export"
        ],
        "operationId": "importToggles",
        "requestBody": {
          "description": "importTogglesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/importTogglesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Import feature flags",
        "description": "[Import feature flags](https://docs.getunleash.io/reference/deploy/environment-import-export#import) into a specific project and environment."
      }
    },
    "/api/admin/logins": {
      "get": {
        "tags": [
          "Instance Admin"
        ],
        "operationId": "getLoginHistory",
        "responses": {
          "200": {
            "description": "loginHistorySchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loginHistorySchema"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Returns **all** login events in the Unleash system. You can optionally get them in CSV format by specifying the `Accept` header as `text/csv`.",
        "summary": "Get all login events."
      }
    },
    "/api/admin/access/overview": {
      "get": {
        "tags": [
          "Auth"
        ],
        "operationId": "getAccessOverview",
        "summary": "Gets access overview",
        "description": "Gets an overview of what access all users have to all projects and groups",
        "responses": {
          "200": {
            "description": "accessOverviewSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessOverviewSchema"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/banners": {
      "get": {
        "tags": [
          "Banners"
        ],
        "operationId": "getBanners",
        "summary": "Get all banners.",
        "description": "Returns a list of all configured banners.",
        "responses": {
          "200": {
            "description": "bannersSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bannersSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Banners"
        ],
        "operationId": "createBanner",
        "summary": "Create a banner.",
        "description": "Creates a new banner.",
        "requestBody": {
          "description": "createBannerSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createBannerSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bannerSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/banners/{id}": {
      "put": {
        "tags": [
          "Banners"
        ],
        "operationId": "updateBanner",
        "summary": "Update a banner.",
        "description": "Updates an existing banner identified by its id.",
        "requestBody": {
          "description": "createBannerSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createBannerSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "bannerSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bannerSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Banners"
        ],
        "operationId": "deleteBanner",
        "summary": "Delete a banner.",
        "description": "Deletes an existing banner identified by its id.",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/banners/{id}/on": {
      "post": {
        "tags": [
          "Banners"
        ],
        "operationId": "enableBanner",
        "summary": "Enables a banner.",
        "description": "Enables an existing banner, identified by its id.",
        "responses": {
          "200": {
            "description": "bannerSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bannerSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/banners/{id}/off": {
      "post": {
        "tags": [
          "Banners"
        ],
        "operationId": "disableBanner",
        "summary": "Disables a banner.",
        "description": "Disables an existing banner, identified by its id.",
        "responses": {
          "200": {
            "description": "bannerSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bannerSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/license/check": {
      "get": {
        "tags": [
          "Instance Admin"
        ],
        "operationId": "checkLicense",
        "summary": "Validates the Unleash license.",
        "description": "Validates the Unleash license.",
        "responses": {
          "200": {
            "description": "licenseCheckSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/licenseCheckSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/license": {
      "get": {
        "tags": [
          "Instance Admin"
        ],
        "summary": "Reads the Unleash license.",
        "description": "Reads the Unleash license. Only available for self-hosted Enterprise customers.",
        "operationId": "readLicense",
        "responses": {
          "200": {
            "description": "licenseReadSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/licenseReadSchema"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Instance Admin"
        ],
        "operationId": "updateLicense",
        "summary": "Set a new Unleash license.",
        "description": "Set a new Unleash license. Only available for self-hosted Enterprise customers.",
        "requestBody": {
          "description": "licenseUpdateSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/licenseUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/licenseReadSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/scim-settings": {
      "get": {
        "tags": [
          "Unstable"
        ],
        "operationId": "getScimSettings",
        "summary": "Get SCIM settings.",
        "description": "Returns the current settings for SCIM provisioning.",
        "responses": {
          "200": {
            "description": "#/components/schemas/scimSettingsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scimSettingsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Unstable"
        ],
        "operationId": "setScimSettings",
        "summary": "Set SCIM settings.",
        "description": "Sets new settings for SCIM provisioning.",
        "requestBody": {
          "description": "#/components/schemas/setScimSettingsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setScimSettingsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/scim-settings/generate-new-token": {
      "post": {
        "tags": [
          "Unstable"
        ],
        "operationId": "generateNewToken",
        "summary": "Generates a new SCIM API token.",
        "description": "Generates a new SCIM API token. Previously generated tokens will be invalidated.",
        "responses": {
          "200": {
            "description": "#/components/schemas/scimTokenSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scimTokenSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "getProjects",
        "summary": "Get a list of all projects.",
        "description": "This endpoint returns an list of all the projects in the Unleash instance.",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "projectsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "operationId": "createProject",
        "summary": "Create project",
        "description": "Create a new [Unleash project](https://docs.getunleash.io/reference/projects).",
        "requestBody": {
          "description": "createProjectSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createProjectSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectCreatedSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/projects/validate": {
      "post": {
        "tags": [
          "Projects"
        ],
        "operationId": "validateProject",
        "summary": "Validate project ID",
        "description": "Validate a project ID against Unleash's rules",
        "requestBody": {
          "description": "validateProjectSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/validateProjectSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/projects/{projectId}": {
      "put": {
        "tags": [
          "Projects"
        ],
        "operationId": "updateProject",
        "summary": "Update project",
        "description": "Update a project with new configuration. Any fields not provided are ignored.",
        "requestBody": {
          "description": "updateProjectSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateProjectSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete project",
        "description": "Permanently delete the provided project. All feature flags in the project must be archived before you can delete it. This permanently deletes the project and its archived flags. It can not be undone.",
        "operationId": "deleteProject",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "getDeprecatedProjectOverview",
        "summary": "Get an overview of a project. (deprecated)",
        "deprecated": true,
        "description": "This endpoint returns an overview of the specified projects stats, project health, number of members, which environments are configured, and the features in the project.",
        "responses": {
          "200": {
            "description": "deprecatedProjectOverviewSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deprecatedProjectOverviewSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/settings": {
      "put": {
        "tags": [
          "Projects"
        ],
        "operationId": "updateProjectEnterpriseSettings",
        "summary": "Update project enterprise settings",
        "description": "Update project enterprise settings with new values. Any fields not provided are ignored.",
        "requestBody": {
          "description": "updateProjectEnterpriseSettingsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateProjectEnterpriseSettingsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/archive/{projectId}": {
      "post": {
        "tags": [
          "Unstable"
        ],
        "summary": "Archive project",
        "description": "Archive the provided project. All feature flags in the project must be either unused or archived before you can archive the project.",
        "operationId": "archiveProject",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/revive/{projectId}": {
      "post": {
        "tags": [
          "Unstable"
        ],
        "summary": "Revive project",
        "description": "Revive the specified project from the archive.",
        "operationId": "reviveProject",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/users": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get users in project",
        "description": "Get users belonging to a project together with their roles as well as a list of roles available to the project. This endpoint is deprecated. Use `/:projectId/access` instead.",
        "operationId": "getProjectUsers",
        "responses": {
          "200": {
            "description": "projectUsersSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectUsersSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/access": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get users and groups in project",
        "description": "Get all groups, users and their roles, and available roles for the given project.",
        "operationId": "getProjectAccess",
        "responses": {
          "200": {
            "description": "projectAccessSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectAccessSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Set users and groups to roles in the current project",
        "description": "Sets all groups, users and their roles for the given project, overriding any existing configuration.",
        "operationId": "setProjectAccess",
        "requestBody": {
          "description": "projectAccessConfigurationSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/projectAccessConfigurationSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Configure project access",
        "description": "Configure project access for groups and single users. The provided users and groups will be given the roles specified in the payload.",
        "operationId": "addAccessToProject",
        "requestBody": {
          "description": "projectAddAccessSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/projectAddAccessSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/roles/{roleId}/access": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get project-role mappings",
        "description": "For the provided role, retrieves a list of projects that use this role. For each project it also contains information about how the role used in that project, such as how many users, groups, or service accounts that use the role.",
        "operationId": "getRoleProjectAccess",
        "responses": {
          "200": {
            "description": "projectRoleUsageSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectRoleUsageSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/users/{userId}/roles/{roleId}": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Add user to project",
        "description": "Adds the specified user to a project with the provided role. This endpoint is deprecated. Use `/:projectId/access` instead.",
        "operationId": "addRoleToUser",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Removes role from user",
        "description": "Remove the specified project role from the specified user. This endpoint is deprecated. Use `/:projectId/users/:userId/roles` instead.",
        "operationId": "removeRoleForUser",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update user's project role",
        "description": "Replaces the given user's project role with the provided role. The user must already be a memeber of the project. This endpoint is deprecated. Use `/:projectId/users/:userId/roles` instead.",
        "operationId": "changeRoleForUser",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/users/{userId}/roles": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Sets roles for user",
        "description": "Sets the roles a user has in the project.",
        "operationId": "setRolesForUser",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Remove project access for a user",
        "description": "Removes project access for a user by removing all of its roles for the project.",
        "operationId": "removeUserAccess",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/groups/{groupId}/roles": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Sets roles for group",
        "description": "Sets the roles a group has in the project.",
        "operationId": "setRolesForGroup",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Remove project access for a group",
        "description": "Removes project access for a group by removing all of its roles for the project.",
        "operationId": "removeGroupAccess",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/groups/{groupId}/roles/{roleId}": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update group's project role",
        "description": "Updates the permissions that the group has within the given project. This endpoint is deprecated. Use `/:projectId/users/:userId/roles` instead.",
        "operationId": "changeRoleForGroup",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Remove project group role",
        "description": "Removes a project role from a group. This endpoint is deprecated. Use `/:projectId/groups/:groupId/roles` instead.",
        "operationId": "removeRoleFromGroup",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/role/{roleId}/access": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Configure project role access",
        "description": "Configure project access for groups and single users. The provided users and groups will be given the role specified in the URL parameters. This endpoint is deprecated. Use `/:projectId/access` instead.",
        "operationId": "addRoleAccessToProject",
        "requestBody": {
          "description": "projectAddRoleAccessSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/projectAddRoleAccessSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/changeProject": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "changeProject",
        "summary": "Move feature to project",
        "description": "Moves the specified feature to the new project in the request schema. Requires you to have permissions to move the feature flag in both projects. Features that are included in any active change requests can not be moved.",
        "requestBody": {
          "description": "changeProjectSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changeProjectSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/permissions": {
      "get": {
        "tags": [
          "Auth"
        ],
        "operationId": "getPermissions",
        "summary": "Gets available permissions",
        "description": "Returns a list of available permissions",
        "responses": {
          "200": {
            "description": "adminPermissionsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminPermissionsSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/metrics/rps": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "operationId": "getRequestsPerSecond",
        "summary": "Gets usage data",
        "description": "Gets usage data per app/endpoint from a prometheus compatible metrics endpoint",
        "responses": {
          "200": {
            "description": "requestsPerSecondSegmentedSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/requestsPerSecondSegmentedSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/metrics/traffic/{period}": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "operationId": "getTrafficUsageDataForPeriod",
        "summary": "Gets traffic usage data for selected period",
        "description": "Gets traffic usage data numbers per API for a period given by the parameter",
        "responses": {
          "200": {
            "description": "trafficUsageDataSegmentedSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/trafficUsageDataSegmentedSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "period",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/notifications": {
      "get": {
        "summary": "Retrieves a list of notifications",
        "description": "A user may get relevant notifications from the projects they are a member of",
        "tags": [
          "Notifications"
        ],
        "operationId": "getNotifications",
        "responses": {
          "200": {
            "description": "notificationsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationsSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/notifications/read": {
      "post": {
        "summary": "Mark notifications as read",
        "description": "Allow to select which notifications were read and saving a read date",
        "tags": [
          "Notifications"
        ],
        "operationId": "markNotificationsAsRead",
        "requestBody": {
          "description": "markNotificationsAsReadSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/markNotificationsAsReadSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        }
      }
    },
    "/api/admin/insights": {
      "get": {
        "tags": [
          "Unstable"
        ],
        "operationId": "getInstanceInsights",
        "responses": {
          "200": {
            "description": "instanceInsightsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/instanceInsightsSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "schema": {
              "type": "string",
              "example": "2024-01-01"
            },
            "description": "The beginning of the date range in yyyy-MM-dd format",
            "in": "query"
          },
          {
            "name": "to",
            "schema": {
              "type": "string",
              "example": "2024-01-31"
            },
            "description": "The end of the date range in yyyy-MM-dd format",
            "in": "query"
          }
        ],
        "summary": "Get instance information",
        "description": "Gets high level information about the usage of this Unleash instance, including user, project, and flag information."
      }
    },
    "/api/admin/dashboard/executive": {
      "get": {
        "tags": [
          "Unstable"
        ],
        "operationId": "deprecatedGetInstanceInsights",
        "deprecated": true,
        "responses": {
          "200": {
            "description": "instanceInsightsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/instanceInsightsSchema"
                }
              }
            }
          }
        },
        "summary": "Get instance information",
        "description": "Gets high level information about the usage of this Unleash instance, including user, project, and flag information. This endpoint is deprecated and will be removed in a future minor version. Please use `/api/admin/insights` instead."
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Operational"
        ],
        "operationId": "getHealth",
        "summary": "Get instance operational status",
        "description": "This operation returns information about whether this Unleash instance is healthy and ready to serve requests or not. Typically used by your deployment orchestrator (e.g. Kubernetes, Docker Swarm, Mesos, et al.).",
        "responses": {
          "200": {
            "description": "healthCheckSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/healthCheckSchema"
                }
              }
            }
          },
          "500": {
            "description": "healthCheckSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/healthCheckSchema"
                }
              }
            }
          }
        }
      }
    },
    "/invite/{token}/validate": {
      "get": {
        "tags": [
          "Public signup tokens"
        ],
        "operationId": "validatePublicSignupToken",
        "summary": "Validate signup token",
        "description": "Check whether the provided public sign-up token exists, has not expired and is enabled",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/invite/{token}/signup": {
      "post": {
        "tags": [
          "Public signup tokens"
        ],
        "operationId": "addPublicSignupTokenUser",
        "summary": "Add a user via a signup token",
        "description": "Create a user with the viewer root role and link them to the provided signup token",
        "requestBody": {
          "description": "createInvitedUserSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createInvitedUserSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "userSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/auth/reset/validate": {
      "get": {
        "summary": "Validates a token",
        "description": "If the token is valid returns the user that owns the token",
        "tags": [
          "Auth"
        ],
        "operationId": "validateToken",
        "responses": {
          "200": {
            "description": "tokenUserSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tokenUserSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset/password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Changes a user password",
        "description": "Allows users with a valid reset token to reset their password without remembering their old password",
        "operationId": "changePassword",
        "requestBody": {
          "description": "changePasswordSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changePasswordSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset/validate-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Validates password",
        "description": "Verifies that the password adheres to the [Unleash password guidelines](https://docs.getunleash.io/reference/deploy/securing-unleash#password-requirements)",
        "operationId": "validatePassword",
        "requestBody": {
          "description": "validatePasswordSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/validatePasswordSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset/password-email": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset password",
        "description": "Requests a password reset email for the user. This email can be used to reset the password for a user that has forgotten their password",
        "operationId": "sendResetPasswordEmail",
        "requestBody": {
          "description": "emailSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emailSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/features/validate": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "validateFeature",
        "summary": "Validate a feature flag name.",
        "requestBody": {
          "description": "validateFeatureSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/validateFeatureSchema"
              }
            }
          }
        },
        "description": "Validates a feature flag name: checks whether the name is URL-friendly and whether a feature with the given name already exists. Returns 200 if the feature name is compliant and unused.",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/features/{featureName}/tags": {
      "get": {
        "summary": "Get all tags for a feature.",
        "description": "Retrieves all the tags for a feature name. If the feature does not exist it returns an empty list.",
        "tags": [
          "Features"
        ],
        "operationId": "listTags",
        "responses": {
          "200": {
            "description": "tagsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "summary": "Adds a tag to a feature.",
        "description": "Adds a tag to a feature if the feature and tag type exist in the system. The operation is idempotent, so adding an existing tag will result in a successful response.",
        "tags": [
          "Features"
        ],
        "operationId": "addTag",
        "requestBody": {
          "description": "tagSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "summary": "Updates multiple tags for a feature.",
        "description": "Receives a list of tags to add and a list of tags to remove that are mandatory but can be empty. All tags under addedTags are first added to the feature and then all tags under removedTags are removed from the feature.",
        "tags": [
          "Features"
        ],
        "operationId": "updateTags",
        "requestBody": {
          "description": "updateTagsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateTagsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagsSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/features/{featureName}/tags/{type}/{value}": {
      "delete": {
        "summary": "Removes a tag from a feature.",
        "description": "Removes a tag from a feature. If the feature exists but the tag does not, it returns a successful response.",
        "tags": [
          "Features"
        ],
        "operationId": "removeTag",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/feature-types": {
      "get": {
        "tags": [
          "Feature Types"
        ],
        "operationId": "getAllFeatureTypes",
        "summary": "Get all feature types",
        "description": "Retrieves all feature types that exist in this Unleash instance, along with their descriptions and lifetimes.",
        "responses": {
          "200": {
            "description": "featureTypesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypesSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/feature-types/{id}/lifetime": {
      "put": {
        "tags": [
          "Feature Types"
        ],
        "operationId": "updateFeatureTypeLifetime",
        "summary": "Update feature type lifetime",
        "description": "Updates the lifetime configuration for the specified [feature flag type](https://docs.getunleash.io/reference/feature-toggle-types). The expected lifetime is an integer representing the number of days before Unleash marks a feature flag of that type as potentially stale. If set to `null` or `0`, then feature flags of that particular type will never be marked as potentially stale.\n\nWhen a feature flag type's expected lifetime is changed, this will also cause any feature flags of this type to be reevaluated for potential staleness.",
        "responses": {
          "200": {
            "description": "featureTypeSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "updateFeatureTypeLifetimeSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateFeatureTypeLifetimeSchema"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/archive/features": {
      "get": {
        "tags": [
          "Archive"
        ],
        "summary": "Get archived features",
        "description": "Retrieve a list of all [archived feature flags](https://docs.getunleash.io/reference/archived-toggles).",
        "operationId": "getArchivedFeatures",
        "responses": {
          "200": {
            "description": "featuresSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featuresSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/admin/archive/features/{projectId}": {
      "get": {
        "tags": [
          "Archive"
        ],
        "operationId": "getArchivedFeaturesByProjectId",
        "summary": "Get archived features in project",
        "description": "Retrieves a list of archived features that belong to the provided project.",
        "responses": {
          "200": {
            "description": "featuresSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featuresSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/archive/{featureName}": {
      "delete": {
        "tags": [
          "Archive"
        ],
        "description": "This endpoint archives the specified feature.",
        "summary": "Archives a feature",
        "operationId": "deleteFeature",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/archive/revive/{featureName}": {
      "post": {
        "tags": [
          "Archive"
        ],
        "description": "This endpoint revives the specified feature from archive.",
        "summary": "Revives a feature",
        "operationId": "reviveFeature",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/strategies": {
      "get": {
        "summary": "Get all strategies",
        "description": "Retrieves all strategy types ([predefined](https://docs.getunleash.io/reference/activation-strategies \"predefined strategies\") and [custom strategies](https://docs.getunleash.io/reference/custom-activation-strategies)) that are defined on this Unleash instance.",
        "tags": [
          "Strategies"
        ],
        "operationId": "getAllStrategies",
        "responses": {
          "200": {
            "description": "strategiesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/strategiesSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "deprecated": true,
        "tags": [
          "Strategies"
        ],
        "operationId": "createStrategy",
        "summary": "Create a strategy",
        "description": "Creates a custom strategy type based on the supplied data. Custom strategies are deprecated and should not be used. Prefer using built in strategies with constraints instead.",
        "requestBody": {
          "description": "createStrategySchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createStrategySchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/strategySchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/strategies/{name}": {
      "get": {
        "summary": "Get a strategy definition",
        "description": "Retrieves the definition of the strategy specified in the URL",
        "tags": [
          "Strategies"
        ],
        "operationId": "getStrategy",
        "responses": {
          "200": {
            "description": "strategySchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/strategySchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "summary": "Delete a strategy",
        "description": "Deletes the specified strategy definition",
        "tags": [
          "Strategies"
        ],
        "operationId": "removeStrategy",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Strategies"
        ],
        "summary": "Update a strategy type",
        "description": "Updates the specified strategy type. Any properties not specified in the request body are left untouched.",
        "operationId": "updateStrategy",
        "requestBody": {
          "description": "updateStrategySchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateStrategySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/strategies/{strategyName}/deprecate": {
      "post": {
        "tags": [
          "Strategies"
        ],
        "summary": "Deprecate a strategy",
        "description": "Marks the specified strategy as deprecated.",
        "operationId": "deprecateStrategy",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "strategyName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/strategies/{strategyName}/reactivate": {
      "post": {
        "tags": [
          "Strategies"
        ],
        "operationId": "reactivateStrategy",
        "summary": "Reactivate a strategy",
        "description": "Marks the specified strategy as not deprecated. If the strategy wasn't already deprecated, nothing changes.",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "strategyName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/events": {
      "get": {
        "operationId": "getEvents",
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "eventsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "description": "The name of the project whose events you want to retrieve",
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "description": "Returns **the last 100** events from the Unleash instance when called without a query parameter. When called with a `project` parameter, returns **all events** for the specified project.\n\nIf the provided project does not exist, the list of events will be empty.",
        "summary": "Get the most recent events from the Unleash instance or all events related to a project."
      }
    },
    "/api/admin/events/{featureName}": {
      "get": {
        "operationId": "getEventsForToggle",
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "featureEventsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureEventsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Returns all events related to the specified feature flag. If the feature flag does not exist, the list of events will be empty.",
        "summary": "Get all events related to a specific feature flag.",
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/events/search": {
      "post": {
        "operationId": "deprecatedSearchEvents",
        "tags": [
          "Events"
        ],
        "deprecated": true,
        "summary": "Search for events (deprecated)",
        "description": "Allows searching for events matching the search criteria in the request body",
        "requestBody": {
          "description": "deprecatedSearchEventsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deprecatedSearchEventsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "eventsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventsSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/event-creators": {
      "get": {
        "tags": [
          "Events"
        ],
        "operationId": "getEventCreators",
        "summary": "Get a list of all users that have created events",
        "description": "Returns a list of all users that have created events in the system.",
        "responses": {
          "200": {
            "description": "eventCreatorsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventCreatorsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/playground": {
      "post": {
        "operationId": "getPlayground",
        "tags": [
          "Playground"
        ],
        "responses": {
          "200": {
            "description": "playgroundResponseSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playgroundResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "playgroundRequestSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/playgroundRequestSchema"
              }
            }
          }
        },
        "description": "Deprecated. Will be removed in the next Unleash major update. Use the provided `context`, `environment`, and `projects` to evaluate toggles on this Unleash instance. Returns a list of all toggles that match the parameters and what they evaluate to. The response also contains the input parameters that were provided.",
        "summary": "Evaluate an Unleash context against a set of environments and projects."
      }
    },
    "/api/admin/playground/advanced": {
      "post": {
        "operationId": "getAdvancedPlayground",
        "tags": [
          "Playground"
        ],
        "responses": {
          "200": {
            "description": "advancedPlaygroundResponseSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/advancedPlaygroundResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "advancedPlaygroundRequestSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/advancedPlaygroundRequestSchema"
              }
            }
          }
        },
        "description": "Use the provided `context`, `environments`, and `projects` to evaluate toggles on this Unleash instance. You can use comma-separated values to provide multiple values to each context field. Returns a combinatorial list of all toggles that match the parameters and what they evaluate to. The response also contains the input parameters that were provided.",
        "summary": "Batch evaluate an Unleash context against a set of environments and projects."
      }
    },
    "/api/admin/metrics/applications/{appName}": {
      "post": {
        "tags": [
          "Metrics"
        ],
        "operationId": "createApplication",
        "summary": "Create an application to connect reported metrics",
        "description": "Is used to report usage as well which sdk the application uses",
        "responses": {
          "202": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "createApplicationSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createApplicationSchema"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Metrics"
        ],
        "operationId": "deleteApplication",
        "summary": "Delete an application",
        "description": "Delete the application specified in the request URL. Returns 200 OK if the application was successfully deleted or if it didn't exist",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "Metrics"
        ],
        "operationId": "getApplication",
        "summary": "Get application data",
        "description": "Returns data about the specified application (`appName`). The data contains information on the name of the application, sdkVersion (which sdk reported these metrics, typically `unleash-client-node:3.4.1` or `unleash-client-java:7.1.0`), as well as data about how to display this application in a list.",
        "responses": {
          "200": {
            "description": "applicationSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationSchema"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/metrics/applications": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get all applications",
        "description": "Returns all applications registered with Unleash. Applications can be created via metrics reporting or manual creation",
        "parameters": [
          {
            "name": "query",
            "schema": {
              "type": "string",
              "example": "first_app"
            },
            "description": "The search query for the application name",
            "in": "query"
          },
          {
            "name": "offset",
            "schema": {
              "type": "string",
              "example": "50"
            },
            "description": "The number of applications to skip when returning a page. By default it is set to 0.",
            "in": "query"
          },
          {
            "name": "limit",
            "schema": {
              "type": "string",
              "example": "50"
            },
            "description": "The number of applications to return in a page. By default it is set to 1000.",
            "in": "query"
          },
          {
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "type"
            },
            "description": "The field to sort the results by. By default it is set to \"appName\".",
            "in": "query"
          },
          {
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "example": "desc"
            },
            "description": "The sort order for the sortBy. By default it is det to \"asc\".",
            "in": "query"
          }
        ],
        "operationId": "getApplications",
        "responses": {
          "200": {
            "description": "applicationsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationsSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/metrics/applications/{appName}/overview": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "operationId": "getApplicationOverview",
        "summary": "Get application overview",
        "description": "Returns an overview of the specified application (`appName`).",
        "responses": {
          "200": {
            "description": "applicationOverviewSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationOverviewSchema"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/metrics/instances/{appName}/environment/{environment}": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "operationId": "getApplicationEnvironmentInstances",
        "summary": "Get application environment instances",
        "description": "Returns an overview of the instances for the given `appName` and `environment` that receive traffic.",
        "responses": {
          "200": {
            "description": "applicationEnvironmentInstancesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationEnvironmentInstancesSchema"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/metrics/sdks/outdated": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "operationId": "getOutdatedSdks",
        "summary": "Get outdated SDKs",
        "description": "Returns a list of the outdated SDKS with the applications using them.",
        "responses": {
          "200": {
            "description": "outdatedSdksSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/outdatedSdksSchema"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/client-metrics/features/{name}/raw": {
      "get": {
        "operationId": "getRawFeatureMetrics",
        "tags": [
          "Metrics"
        ],
        "summary": "Get feature metrics",
        "description": "Get usage metrics for a specific feature for the last 48 hours, grouped by hour",
        "responses": {
          "200": {
            "description": "featureMetricsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureMetricsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/client-metrics/features/{name}": {
      "get": {
        "operationId": "getFeatureUsageSummary",
        "tags": [
          "Metrics"
        ],
        "summary": "Last hour of usage and a list of applications that have reported seeing this feature flag",
        "description": "Separate counts for yes (enabled), no (disabled), as well as how many times each variant was selected during the last hour",
        "responses": {
          "200": {
            "description": "featureUsageSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureUsageSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/user": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getMe",
        "summary": "Get your own user details",
        "description": "Detailed information about the current user, user permissions and user feedback",
        "responses": {
          "200": {
            "description": "meSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/meSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user/profile": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getProfile",
        "summary": "Get your own user profile",
        "description": "Detailed information about the current user root role and project membership",
        "responses": {
          "200": {
            "description": "profileSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/profileSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user/change-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "changeMyPassword",
        "summary": "Change your own password",
        "description": "Requires specifying old password and confirming new password",
        "requestBody": {
          "description": "passwordSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/passwordSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "Old and new password do not match"
          },
          "401": {
            "description": "Old password is incorrect or user is not authenticated"
          }
        }
      }
    },
    "/api/admin/user/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUserRoles",
        "summary": "Get roles for currently logged in user",
        "parameters": [
          {
            "name": "projectId",
            "description": "The id of the project you want to check permissions for",
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "description": "Gets roles assigned to currently logged in user. Both explicitly and transitively through group memberships",
        "responses": {
          "200": {
            "description": "rolesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rolesSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user/tokens": {
      "get": {
        "tags": [
          "Personal access tokens"
        ],
        "operationId": "getPats",
        "summary": "Get all personal access tokens (PATs) for the current user.",
        "description": "Returns all of the [personal access tokens](https://docs.getunleash.io/how-to/how-to-create-personal-access-tokens) (PATs) belonging to the current user.",
        "responses": {
          "200": {
            "description": "#/components/schemas/patsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/patsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Personal access tokens"
        ],
        "operationId": "createPat",
        "summary": "Create a new personal access token (PAT) for the current user.",
        "description": "Creates a new [personal access token](https://docs.getunleash.io/how-to/how-to-create-personal-access-tokens) (PAT) belonging to the current user.",
        "requestBody": {
          "description": "#/components/schemas/createPatSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createPatSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/patSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user/tokens/{id}": {
      "delete": {
        "tags": [
          "Personal access tokens"
        ],
        "operationId": "deletePat",
        "summary": "Delete a personal access token (PAT) for the current user.",
        "description": "Deletes a [personal access token](https://docs.getunleash.io/how-to/how-to-create-personal-access-tokens) (PAT) belonging to the current user.",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/ui-config": {
      "get": {
        "tags": [
          "Admin UI"
        ],
        "summary": "Get UI configuration",
        "description": "Retrieves the full configuration used to set up the Unleash Admin UI.",
        "operationId": "getUiConfig",
        "responses": {
          "200": {
            "description": "uiConfigSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/uiConfigSchema"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin UI"
        ],
        "summary": "Set UI configuration",
        "description": "Sets the UI configuration for this Unleash instance.",
        "operationId": "setUiConfig",
        "requestBody": {
          "description": "setUiConfigSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setUiConfigSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        }
      }
    },
    "/api/admin/context": {
      "get": {
        "tags": [
          "Context"
        ],
        "summary": "Gets configured context fields",
        "description": "Returns all configured [Context fields](https://docs.getunleash.io/how-to/how-to-define-custom-context-fields) that have been created.",
        "operationId": "getContextFields",
        "responses": {
          "200": {
            "description": "contextFieldsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contextFieldsSchema"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Context"
        ],
        "operationId": "createContextField",
        "summary": "Create a context field",
        "description": "Endpoint that allows creation of [custom context fields](https://docs.getunleash.io/reference/unleash-context#custom-context-fields)",
        "requestBody": {
          "description": "createContextFieldSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createContextFieldSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contextFieldSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/context/{contextField}": {
      "get": {
        "tags": [
          "Context"
        ],
        "summary": "Gets context field",
        "description": "Returns specific [context field](https://docs.getunleash.io/reference/unleash-context) identified by the name in the path",
        "operationId": "getContextField",
        "responses": {
          "200": {
            "description": "contextFieldSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contextFieldSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "contextField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Context"
        ],
        "summary": "Update an existing context field",
        "description": "Endpoint that allows updating a custom context field. Used to toggle stickiness and add/remove legal values for this context field",
        "operationId": "updateContextField",
        "requestBody": {
          "description": "updateContextFieldSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateContextFieldSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "contextField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Context"
        ],
        "summary": "Delete an existing context field",
        "description": "Endpoint that allows deletion of a custom context field. Does not validate that context field is not in use, but since context field configuration is stored in a json blob for the strategy, existing strategies are safe.",
        "operationId": "deleteContextField",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "contextField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/context/{contextField}/strategies": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "operationId": "getStrategiesByContextField",
        "summary": "Get strategies that use a context field",
        "description": "Retrieves a list of all strategies that use the specified context field. If the context field doesn't exist, returns an empty list of strategies",
        "responses": {
          "200": {
            "description": "contextFieldStrategiesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contextFieldStrategiesSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "contextField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/context/validate": {
      "post": {
        "tags": [
          "Context"
        ],
        "summary": "Validate a context field",
        "description": "Check whether the provided data can be used to create a context field. If the data is not valid, ...?",
        "operationId": "validate",
        "requestBody": {
          "description": "nameSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nameSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        }
      }
    },
    "/api/admin/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getTags",
        "summary": "List all tags.",
        "description": "List all tags available in Unleash.",
        "responses": {
          "200": {
            "description": "tagsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "operationId": "createTag",
        "summary": "Create a new tag.",
        "description": "Create a new tag with the specified data.",
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagWithVersionSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "createTagSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createTagSchema"
              }
            }
          }
        }
      }
    },
    "/api/admin/tags/{type}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getTagsByType",
        "summary": "List all tags of a given type.",
        "description": "List all tags of a given type. If the tag type does not exist it returns an empty list.",
        "responses": {
          "200": {
            "description": "tagsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/tags/{type}/{value}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getTag",
        "summary": "Get a tag by type and value.",
        "description": "Get a tag by type and value. Can be used to check whether a given tag already exists in Unleash or not.",
        "responses": {
          "200": {
            "description": "tagWithVersionSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagWithVersionSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "operationId": "deleteTag",
        "summary": "Delete a tag.",
        "description": "Delete a tag by type and value. When a tag is deleted all references to the tag are removed.",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/tag-types": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getTagTypes",
        "summary": "Get all tag types",
        "description": "Get a list of all available tag types.",
        "responses": {
          "200": {
            "description": "tagTypesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagTypesSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "operationId": "createTagType",
        "summary": "Create a tag type",
        "description": "Create a new tag type.",
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagTypeSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "tagTypeSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagTypeSchema"
              }
            }
          }
        }
      }
    },
    "/api/admin/tag-types/validate": {
      "post": {
        "tags": [
          "Tags"
        ],
        "operationId": "validateTagType",
        "summary": "Validate a tag type",
        "description": "Validates whether if the body of the request is a valid tag and whether the a tag type with that name already exists or not. If a tag type with the same name exists, this operation will return a 409 status code.",
        "responses": {
          "200": {
            "description": "validateTagTypeSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validateTagTypeSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "tagTypeSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagTypeSchema"
              }
            }
          }
        }
      }
    },
    "/api/admin/tag-types/{name}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getTagType",
        "summary": "Get a tag type",
        "description": "Get a tag type by name.",
        "responses": {
          "200": {
            "description": "tagTypeSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagTypeSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "operationId": "updateTagType",
        "summary": "Update a tag type",
        "description": "Update the configuration for the specified tag type.",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "updateTagTypeSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateTagTypeSchema"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "operationId": "deleteTagType",
        "summary": "Delete a tag type",
        "description": "Deletes a tag type. If any features have tags of this type, those tags will be deleted.",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/addons": {
      "get": {
        "summary": "Get all addons and providers",
        "description": "Retrieve all addons and providers that are defined on this Unleash instance.",
        "tags": [
          "Addons"
        ],
        "operationId": "getAddons",
        "responses": {
          "200": {
            "description": "addonsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addonsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new addon",
        "description": "Create an addon instance. The addon must use one of the providers available on this Unleash instance.",
        "tags": [
          "Addons"
        ],
        "operationId": "createAddon",
        "requestBody": {
          "description": "addonCreateUpdateSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addonCreateUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "addonSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addonSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "The request body is larger than what we accept. By default we only accept bodies of 100kB or less",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTooLarge",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You provided more data than we can handle. Unleash accepts at most X MB.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/addons/{id}": {
      "get": {
        "summary": "Get a specific addon",
        "description": "Retrieve information about the addon whose ID matches the ID in the request URL.",
        "tags": [
          "Addons"
        ],
        "operationId": "getAddon",
        "responses": {
          "200": {
            "description": "addonSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addonSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "summary": "Update an addon",
        "description": "Update the addon with a specific ID. Any fields in the update object will be updated. Properties that are not included in the update object will not be affected. To empty a property, pass `null` as that property's value.\n\nNote: passing `null` as a value for the description property will set it to an empty string.",
        "tags": [
          "Addons"
        ],
        "operationId": "updateAddon",
        "requestBody": {
          "description": "addonCreateUpdateSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addonCreateUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "addonSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addonSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "The request body is larger than what we accept. By default we only accept bodies of 100kB or less",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTooLarge",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You provided more data than we can handle. Unleash accepts at most X MB.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "summary": "Delete an addon",
        "description": "Delete the addon specified by the ID in the request path.",
        "tags": [
          "Addons"
        ],
        "operationId": "deleteAddon",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/addons/{id}/events": {
      "get": {
        "tags": [
          "Unstable"
        ],
        "operationId": "getIntegrationEvents",
        "summary": "Get integration events for a specific integration configuration.",
        "description": "Returns a list of integration events belonging to a specific integration configuration, identified by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "schema": {
              "type": "string",
              "example": "50"
            },
            "description": "The number of results to return in a page. By default it is set to 50.",
            "in": "query"
          },
          {
            "name": "offset",
            "schema": {
              "type": "string",
              "example": "50"
            },
            "description": "The number of results to skip when returning a page. By default it is set to 0.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "#/components/schemas/integrationEventsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/integrationEventsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/api-tokens": {
      "get": {
        "tags": [
          "API tokens"
        ],
        "operationId": "getAllApiTokens",
        "summary": "Get API tokens",
        "description": "Retrieves all API tokens that exist in the Unleash instance.",
        "responses": {
          "200": {
            "description": "apiTokensSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokensSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "API tokens"
        ],
        "operationId": "createApiToken",
        "requestBody": {
          "description": "createApiTokenSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createApiTokenSchema"
              }
            }
          }
        },
        "summary": "Create API token",
        "description": "Create an API token of a specific type: one of client, admin, frontend.",
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokenSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/api-tokens/{name}": {
      "get": {
        "tags": [
          "API tokens"
        ],
        "operationId": "getApiTokensByName",
        "summary": "Get API tokens by name",
        "description": "Retrieves all API tokens that match a given token name. Because token names are not unique, this endpoint will always return a list. If no tokens with the provided name exist, the list will be empty. Otherwise, it will contain all the tokens with the given name.",
        "responses": {
          "200": {
            "description": "apiTokensSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokensSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/api-tokens/{token}": {
      "put": {
        "tags": [
          "API tokens"
        ],
        "operationId": "updateApiToken",
        "summary": "Update API token",
        "description": "Updates an existing API token with a new expiry date. The `token` path parameter is the token's `secret`. If the token does not exist, this endpoint returns a 200 OK, but does nothing.",
        "requestBody": {
          "description": "updateApiTokenSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateApiTokenSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "API tokens"
        ],
        "summary": "Delete API token",
        "description": "Deletes an existing API token. The `token` path parameter is the token's `secret`. If the token does not exist, this endpoint returns a 200 OK, but does nothing.",
        "operationId": "deleteApiToken",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/user-admin/inactive": {
      "get": {
        "operationId": "getInactiveUsers",
        "summary": "Gets inactive users",
        "description": "Gets all inactive users. An inactive user is a user that has not logged in in the last 180 days",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "inactiveUsersSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inactiveUsersSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user-admin/inactive/delete": {
      "post": {
        "operationId": "deleteInactiveUsers",
        "summary": "Deletes inactive users",
        "description": "Deletes all inactive users. An inactive user is a user that has not logged in in the last 180 days",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "description": "idsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/idsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user-admin/validate-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "validateUserPassword",
        "summary": "Validate password for a user",
        "description": "Validate the password strength. Minimum 10 characters, uppercase letter, number, special character.",
        "requestBody": {
          "description": "passwordSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/passwordSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user-admin/{id}/change-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "changeUserPassword",
        "summary": "Change password for a user",
        "description": "Change password for a user as an admin",
        "requestBody": {
          "description": "passwordSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/passwordSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/user-admin/reset-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "resetUserPassword",
        "summary": "Reset user password",
        "description": "Reset user password as an admin",
        "requestBody": {
          "description": "idSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/idSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "resetPasswordSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resetPasswordSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user-admin": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUsers",
        "summary": "Get all users and [root roles](https://docs.getunleash.io/reference/rbac#predefined-roles)",
        "description": "Will return all users and all available root roles for the Unleash instance.",
        "responses": {
          "200": {
            "description": "usersSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "createUser",
        "summary": "Create a new user",
        "description": "Creates a new user with the given root role.",
        "requestBody": {
          "description": "createUserSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createUserSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createUserResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user-admin/search": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "searchUsers",
        "summary": "Search users",
        "description": " It will preform a simple search based on name and email matching the given query. Requires minimum 2 characters",
        "parameters": [
          {
            "name": "q",
            "description": "The pattern to search in the username or email",
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "usersSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user-admin/access": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getBaseUsersAndGroups",
        "summary": "Get basic user and group information",
        "description": "Get a subset of user and group information eligible even for non-admin users",
        "responses": {
          "200": {
            "description": "usersGroupsBaseSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersGroupsBaseSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user-admin/{id}/permissions": {
      "get": {
        "tags": [
          "Auth"
        ],
        "operationId": "getUserPermissions",
        "summary": "Returns the list of permissions for the user",
        "description": "Gets a list of permissions for a user, additional project and environment can be specified.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user-admin/admin-count": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getAdminCount",
        "summary": "Get total count of admin accounts",
        "description": "Get a total count of admins with password, without password and admin service accounts",
        "responses": {
          "200": {
            "description": "adminCountSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminCountSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user-admin/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUser",
        "summary": "Get user",
        "description": "Will return a single user by id",
        "responses": {
          "200": {
            "description": "userSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "operationId": "updateUser",
        "summary": "Update a user",
        "description": "Only the explicitly specified fields get updated.",
        "requestBody": {
          "description": "updateUserSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateUserSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "createUserResponseSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createUserResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "operationId": "deleteUser",
        "summary": "Delete a user",
        "description": "Deletes the user with the given userId",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/feedback/{id}": {
      "put": {
        "tags": [
          "Admin UI"
        ],
        "operationId": "updateFeedback",
        "summary": "Update Unleash feedback",
        "description": "Updates the feedback with the provided ID. Only provided fields are updated. Fields left out are left untouched. Must be called with a token with an identifiable user (either from being sent from the UI or from using a [PAT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens)).",
        "requestBody": {
          "description": "feedbackUpdateSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/feedbackUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "feedbackResponseSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/feedbackResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/overview": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "getProjectOverview",
        "summary": "Get an overview of a project.",
        "description": "This endpoint returns an overview of the specified projects stats, project health, number of members, which environments are configured, and the features types in the project.",
        "responses": {
          "200": {
            "description": "projectOverviewSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectOverviewSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/dora": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "getProjectDora",
        "summary": "Get an overview project dora metrics.",
        "description": "This endpoint returns an overview of the specified dora metrics",
        "responses": {
          "200": {
            "description": "projectDoraMetricsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectDoraMetricsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/applications": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "getProjectApplications",
        "summary": "Get a list of all applications for a project.",
        "description": "This endpoint returns an list of all the applications for a project.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "schema": {
              "type": "string",
              "example": "first_app"
            },
            "description": "The search query for the application name, sdk, environment",
            "in": "query"
          },
          {
            "name": "offset",
            "schema": {
              "type": "string",
              "example": "50"
            },
            "description": "The number of applications to skip when returning a page. By default it is set to 0.",
            "in": "query"
          },
          {
            "name": "limit",
            "schema": {
              "type": "string",
              "example": "50"
            },
            "description": "The number of applications to return in a page. By default it is set to 50.",
            "in": "query"
          },
          {
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "type"
            },
            "description": "The field to sort the results by. By default it is set to \"appName\".",
            "in": "query"
          },
          {
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "example": "desc"
            },
            "description": "The sort order for the sortBy. By default it is det to \"asc\".",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "projectApplicationsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectApplicationsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/projects/{projectId}/flag-creators": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "getProjectFlagCreators",
        "summary": "Get a list of all flag creators for a project.",
        "description": "This endpoint returns every user who created a flag in the project.",
        "responses": {
          "200": {
            "description": "projectFlagCreatorsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectFlagCreatorsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/sdks/outdated": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "getOutdatedProjectSdks",
        "summary": "Get outdated project SDKs",
        "description": "Returns a list of the outdated SDKS with the applications using them.",
        "responses": {
          "200": {
            "description": "outdatedSdksSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/outdatedSdksSchema"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}": {
      "get": {
        "summary": "Get a feature environment",
        "description": "Information about the enablement status and strategies for a feature flag in specified environment.",
        "tags": [
          "Features"
        ],
        "operationId": "getFeatureEnvironment",
        "responses": {
          "200": {
            "description": "featureEnvironmentSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureEnvironmentSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/off": {
      "post": {
        "summary": "Disable a feature flag",
        "description": "Disable a feature flag in the specified environment.",
        "tags": [
          "Features"
        ],
        "operationId": "toggleFeatureEnvironmentOff",
        "responses": {
          "200": {
            "description": "featureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/on": {
      "post": {
        "summary": "Enable a feature flag",
        "description": "Enable a feature flag in the specified environment.",
        "tags": [
          "Features"
        ],
        "operationId": "toggleFeatureEnvironmentOn",
        "responses": {
          "200": {
            "description": "featureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/bulk_features/environments/{environment}/on": {
      "post": {
        "tags": [
          "Features"
        ],
        "summary": "Bulk enable a list of features",
        "description": "This endpoint enables multiple feature flags.",
        "operationId": "bulkToggleFeaturesEnvironmentOn",
        "requestBody": {
          "description": "bulkToggleFeaturesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bulkToggleFeaturesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "The request body is larger than what we accept. By default we only accept bodies of 100kB or less",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTooLarge",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You provided more data than we can handle. Unleash accepts at most X MB.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/bulk_features/environments/{environment}/off": {
      "post": {
        "tags": [
          "Features"
        ],
        "summary": "Bulk disable a list of features",
        "description": "This endpoint disables multiple feature flags.",
        "operationId": "bulkToggleFeaturesEnvironmentOff",
        "requestBody": {
          "description": "bulkToggleFeaturesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bulkToggleFeaturesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "The request body is larger than what we accept. By default we only accept bodies of 100kB or less",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTooLarge",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You provided more data than we can handle. Unleash accepts at most X MB.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies": {
      "get": {
        "tags": [
          "Features"
        ],
        "summary": "Get feature flag strategies",
        "operationId": "getFeatureStrategies",
        "description": "Get strategies defined for a feature flag in the specified environment.",
        "responses": {
          "200": {
            "description": "featureStrategySchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureStrategySchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "Features"
        ],
        "summary": "Add a strategy to a feature flag",
        "description": "Add a strategy to a feature flag in the specified environment.",
        "operationId": "addFeatureStrategy",
        "requestBody": {
          "description": "createFeatureStrategySchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createFeatureStrategySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureStrategySchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureStrategySchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId}": {
      "get": {
        "tags": [
          "Features"
        ],
        "summary": "Get a strategy configuration",
        "description": "Get a strategy configuration for an environment in a feature flag.",
        "operationId": "getFeatureStrategy",
        "responses": {
          "200": {
            "description": "featureStrategySchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureStrategySchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "strategyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Features"
        ],
        "summary": "Update a strategy",
        "description": "Replace strategy configuration for a feature flag in the specified environment.",
        "operationId": "updateFeatureStrategy",
        "requestBody": {
          "description": "updateFeatureStrategySchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateFeatureStrategySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureStrategySchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureStrategySchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "strategyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Features"
        ],
        "summary": "Change specific properties of a strategy",
        "description": "Change specific properties of a strategy configuration in a feature flag.",
        "operationId": "patchFeatureStrategy",
        "requestBody": {
          "description": "patchesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureStrategySchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureStrategySchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "strategyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Features"
        ],
        "summary": "Delete a strategy from a feature flag",
        "description": "Delete a strategy configuration from a feature flag in the specified environment.",
        "operationId": "deleteFeatureStrategy",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "strategyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/set-sort-order": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "setStrategySortOrder",
        "summary": "Set strategy sort order",
        "description": "Set the sort order of the provided list of strategies.",
        "requestBody": {
          "description": "setStrategySortOrderSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setStrategySortOrderSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features": {
      "get": {
        "summary": "Get all features in a project",
        "description": "A list of all features for the specified project.",
        "tags": [
          "Features"
        ],
        "operationId": "getFeatures",
        "responses": {
          "200": {
            "description": "featuresSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featuresSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "summary": "Add a new feature flag",
        "description": "Create a new feature flag in a specified project.",
        "tags": [
          "Features"
        ],
        "operationId": "createFeature",
        "requestBody": {
          "description": "createFeatureSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createFeatureSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/clone": {
      "post": {
        "summary": "Clone a feature flag",
        "description": "Creates a copy of the specified feature flag. The copy can be created in any project.",
        "tags": [
          "Features"
        ],
        "operationId": "cloneFeature",
        "requestBody": {
          "description": "cloneFeatureSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloneFeatureSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}": {
      "get": {
        "operationId": "getFeature",
        "tags": [
          "Features"
        ],
        "summary": "Get a feature",
        "description": "This endpoint returns the information about the requested feature if the feature belongs to the specified project.",
        "responses": {
          "200": {
            "description": "featureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Features"
        ],
        "operationId": "updateFeature",
        "summary": "Update a feature flag",
        "description": "Updates the specified feature if the feature belongs to the specified project. Only the provided properties are updated; any feature properties left out of the request body are left untouched.",
        "requestBody": {
          "description": "updateFeatureSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateFeatureSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Features"
        ],
        "operationId": "patchFeature",
        "summary": "Modify a feature flag",
        "description": "Change specific properties of a feature flag.",
        "requestBody": {
          "description": "patchesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Features"
        ],
        "operationId": "archiveFeature",
        "summary": "Archive a feature flag",
        "description": "This endpoint archives the specified feature if the feature belongs to the specified project.",
        "responses": {
          "202": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/stale": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "staleFeatures",
        "summary": "Mark features as stale / not stale",
        "description": "This endpoint marks the provided list of features as either [stale](https://docs.getunleash.io/reference/technical-debt#stale-and-potentially-stale-toggles) or not stale depending on the request body you send. Any provided features that don't exist are ignored.",
        "requestBody": {
          "description": "batchStaleSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batchStaleSchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/tags": {
      "put": {
        "tags": [
          "Tags"
        ],
        "operationId": "addTagToFeatures",
        "summary": "Adds a tag to the specified features",
        "description": "Add a tag to a list of features. Create tags if needed.",
        "requestBody": {
          "description": "tagsBulkAddSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagsBulkAddSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{child}/dependencies": {
      "post": {
        "tags": [
          "Dependencies"
        ],
        "summary": "Add a feature dependency.",
        "description": "Add a dependency to a parent feature. Each environment will resolve corresponding dependency independently.",
        "operationId": "addFeatureDependency",
        "requestBody": {
          "description": "createDependentFeatureSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createDependentFeatureSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "child",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Dependencies"
        ],
        "summary": "Deletes feature dependencies.",
        "description": "Remove dependencies to all parent features.",
        "operationId": "deleteFeatureDependencies",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "child",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{child}/dependencies/{parent}": {
      "delete": {
        "tags": [
          "Dependencies"
        ],
        "summary": "Deletes a feature dependency.",
        "description": "Remove a dependency to a parent feature.",
        "operationId": "deleteFeatureDependency",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "child",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{child}/parents": {
      "get": {
        "tags": [
          "Dependencies"
        ],
        "summary": "List parent options.",
        "description": "List available parents who have no transitive dependencies.",
        "operationId": "listParentOptions",
        "responses": {
          "200": {
            "description": "parentFeatureOptionsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/parentFeatureOptionsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "child",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{parent}/parent-variants": {
      "get": {
        "tags": [
          "Dependencies"
        ],
        "summary": "List parent feature variants.",
        "description": "List available parent variants across all strategy variants and feature environment variants.",
        "operationId": "listParentVariantOptions",
        "responses": {
          "200": {
            "description": "parentVariantOptionsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/parentVariantOptionsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/dependencies": {
      "get": {
        "tags": [
          "Dependencies"
        ],
        "summary": "Check dependencies exist.",
        "description": "Check if any dependencies exist in this Unleash instance",
        "operationId": "checkDependenciesExist",
        "responses": {
          "200": {
            "description": "dependenciesExistSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dependenciesExistSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/environments": {
      "post": {
        "tags": [
          "Projects"
        ],
        "operationId": "addEnvironmentToProject",
        "summary": "Add an environment to a project.",
        "description": "This endpoint adds the provided environment to the specified project, with optional support for enabling and disabling change requests for the environment and project.",
        "requestBody": {
          "description": "projectEnvironmentSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/projectEnvironmentSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/environments/{environment}": {
      "delete": {
        "tags": [
          "Projects"
        ],
        "operationId": "removeEnvironmentFromProject",
        "summary": "Remove an environment from a project.",
        "description": "This endpoint removes the specified environment from the project.",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/environments/{environment}/default-strategy": {
      "post": {
        "tags": [
          "Projects"
        ],
        "operationId": "addDefaultStrategyToProjectEnvironment",
        "summary": "Set environment-default strategy",
        "description": "Sets a default strategy for this environment. Unleash will use this strategy by default when enabling a toggle. Use the wild card \"*\" for `:environment` to add to all environments. ",
        "requestBody": {
          "description": "createFeatureStrategySchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createFeatureStrategySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "createFeatureStrategySchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createFeatureStrategySchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/health-report": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "getProjectHealthReport",
        "summary": "Get a health report for a project.",
        "description": "This endpoint returns a health report for the specified project. This data is used for [the technical debt dashboard](https://docs.getunleash.io/reference/technical-debt#the-technical-debt-dashboard)",
        "responses": {
          "200": {
            "description": "healthReportSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/healthReportSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/variants": {
      "get": {
        "summary": "Retrieve variants for a feature (deprecated) ",
        "description": "(deprecated from 4.21) Retrieve the variants for the specified feature. From Unleash 4.21 onwards, this endpoint will attempt to choose a [production-type environment](https://docs.getunleash.io/reference/environments) as the source of truth. If more than one production environment is found, the first one will be used.",
        "deprecated": true,
        "tags": [
          "Features"
        ],
        "operationId": "getFeatureVariants",
        "responses": {
          "200": {
            "description": "featureVariantsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "summary": "Apply a patch to a feature's variants (in all environments).",
        "description": "Apply a list of patches patch to the specified feature's variants. The patch objects should conform to the [JSON-patch format (RFC 6902)](https://www.rfc-editor.org/rfc/rfc6902).\n\n⚠️ **Warning**: This method is not atomic. If something fails in the middle of applying the patch, you can be left with a half-applied patch. We recommend that you instead [patch variants on a per-environment basis](/docs/reference/api/unleash/patch-environments-feature-variants.api.mdx), which **is** an atomic operation.",
        "tags": [
          "Features"
        ],
        "operationId": "patchFeatureVariants",
        "requestBody": {
          "description": "patchesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureVariantsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "summary": "Create (overwrite) variants for a feature flag in all environments",
        "description": "This overwrites the current variants for the feature specified in the :featureName parameter in all environments.\n\nThe backend will validate the input for the following invariants\n\n* If there are variants, there needs to be at least one variant with `weightType: variable`\n* The sum of the weights of variants with `weightType: fix` must be strictly less than 1000 (< 1000)\n\nThe backend will also distribute remaining weight up to 1000 after adding the variants with `weightType: fix` together amongst the variants of `weightType: variable`",
        "tags": [
          "Features"
        ],
        "operationId": "overwriteFeatureVariants",
        "requestBody": {
          "description": "variantsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/variantsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureVariantsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/variants": {
      "get": {
        "summary": "Get variants for a feature in an environment",
        "description": "Returns the variants for a feature in a specific environment. If the feature has no variants it will return an empty array of variants",
        "tags": [
          "Features"
        ],
        "operationId": "getEnvironmentFeatureVariants",
        "responses": {
          "200": {
            "description": "featureVariantsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "summary": "Patch a feature's variants in an environment",
        "description": "Apply a list of patches to the features environments in the specified environment. The patch objects should conform to the [JSON-patch format (RFC 6902)](https://www.rfc-editor.org/rfc/rfc6902).",
        "tags": [
          "Features"
        ],
        "operationId": "patchEnvironmentsFeatureVariants",
        "requestBody": {
          "description": "patchesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureVariantsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "summary": "Create (overwrite) variants for a feature in an environment",
        "description": "This overwrites the current variants for the feature flag in the :featureName parameter for the :environment parameter.\n\nThe backend will validate the input for the following invariants:\n\n* If there are variants, there needs to be at least one variant with `weightType: variable`\n* The sum of the weights of variants with `weightType: fix` must be strictly less than 1000 (< 1000)\n\nThe backend will also distribute remaining weight up to 1000 after adding the variants with `weightType: fix` together amongst the variants of `weightType: variable`",
        "tags": [
          "Features"
        ],
        "operationId": "overwriteEnvironmentFeatureVariants",
        "requestBody": {
          "description": "variantsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/variantsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureVariantsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/variants-batch": {
      "put": {
        "tags": [
          "Features"
        ],
        "operationId": "overwriteFeatureVariantsOnEnvironments",
        "summary": "Create (overwrite) variants for a feature flag in multiple environments",
        "description": "This overwrites the current variants for the feature flag in the :featureName parameter for the :environment parameter.",
        "requestBody": {
          "description": "pushVariantsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pushVariantsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureVariantsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/api-tokens": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "getProjectApiTokens",
        "summary": "Get api tokens for project.",
        "description": "Returns the [project API tokens](https://docs.getunleash.io/how-to/how-to-create-project-api-tokens) that have been created for this project.",
        "responses": {
          "200": {
            "description": "apiTokensSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokensSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "operationId": "createProjectApiToken",
        "requestBody": {
          "description": "createApiTokenSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createApiTokenSchema"
              }
            }
          }
        },
        "summary": "Create a project API token.",
        "description": "Endpoint that allows creation of [project API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys#api-token-visibility) for the specified project.",
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokenSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/api-tokens/{token}": {
      "delete": {
        "tags": [
          "Projects"
        ],
        "operationId": "deleteProjectApiToken",
        "summary": "Delete a project API token.",
        "description": "This operation deletes the API token specified in the request URL. If the token doesn't exist, returns an OK response (status code 200).",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/delete": {
      "post": {
        "tags": [
          "Archive"
        ],
        "operationId": "deleteFeatures",
        "description": "This endpoint deletes the specified features, that are in archive.",
        "summary": "Deletes a list of features",
        "requestBody": {
          "description": "batchFeaturesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batchFeaturesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/revive": {
      "post": {
        "tags": [
          "Archive"
        ],
        "operationId": "reviveFeatures",
        "description": "This endpoint revives the specified features.",
        "summary": "Revives a list of features",
        "requestBody": {
          "description": "batchFeaturesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batchFeaturesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/archive/validate": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "validateArchiveFeatures",
        "description": "This endpoint return info about the archive features impact.",
        "summary": "Validates archive features",
        "requestBody": {
          "description": "batchFeaturesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batchFeaturesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "validateArchiveFeaturesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validateArchiveFeaturesSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/archive": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "archiveFeatures",
        "description": "This endpoint archives the specified features. Any features that are already archived or that don't exist are ignored. All existing features (whether already archived or not) that are provided must belong to the specified project.",
        "summary": "Archives a list of features",
        "requestBody": {
          "description": "batchFeaturesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batchFeaturesSchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/insights": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "getProjectInsights",
        "summary": "Get an overview of a project insights.",
        "description": "This endpoint returns insights into the specified projects stats, health, lead time for changes, feature types used, members and change requests.",
        "responses": {
          "200": {
            "description": "projectInsightsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectInsightsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/lifecycle": {
      "get": {
        "tags": [
          "Unstable"
        ],
        "summary": "Get feature lifecycle",
        "description": "Information about the lifecycle stages of the feature.",
        "operationId": "getFeatureLifecycle",
        "responses": {
          "200": {
            "description": "featureLifecycleSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureLifecycleSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/lifecycle/complete": {
      "post": {
        "tags": [
          "Unstable"
        ],
        "summary": "Set feature completed",
        "description": "This will set the feature as completed.",
        "operationId": "complete",
        "requestBody": {
          "description": "featureLifecycleCompletedSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/featureLifecycleCompletedSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/lifecycle/uncomplete": {
      "post": {
        "tags": [
          "Unstable"
        ],
        "summary": "Set feature uncompleted",
        "description": "This will set the feature as uncompleted.",
        "operationId": "uncomplete",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/environments/project/{projectId}": {
      "get": {
        "tags": [
          "Environments"
        ],
        "operationId": "getProjectEnvironments",
        "summary": "Get the environments available to a project",
        "description": "Gets the environments that are available for this project. An environment is available for a project if enabled in the [project configuration](https://docs.getunleash.io/reference/environments#step-1-enable-new-environments-for-your-project)",
        "responses": {
          "200": {
            "description": "environmentsProjectSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environmentsProjectSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/environments/sort-order": {
      "put": {
        "tags": [
          "Environments"
        ],
        "summary": "Update environment sort orders",
        "description": "Updates sort orders for the named environments. Environments not specified are unaffected.",
        "operationId": "updateSortOrder",
        "requestBody": {
          "description": "sortOrderSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sortOrderSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/environments/{name}/on": {
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Toggle the environment with `name` on",
        "description": "Makes it possible to enable this environment for a project. An environment must first be globally enabled using this endpoint before it can be enabled for a project",
        "operationId": "toggleEnvironmentOn",
        "responses": {
          "204": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/environments/{name}/off": {
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Toggle the environment with `name` off",
        "description": "Removes this environment from the list of available environments for projects to use",
        "operationId": "toggleEnvironmentOff",
        "responses": {
          "204": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/splash/{id}": {
      "post": {
        "tags": [
          "Admin UI"
        ],
        "operationId": "updateSplashSettings",
        "summary": "Update splash settings",
        "description": "This operation updates splash settings for a user, indicating that they have seen a particualar splash screen.",
        "responses": {
          "200": {
            "description": "splashResponseSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/splashResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/constraints/validate": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "validateConstraint",
        "requestBody": {
          "description": "constraintSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/constraintSchema"
              }
            }
          }
        },
        "summary": "Validate constraint",
        "description": "Validates a constraint definition. Checks whether the context field exists and whether the applied configuration is valid. Additional properties are not allowed on data objects that you send to this endpoint.",
        "responses": {
          "204": {
            "description": "The constraint is valid"
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/invite-link/tokens": {
      "get": {
        "tags": [
          "Public signup tokens"
        ],
        "summary": "Get public signup tokens",
        "description": "Retrieves all existing public signup tokens.",
        "operationId": "getAllPublicSignupTokens",
        "responses": {
          "200": {
            "description": "publicSignupTokensSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicSignupTokensSchema"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Public signup tokens"
        ],
        "operationId": "createPublicSignupToken",
        "summary": "Create a public signup token",
        "description": "Lets administrators create a invite link to share with colleagues.  People that join using the public invite are assigned the `Viewer` role",
        "requestBody": {
          "description": "publicSignupTokenCreateSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/publicSignupTokenCreateSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicSignupTokenSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/invite-link/tokens/{token}": {
      "get": {
        "tags": [
          "Public signup tokens"
        ],
        "summary": "Retrieve a token",
        "description": "Get information about a specific token. The `:token` part of the URL should be the token's secret.",
        "operationId": "getPublicSignupToken",
        "responses": {
          "200": {
            "description": "publicSignupTokenSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicSignupTokenSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Public signup tokens"
        ],
        "operationId": "updatePublicSignupToken",
        "summary": "Update a public signup token",
        "description": "Update information about a specific token. The `:token` part of the URL should be the token's secret.",
        "requestBody": {
          "description": "publicSignupTokenUpdateSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/publicSignupTokenUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "publicSignupTokenSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicSignupTokenSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/instance-admin/statistics/csv": {
      "get": {
        "tags": [
          "Instance Admin"
        ],
        "summary": "Instance usage statistics",
        "description": "Provides statistics about various features of Unleash to allow for reporting of usage for self-hosted customers. The response contains data such as the number of users, groups, features, strategies, versions, etc.",
        "operationId": "getInstanceAdminStatsCsv",
        "responses": {
          "200": {
            "description": "instanceAdminStatsSchemaCsv",
            "content": {
              "text/csv": {
                "example": "\"OIDCenabled\",\"SAMLenabled\",\"clientApps\",\"contextFields\",\"environments\",\"featureExports\",\"featureImports\",\"featureToggles\",\"archivedFeatureToggles\",\"groups\",\"instanceId\",\"projects\",\"roles\",\"customRootRoles\",\"customRootRolesInUse\",\"segments\",\"strategies\",\"sum\",\"timestamp\",\"users\",\"serviceAccounts\",\"apiTokens\",\"versionEnterprise\",\"versionOSS\",\"activeUsers\",\"productionChanges\",\"previousDayMetricsBucketsCount\"\ntrue,false,\"[{\"\"range\"\":\"\"allTime\"\",\"\"count\"\":15},{\"\"range\"\":\"\"30d\"\",\"\"count\"\":9},{\"\"range\"\":\"\"7d\"\",\"\"count\"\":5}]\",6,2,0,0,29,10,3,\"ed3861ae-78f9-4e8c-8e57-b57efc15f82b\",4,5,2,1,2,8,\"some-sha256-hash\",\"2023-07-12T10:00:00.000Z\",10,2,\"{}\",\"5.1.7\",\"5.1.7\",\"{\"\"last90\"\":15,\"\"last60\"\":12,\"\"last30\"\":10,\"\"last7\"\":5}\",\"{\"\"last30\"\":100,\"\"last60\"\":200,\"\"last90\"\":200}\",\"{\"\"variantCount\"\":100,\"\"enabledCount\"\":200}\"",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/instance-admin/statistics": {
      "get": {
        "tags": [
          "Instance Admin"
        ],
        "operationId": "getInstanceAdminStats",
        "summary": "Instance usage statistics",
        "description": "Provides statistics about various features of Unleash to allow for reporting of usage for self-hosted customers. The response contains data such as the number of users, groups, features, strategies, versions, etc.",
        "responses": {
          "200": {
            "description": "instanceAdminStatsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/instanceAdminStatsSchema"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/favorites": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "addFavoriteFeature",
        "summary": "Add feature to favorites",
        "description": "This endpoint marks the feature in the url as favorite",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Features"
        ],
        "operationId": "removeFavoriteFeature",
        "summary": "Remove feature from favorites",
        "description": "This endpoint removes the feature in the url from favorites",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/favorites": {
      "post": {
        "tags": [
          "Features"
        ],
        "summary": "Add project to favorites",
        "description": "This endpoint marks the project in the url as favorite",
        "operationId": "addFavoriteProject",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Features"
        ],
        "summary": "Remove project from favorites",
        "description": "This endpoint removes the project in the url from favorites",
        "operationId": "removeFavoriteProject",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/segments/validate": {
      "post": {
        "summary": "Validates if a segment name exists",
        "description": "Uses the name provided in the body of the request to validate if the given name exists or not",
        "tags": [
          "Segments"
        ],
        "operationId": "validateSegment",
        "requestBody": {
          "description": "nameSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nameSchema"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/segments/strategies/{strategyId}": {
      "get": {
        "tags": [
          "Segments"
        ],
        "operationId": "getSegmentsByStrategyId",
        "summary": "Get strategy segments",
        "description": "Retrieve all segments that are referenced by the specified strategy. Returns an empty list of segments if the strategy ID doesn't exist.",
        "responses": {
          "200": {
            "description": "segmentsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/segmentsSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "strategyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/segments/strategies": {
      "post": {
        "summary": "Update strategy segments",
        "description": "Sets the segments of the strategy specified to be exactly the ones passed in the payload. Any segments that were used by the strategy before will be removed if they are not in the provided list of segments.",
        "tags": [
          "Strategies"
        ],
        "operationId": "updateFeatureStrategySegments",
        "requestBody": {
          "description": "updateFeatureStrategySegmentsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateFeatureStrategySegmentsSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/updateFeatureStrategySegmentsSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/segments/{id}/strategies": {
      "get": {
        "tags": [
          "Segments"
        ],
        "operationId": "getStrategiesBySegmentId",
        "summary": "Get strategies that reference segment",
        "description": "Retrieve all strategies that reference the specified segment.",
        "responses": {
          "200": {
            "description": "segmentStrategiesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/segmentStrategiesSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/segments/{id}": {
      "delete": {
        "summary": "Deletes a segment by id",
        "description": "Deletes a segment by its id, if not found returns a 409 error",
        "tags": [
          "Segments"
        ],
        "operationId": "removeSegment",
        "responses": {
          "204": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "summary": "Update segment by id",
        "description": "Updates the content of the segment with the provided payload. Any fields not specified will be left untouched.",
        "tags": [
          "Segments"
        ],
        "operationId": "updateSegment",
        "responses": {
          "204": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "summary": "Get a segment",
        "description": "Retrieves a segment based on its ID.",
        "tags": [
          "Segments"
        ],
        "operationId": "getSegment",
        "responses": {
          "200": {
            "description": "adminSegmentSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminSegmentSchema"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/segments": {
      "post": {
        "summary": "Create a new segment",
        "description": "Creates a new segment using the payload provided",
        "tags": [
          "Segments"
        ],
        "operationId": "createSegment",
        "requestBody": {
          "description": "upsertSegmentSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upsertSegmentSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminSegmentSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all segments",
        "description": "Retrieves all segments that exist in this Unleash instance.",
        "tags": [
          "Segments"
        ],
        "operationId": "getSegments",
        "responses": {
          "200": {
            "description": "segmentsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/segmentsSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/maintenance": {
      "post": {
        "summary": "Enabled/disabled maintenance mode",
        "description": "Lets administrators put Unleash into a mostly read-only mode. While Unleash is in maintenance mode, users can not change any configuration settings",
        "tags": [
          "Maintenance"
        ],
        "operationId": "toggleMaintenance",
        "responses": {
          "204": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "toggleMaintenanceSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/toggleMaintenanceSchema"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get maintenance mode status",
        "description": "Tells you whether maintenance mode is enabled or disabled",
        "tags": [
          "Maintenance"
        ],
        "operationId": "getMaintenance",
        "responses": {
          "200": {
            "description": "maintenanceSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/maintenanceSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/telemetry/settings": {
      "get": {
        "tags": [
          "Telemetry"
        ],
        "summary": "Get telemetry settings",
        "description": "Provides the configured settings for [telemetry information collection](https://docs.getunleash.io/topics/data-collection)",
        "operationId": "getTelemetrySettings",
        "responses": {
          "200": {
            "description": "telemetrySettingsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/telemetrySettingsSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/search/features": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search and filter features",
        "description": "Search and filter by selected fields.",
        "operationId": "searchFeatures",
        "parameters": [
          {
            "name": "query",
            "schema": {
              "type": "string",
              "example": "feature_a"
            },
            "description": "The search query for the feature name or tag",
            "in": "query"
          },
          {
            "name": "project",
            "schema": {
              "type": "string",
              "example": "IS:default",
              "pattern": "^(IS|IS_NOT|IS_ANY_OF|IS_NONE_OF):(.*?)(,([a-zA-Z0-9_]+))*$"
            },
            "description": "Id of the project where search and filter is performed. The project id can be specified with an operator. The supported operators are IS, IS_NOT, IS_ANY_OF, IS_NONE_OF.",
            "in": "query"
          },
          {
            "name": "state",
            "schema": {
              "type": "string",
              "example": "IS:active",
              "pattern": "^(IS|IS_NOT|IS_ANY_OF|IS_NONE_OF):(.*?)(,([a-zA-Z0-9_]+))*$"
            },
            "description": "The state of the feature active/stale. The state can be specified with an operator. The supported operators are IS, IS_NOT, IS_ANY_OF, IS_NONE_OF.",
            "in": "query"
          },
          {
            "name": "type",
            "schema": {
              "type": "string",
              "example": "IS:release",
              "pattern": "^(IS|IS_NOT|IS_ANY_OF|IS_NONE_OF):(.*?)(,([a-zA-Z0-9_]+))*$"
            },
            "description": "The feature flag type to filter by. The type can be specified with an operator. The supported operators are IS, IS_NOT, IS_ANY_OF, IS_NONE_OF.",
            "in": "query"
          },
          {
            "name": "createdBy",
            "schema": {
              "type": "string",
              "example": "IS:1",
              "pattern": "^(IS|IS_NOT|IS_ANY_OF|IS_NONE_OF):(.*?)(,([a-zA-Z0-9_]+))*$"
            },
            "description": "The feature flag creator to filter by. The creators can be specified with an operator. The supported operators are IS, IS_NOT, IS_ANY_OF, IS_NONE_OF.",
            "in": "query"
          },
          {
            "name": "tag",
            "schema": {
              "type": "string",
              "pattern": "^(INCLUDE|DO_NOT_INCLUDE|INCLUDE_ALL_OF|INCLUDE_ANY_OF|EXCLUDE_IF_ANY_OF|EXCLUDE_ALL):(?:\\s*[^,:]+:[^,:]+\\s*)(?:,\\s*[^,:]+:[^,:]+\\s*)*$",
              "example": "INCLUDE:simple:my_tag"
            },
            "description": "The list of feature tags to filter by. Feature tag has to specify a type and a value joined with a colon.",
            "in": "query"
          },
          {
            "name": "segment",
            "schema": {
              "type": "string",
              "pattern": "^(INCLUDE|DO_NOT_INCLUDE|INCLUDE_ALL_OF|INCLUDE_ANY_OF|EXCLUDE_IF_ANY_OF|EXCLUDE_ALL):(.*?)(,([a-zA-Z0-9_]+))*$",
              "example": "INCLUDE:pro-users"
            },
            "description": "The list of segments with operators to filter by. The segment valid operators are INCLUDE, DO_NOT_INCLUDE, INCLUDE_ALL_OF, INCLUDE_ANY_OF, EXCLUDE_IF_ANY_OF, EXCLUDE_ALL.",
            "in": "query"
          },
          {
            "name": "status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "production:enabled"
              }
            },
            "description": "The list of feature environment status to filter by. Feature environment has to specify a name and a status joined with a colon.",
            "in": "query"
          },
          {
            "name": "offset",
            "schema": {
              "type": "string",
              "example": "50"
            },
            "description": "The number of features to skip when returning a page. By default it is set to 0.",
            "in": "query"
          },
          {
            "name": "limit",
            "schema": {
              "type": "string",
              "example": "50"
            },
            "description": "The number of feature environments to return in a page. By default it is set to 50.",
            "in": "query"
          },
          {
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "type"
            },
            "description": "The field to sort the results by. By default it is set to \"createdAt\".",
            "in": "query"
          },
          {
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "desc"
            },
            "description": "The sort order for the sortBy. By default it is det to \"asc\".",
            "in": "query"
          },
          {
            "name": "favoritesFirst",
            "schema": {
              "type": "string",
              "example": "true"
            },
            "description": "The flag to indicate if the favorite features should be returned first. By default it is set to false.",
            "in": "query"
          },
          {
            "name": "createdAt",
            "schema": {
              "type": "string",
              "example": "IS_ON_OR_AFTER:2023-01-28",
              "pattern": "^(IS_BEFORE|IS_ON_OR_AFTER):\\d{4}-\\d{2}-\\d{2}$"
            },
            "description": "The date the feature was created. The date can be specified with an operator. The supported operators are IS_BEFORE, IS_ON_OR_AFTER.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "searchFeaturesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchFeaturesSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/search/events": {
      "get": {
        "operationId": "searchEvents",
        "tags": [
          "Events"
        ],
        "summary": "Search for events",
        "description": "Allows searching for events matching the search criteria in the request body. This operation is deprecated. You should perform a GET request to the same endpoint with your query encoded as query parameters instead.",
        "parameters": [
          {
            "name": "query",
            "schema": {
              "type": "string",
              "example": "admin@example.com"
            },
            "description": "Find events by a free-text search query. The query will be matched against the event data payload (if any).",
            "in": "query"
          },
          {
            "name": "feature",
            "schema": {
              "type": "string",
              "example": "IS:myfeature",
              "pattern": "^(IS|IS_ANY_OF):(.*?)(,([a-zA-Z0-9_]+))*$"
            },
            "description": "Filter by feature name using supported operators: IS, IS_ANY_OF",
            "in": "query"
          },
          {
            "name": "project",
            "schema": {
              "type": "string",
              "example": "IS:default",
              "pattern": "^(IS|IS_ANY_OF):(.*?)(,([a-zA-Z0-9_]+))*$"
            },
            "description": "Filter by projects ID using supported operators: IS, IS_ANY_OF.",
            "in": "query"
          },
          {
            "name": "type",
            "schema": {
              "type": "string",
              "example": "IS:change-added",
              "pattern": "^(IS|IS_ANY_OF):(.*?)(,([a-zA-Z0-9_]+))*$"
            },
            "description": "Filter by event type using supported operators: IS, IS_ANY_OF.",
            "in": "query"
          },
          {
            "name": "createdBy",
            "schema": {
              "type": "string",
              "example": "IS:2",
              "pattern": "^(IS|IS_ANY_OF):(.*?)(,([a-zA-Z0-9_]+))*$"
            },
            "description": "Filter by the ID of the event creator, using supported operators: IS, IS_ANY_OF.",
            "in": "query"
          },
          {
            "name": "from",
            "schema": {
              "type": "string",
              "example": "IS:2024-01-01",
              "pattern": "^(IS):\\d{4}-\\d{2}-\\d{2}$"
            },
            "description": "The starting date of the creation date range in IS:yyyy-MM-dd format",
            "in": "query"
          },
          {
            "name": "to",
            "schema": {
              "type": "string",
              "example": "IS:2024-01-31",
              "pattern": "^(IS):\\d{4}-\\d{2}-\\d{2}$"
            },
            "description": "The ending date of the creation date range in IS:yyyy-MM-dd format",
            "in": "query"
          },
          {
            "name": "offset",
            "schema": {
              "type": "string",
              "example": "50",
              "default": "0"
            },
            "description": "The number of features to skip when returning a page. By default it is set to 0.",
            "in": "query"
          },
          {
            "name": "limit",
            "schema": {
              "type": "string",
              "example": "50",
              "default": "50"
            },
            "description": "The number of feature environments to return in a page. By default it is set to 50. The maximum is 1000.",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "eventSearchResponseSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventSearchResponseSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/record-ui-error": {
      "post": {
        "tags": [
          "Admin UI"
        ],
        "operationId": "uiObservability",
        "summary": "Accepts errors from the UI client",
        "description": "This endpoint accepts error reports from the UI client, so that we can add observability on UI errors.",
        "requestBody": {
          "description": "recordUiErrorSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/recordUiErrorSchema"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client/features/{featureName}": {
      "get": {
        "operationId": "getClientFeature",
        "summary": "Get a single feature flag",
        "description": "Gets all the client data for a single flag. Contains the exact same information about a flag as the `/api/client/features` endpoint does, but only contains data about the specified flag. All SDKs should use `/api/client/features`",
        "tags": [
          "Client"
        ],
        "responses": {
          "200": {
            "description": "clientFeatureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clientFeatureSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/client/features": {
      "get": {
        "summary": "Get all flags (SDK)",
        "description": "Returns the SDK configuration for all feature flags that are available to the provided API key. Used by SDKs to configure local evaluation",
        "operationId": "getAllClientFeatures",
        "tags": [
          "Client"
        ],
        "responses": {
          "200": {
            "description": "clientFeaturesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clientFeaturesSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/client/metrics": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Register client usage metrics",
        "description": "Registers usage metrics. Stores information about how many times each flag was evaluated to enabled and disabled within a time frame. If provided, this operation will also store data on how many times each feature flag's variants were displayed to the end user.",
        "operationId": "registerClientMetrics",
        "requestBody": {
          "description": "clientMetricsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clientMetricsSchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "This response has no body."
          },
          "204": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client/metrics/bulk": {
      "post": {
        "tags": [
          "Edge"
        ],
        "summary": "Send metrics in bulk",
        "description": "This operation accepts batched metrics from any client. Metrics will be inserted into Unleash's metrics storage",
        "operationId": "clientBulkMetrics",
        "requestBody": {
          "description": "bulkMetricsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bulkMetricsSchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "The request body is larger than what we accept. By default we only accept bodies of 100kB or less",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTooLarge",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You provided more data than we can handle. Unleash accepts at most X MB.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client/register": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Register a client SDK",
        "description": "Register a client SDK with Unleash. SDKs call this endpoint on startup to tell Unleash about their existence. Used to track custom strategies in use as well as SDK versions.",
        "operationId": "registerClientApplication",
        "requestBody": {
          "description": "clientApplicationSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clientApplicationSchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "This response has no body."
          }
        }
      }
    },
    "/api/frontend": {
      "get": {
        "tags": [
          "Frontend API"
        ],
        "operationId": "getFrontendFeatures",
        "responses": {
          "200": {
            "description": "frontendApiFeaturesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/frontendApiFeaturesSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Retrieve enabled feature flags for the provided context.",
        "description": "This endpoint returns the list of feature flags that the frontend API evaluates to enabled for the given context. Context values are provided as query parameters. If the Frontend API is disabled 404 is returned."
      }
    },
    "/api/frontend/client/metrics": {
      "post": {
        "tags": [
          "Frontend API"
        ],
        "summary": "Register client usage metrics",
        "description": "Registers usage metrics. Stores information about how many times each flag was evaluated to enabled and disabled within a time frame. If provided, this operation will also store data on how many times each feature flag's variants were displayed to the end user. If the Frontend API is disabled 404 is returned.",
        "operationId": "registerFrontendMetrics",
        "requestBody": {
          "description": "clientMetricsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clientMetricsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "204": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/frontend/client/register": {
      "post": {
        "tags": [
          "Frontend API"
        ],
        "summary": "Register a client SDK",
        "description": "This is for future use. Currently Frontend client registration is not supported. Returning 200 for clients that expect this status code. If the Frontend API is disabled 404 is returned.",
        "operationId": "registerFrontendClient",
        "requestBody": {
          "description": "frontendApiClientSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/frontendApiClientSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/edge/validate": {
      "post": {
        "tags": [
          "Edge"
        ],
        "security": [
          {}
        ],
        "summary": "Check which tokens are valid",
        "description": "This operation accepts a list of tokens to validate. Unleash will validate each token you provide. For each valid token you provide, Unleash will return the token along with its type and which projects it has access to.",
        "operationId": "getValidTokens",
        "requestBody": {
          "description": "tokenStringListSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tokenStringListSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "validatedEdgeTokensSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validatedEdgeTokensSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "The request body is larger than what we accept. By default we only accept bodies of 100kB or less",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTooLarge",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You provided more data than we can handle. Unleash accepts at most X MB.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
