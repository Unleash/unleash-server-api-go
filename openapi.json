{
  "openapi": "3.0.3",
  "servers": [],
  "info": {
    "title": "Unleash API",
    "version": "5.2.8"
  },
  "security": [
    {
      "apiKey": []
    }
  ],
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    },
    "schemas": {
      "adminCountSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Contains total admin counts for an Unleash instance.",
        "required": [
          "password",
          "noPassword",
          "service"
        ],
        "properties": {
          "password": {
            "type": "number",
            "description": "Total number of admins that have a password set."
          },
          "noPassword": {
            "type": "number",
            "description": "Total number of admins that do not have a password set. May be SSO, but may also be users that did not set a password yet."
          },
          "service": {
            "type": "number",
            "description": "Total number of service accounts that have the admin root role."
          }
        }
      },
      "adminFeaturesQuerySchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "tag": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "\\w+:\\w+"
            },
            "description": "Used to filter by tags. For each entry, a TAGTYPE:TAGVALUE is expected",
            "example": [
              "simple:mytag"
            ]
          },
          "namePrefix": {
            "type": "string",
            "description": "A case-insensitive prefix filter for the names of feature toggles",
            "example": "demo.part1"
          }
        }
      },
      "addonParameterSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "displayName",
          "type",
          "required",
          "sensitive"
        ],
        "description": "An addon parameter definition.",
        "properties": {
          "name": {
            "type": "string",
            "example": "emojiIcon",
            "description": "The name of the parameter as it is used in code. References to this parameter should use this value."
          },
          "displayName": {
            "type": "string",
            "example": "Emoji Icon",
            "description": "The name of the parameter as it is shown to the end user in the Admin UI."
          },
          "type": {
            "type": "string",
            "description": "The type of the parameter. Corresponds roughly to [HTML `input` field types](https://developer.mozilla.org/docs/Web/HTML/Element/Input#input_types). Multi-line inut fields are indicated as `textfield` (equivalent to the HTML `textarea` tag).",
            "example": "text"
          },
          "description": {
            "type": "string",
            "example": "The emoji_icon to use when posting messages to slack. Defaults to \":unleash:\".",
            "description": "A description of the parameter. This should explain to the end user what the parameter is used for."
          },
          "placeholder": {
            "type": "string",
            "example": ":unleash:",
            "description": "The default value for this parameter. This value is used if no other value is provided."
          },
          "required": {
            "type": "boolean",
            "example": false,
            "description": "Whether this parameter is required or not. If a parameter is required, you must give it a value when you create the addon. If it is not required it can be left out. It may receive a default value in those cases."
          },
          "sensitive": {
            "type": "boolean",
            "example": false,
            "description": "Indicates whether this parameter is **sensitive** or not. Unleash will not return sensitive parameters to API requests. It will instead use a number of asterisks to indicate that a value is set, e.g. \"******\". The number of asterisks does not correlate to the parameter's value."
          }
        }
      },
      "addonSchema": {
        "type": "object",
        "description": "An [addon](https://docs.getunleash.io/reference/addons) instance description. Contains data about what kind of provider it uses, whether it's enabled or not, what events it listens for, and more.",
        "required": [
          "id",
          "description",
          "provider",
          "enabled",
          "parameters",
          "events"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1,
            "example": 27,
            "description": "The addon's unique identifier."
          },
          "provider": {
            "type": "string",
            "description": "The addon provider, such as \"webhook\" or \"slack\".",
            "example": "webhook"
          },
          "description": {
            "type": "string",
            "description": "A description of the addon. `null` if no description exists.",
            "example": "This addon posts updates to our internal feature tracking system whenever a feature is created or updated.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the addon is enabled or not."
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {},
            "example": {
              "url": "http://localhost:4242/webhook"
            },
            "description": "Parameters for the addon provider. This object has different required and optional properties depending on the provider you choose."
          },
          "events": {
            "type": "array",
            "description": "The event types that trigger this specific addon.",
            "items": {
              "type": "string"
            },
            "example": [
              "feature-created",
              "feature-updated"
            ]
          },
          "projects": {
            "type": "array",
            "description": "The projects that this addon listens to events from. An empty list means it listens to events from **all** projects.",
            "example": [
              "new-landing-project",
              "signups-v2"
            ],
            "items": {
              "type": "string"
            }
          },
          "environments": {
            "type": "array",
            "description": "The list of environments that this addon listens to events from. An empty list means it listens to events from **all** environments.",
            "example": [
              "development",
              "production"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "addonCreateUpdateSchema": {
        "type": "object",
        "required": [
          "provider",
          "enabled",
          "parameters",
          "events"
        ],
        "description": "Data required to create or update an [Unleash addon](https://docs.getunleash.io/reference/addons) instance.",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The addon provider, such as \"webhook\" or \"slack\". This string is **case sensitive** and maps to the provider's `name` property.\n\nThe list of all supported providers and their parameters for a specific Unleash instance can be found by making a GET request to the `api/admin/addons` endpoint: the `providers` property of that response will contain all available providers.\n\nThe default set of providers can be found in the [addons reference documentation](https://docs.getunleash.io/reference/addons). The default supported options are:\n- `datadog` for [Datadog](https://docs.getunleash.io/reference/addons/datadog)\n- `slack` for [Slack](https://docs.getunleash.io/reference/addons/slack)\n- `teams` for [Microsoft Teams](https://docs.getunleash.io/reference/addons/teams)\n- `webhook` for [webhooks](https://docs.getunleash.io/reference/addons/webhook)\n\nThe provider you choose for your addon dictates what properties the `parameters` object needs. Refer to the documentation for each provider for more information.\n",
            "example": "webhook"
          },
          "description": {
            "type": "string",
            "description": "A description of the addon.",
            "example": "This addon posts updates to our internal feature tracking system whenever a feature is created or updated."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the addon should be enabled or not."
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {},
            "example": {
              "url": "http://localhost:4242/webhook"
            },
            "description": "Parameters for the addon provider. This object has different required and optional properties depending on the provider you choose. Consult the documentation for details."
          },
          "events": {
            "type": "array",
            "description": "The event types that will trigger this specific addon.",
            "items": {
              "type": "string"
            },
            "example": [
              "feature-created",
              "feature-updated"
            ]
          },
          "projects": {
            "type": "array",
            "description": "The projects that this addon will listen to events from. An empty list means it will listen to events from **all** projects.",
            "example": [
              "new-landing-project",
              "signups-v2"
            ],
            "items": {
              "type": "string"
            }
          },
          "environments": {
            "type": "array",
            "description": "The list of environments that this addon will listen to events from. An empty list means it will listen to events from **all** environments.",
            "example": [
              "development",
              "production"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "addonsSchema": {
        "type": "object",
        "required": [
          "addons",
          "providers"
        ],
        "description": "An object containing two things:\n1. A list of all [addons](https://docs.getunleash.io/reference/addons) defined on this Unleash instance\n2. A list of all addon providers defined on this instance",
        "properties": {
          "addons": {
            "type": "array",
            "description": "All the addons that exist on this instance of Unleash.",
            "items": {
              "$ref": "#/components/schemas/addonSchema"
            }
          },
          "providers": {
            "type": "array",
            "description": "A list of  all available addon providers, along with their parameters and descriptions.",
            "example": [
              {
                "name": "webhook",
                "displayName": "Webhook",
                "description": "A Webhook is a generic way to post messages from Unleash to third party services.",
                "documentationUrl": "https://docs.getunleash.io/docs/addons/webhook",
                "parameters": [
                  {
                    "name": "url",
                    "displayName": "Webhook URL",
                    "description": "(Required) Unleash will perform a HTTP Post to the specified URL (one retry if first attempt fails)",
                    "type": "url",
                    "required": true,
                    "sensitive": true
                  },
                  {
                    "name": "contentType",
                    "displayName": "Content-Type",
                    "placeholder": "application/json",
                    "description": "(Optional) The Content-Type header to use. Defaults to \"application/json\".",
                    "type": "text",
                    "required": false,
                    "sensitive": false
                  },
                  {
                    "name": "authorization",
                    "displayName": "Authorization",
                    "placeholder": "",
                    "description": "(Optional) The Authorization header to use. Not used if left blank.",
                    "type": "text",
                    "required": false,
                    "sensitive": true
                  },
                  {
                    "name": "bodyTemplate",
                    "displayName": "Body template",
                    "placeholder": "{\n  \"event\": \"{{event.type}}\",\n  \"createdBy\": \"{{event.createdBy}}\",\n  \"featureToggle\": \"{{event.data.name}}\",\n  \"timestamp\": \"{{event.data.createdAt}}\"\n}",
                    "description": "(Optional) You may format the body using a mustache template. If you don't specify anything, the format will similar to the events format (https://docs.getunleash.io/reference/api/legacy/unleash/admin/events)",
                    "type": "textfield",
                    "required": false,
                    "sensitive": false
                  }
                ],
                "events": [
                  "feature-created",
                  "feature-updated",
                  "feature-archived",
                  "feature-revived",
                  "feature-stale-on",
                  "feature-stale-off",
                  "feature-environment-enabled",
                  "feature-environment-disabled",
                  "feature-strategy-remove",
                  "feature-strategy-update",
                  "feature-strategy-add",
                  "feature-metadata-updated",
                  "feature-variants-updated",
                  "feature-project-change",
                  "feature-tagged",
                  "feature-untagged",
                  "change-request-created",
                  "change-request-discarded",
                  "change-added",
                  "change-discarded",
                  "change-request-approved",
                  "change-request-approval-added",
                  "change-request-cancelled",
                  "change-request-sent-to-review",
                  "change-request-applied"
                ]
              },
              {
                "name": "slack",
                "displayName": "Slack",
                "description": "Allows Unleash to post updates to Slack.",
                "documentationUrl": "https://docs.getunleash.io/docs/addons/slack",
                "parameters": [
                  {
                    "name": "url",
                    "displayName": "Slack webhook URL",
                    "description": "(Required)",
                    "type": "url",
                    "required": true,
                    "sensitive": true
                  },
                  {
                    "name": "username",
                    "displayName": "Username",
                    "placeholder": "Unleash",
                    "description": "The username to use when posting messages to slack. Defaults to \"Unleash\".",
                    "type": "text",
                    "required": false,
                    "sensitive": false
                  },
                  {
                    "name": "emojiIcon",
                    "displayName": "Emoji Icon",
                    "placeholder": ":unleash:",
                    "description": "The emoji_icon to use when posting messages to slack. Defaults to \":unleash:\".",
                    "type": "text",
                    "required": false,
                    "sensitive": false
                  },
                  {
                    "name": "defaultChannel",
                    "displayName": "Default channel",
                    "description": "(Required) Default channel to post updates to if not specified in the slack-tag",
                    "type": "text",
                    "required": true,
                    "sensitive": false
                  }
                ],
                "events": [
                  "feature-created",
                  "feature-updated",
                  "feature-archived",
                  "feature-revived",
                  "feature-stale-on",
                  "feature-stale-off",
                  "feature-environment-enabled",
                  "feature-environment-disabled",
                  "feature-strategy-remove",
                  "feature-strategy-update",
                  "feature-strategy-add",
                  "feature-metadata-updated",
                  "feature-variants-updated",
                  "feature-project-change"
                ],
                "tagTypes": [
                  {
                    "name": "slack",
                    "description": "Slack tag used by the slack-addon to specify the slack channel.",
                    "icon": "S"
                  }
                ]
              },
              {
                "name": "teams",
                "displayName": "Microsoft Teams",
                "description": "Allows Unleash to post updates to Microsoft Teams.",
                "documentationUrl": "https://docs.getunleash.io/docs/addons/teams",
                "parameters": [
                  {
                    "name": "url",
                    "displayName": "Microsoft Teams webhook URL",
                    "description": "(Required)",
                    "type": "url",
                    "required": true,
                    "sensitive": true
                  }
                ],
                "events": [
                  "feature-created",
                  "feature-updated",
                  "feature-archived",
                  "feature-revived",
                  "feature-stale-on",
                  "feature-stale-off",
                  "feature-environment-enabled",
                  "feature-environment-disabled",
                  "feature-strategy-remove",
                  "feature-strategy-update",
                  "feature-strategy-add",
                  "feature-metadata-updated",
                  "feature-variants-updated",
                  "feature-project-change"
                ]
              },
              {
                "name": "datadog",
                "displayName": "Datadog",
                "description": "Allows Unleash to post updates to Datadog.",
                "documentationUrl": "https://docs.getunleash.io/docs/addons/datadog",
                "parameters": [
                  {
                    "name": "url",
                    "displayName": "Datadog Events URL",
                    "description": "Default url: https://api.datadoghq.com/api/v1/events. Needs to be changed if your not using the US1 site.",
                    "type": "url",
                    "required": false,
                    "sensitive": false
                  },
                  {
                    "name": "apiKey",
                    "displayName": "Datadog API key",
                    "placeholder": "j96c23b0f12a6b3434a8d710110bd862",
                    "description": "(Required) API key from Datadog",
                    "type": "text",
                    "required": true,
                    "sensitive": true
                  }
                ],
                "events": [
                  "feature-created",
                  "feature-updated",
                  "feature-archived",
                  "feature-revived",
                  "feature-stale-on",
                  "feature-stale-off",
                  "feature-environment-enabled",
                  "feature-environment-disabled",
                  "feature-strategy-remove",
                  "feature-strategy-update",
                  "feature-strategy-add",
                  "feature-metadata-updated",
                  "feature-project-change",
                  "feature-variants-updated"
                ],
                "tagTypes": [
                  {
                    "name": "datadog",
                    "description": "All Datadog tags added to a specific feature are sent to datadog event stream.",
                    "icon": "D"
                  }
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/addonTypeSchema"
            }
          }
        }
      },
      "addonTypeSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "displayName",
          "documentationUrl",
          "description"
        ],
        "description": "An addon provider. Defines a specific addon type and what the end user must configure when creating a new addon of that type.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the addon type. When creating new addons, this goes in the payload's `type` field.",
            "example": "slack"
          },
          "displayName": {
            "type": "string",
            "description": "The addon type's name as it should be displayed in the admin UI.",
            "example": "Slack"
          },
          "documentationUrl": {
            "type": "string",
            "description": "A URL to where you can find more information about using this addon type.",
            "example": "https://docs.getunleash.io/docs/addons/slack"
          },
          "description": {
            "type": "string",
            "description": "A description of the addon type.",
            "example": "Allows Unleash to post updates to Slack."
          },
          "tagTypes": {
            "type": "array",
            "description": "A list of [Unleash tag types](https://docs.getunleash.io/reference/tags#tag-types) that this addon uses. These tags will be added to the Unleash instance when an addon of this type is created.",
            "example": [
              {
                "name": "slack",
                "description": "Slack tag used by the slack-addon to specify the slack channel.",
                "icon": "S"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/tagTypeSchema"
            }
          },
          "parameters": {
            "type": "array",
            "description": "The addon provider's parameters. Use these to configure an addon of this provider type. Items with `required: true` must be provided.",
            "items": {
              "$ref": "#/components/schemas/addonParameterSchema"
            },
            "example": [
              {
                "name": "url",
                "displayName": "Slack webhook URL",
                "description": "(Required)",
                "type": "url",
                "required": true,
                "sensitive": true
              },
              {
                "name": "username",
                "displayName": "Username",
                "placeholder": "Unleash",
                "description": "The username to use when posting messages to slack. Defaults to \"Unleash\".",
                "type": "text",
                "required": false,
                "sensitive": false
              },
              {
                "name": "emojiIcon",
                "displayName": "Emoji Icon",
                "placeholder": ":unleash:",
                "description": "The emoji_icon to use when posting messages to slack. Defaults to \":unleash:\".",
                "type": "text",
                "required": false,
                "sensitive": false
              },
              {
                "name": "defaultChannel",
                "displayName": "Default channel",
                "description": "(Required) Default channel to post updates to if not specified in the slack-tag",
                "type": "text",
                "required": true,
                "sensitive": false
              }
            ]
          },
          "events": {
            "type": "array",
            "description": "All the [event types](https://docs.getunleash.io/reference/api/legacy/unleash/admin/events#feature-toggle-events) that are available for this addon provider.",
            "items": {
              "type": "string"
            },
            "example": [
              "feature-created",
              "feature-updated",
              "feature-archived",
              "feature-revived",
              "feature-stale-on",
              "feature-stale-off",
              "feature-environment-enabled",
              "feature-environment-disabled",
              "feature-strategy-remove",
              "feature-strategy-update",
              "feature-strategy-add",
              "feature-metadata-updated",
              "feature-variants-updated",
              "feature-project-change"
            ]
          }
        }
      },
      "advancedPlaygroundEnvironmentFeatureSchema": {
        "description": "A simplified feature toggle model intended for the Unleash playground.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "environment",
          "context",
          "projectId",
          "isEnabled",
          "isEnabledInCurrentEnvironment",
          "variant",
          "variants",
          "strategies"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "my-feature",
            "description": "The feature's name."
          },
          "environment": {
            "type": "string",
            "example": "development",
            "description": "The feature's environment."
          },
          "context": {
            "description": "The context to use when evaluating toggles",
            "$ref": "#/components/schemas/sdkContextSchema"
          },
          "projectId": {
            "type": "string",
            "example": "my-project",
            "description": "The ID of the project that contains this feature."
          },
          "strategies": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "result",
              "data"
            ],
            "description": "Feature's applicable strategies and cumulative results of the strategies",
            "properties": {
              "result": {
                "description": "The cumulative results of all the feature's strategies. Can be `true`,\n                                  `false`, or `unknown`.\n                                  This property will only be `unknown`\n                                  if one or more of the strategies can't be fully evaluated and the rest of the strategies\n                                  all resolve to `false`.",
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "unknown"
                    ]
                  }
                ]
              },
              "data": {
                "description": "The strategies that apply to this feature.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/playgroundStrategySchema"
                }
              }
            }
          },
          "isEnabledInCurrentEnvironment": {
            "type": "boolean",
            "description": "Whether the feature is active and would be evaluated in the provided environment in a normal SDK context."
          },
          "isEnabled": {
            "description": "Whether this feature is enabled or not in the current environment.\n                          If a feature can't be fully evaluated (that is, `strategies.result` is `unknown`),\n                          this will be `false` to align with how client SDKs treat unresolved feature states.",
            "type": "boolean",
            "example": true
          },
          "variant": {
            "description": "The feature variant you receive based on the provided context or the _disabled\n                          variant_. If a feature is disabled or doesn't have any\n                          variants, you would get the _disabled variant_.\n                          Otherwise, you'll get one of thefeature's defined variants.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "name",
              "enabled"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The variant's name. If there is no variant or if the toggle is disabled, this will be `disabled`",
                "example": "red-variant"
              },
              "enabled": {
                "type": "boolean",
                "description": "Whether the variant is enabled or not. If the feature is disabled or if it doesn't have variants, this property will be `false`"
              },
              "payload": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "type",
                  "value"
                ],
                "description": "An optional payload attached to the variant.",
                "properties": {
                  "type": {
                    "description": "The format of the payload.",
                    "type": "string",
                    "enum": [
                      "json",
                      "csv",
                      "string"
                    ]
                  },
                  "value": {
                    "type": "string",
                    "description": "The payload value stringified.",
                    "example": "{\"property\": \"value\"}"
                  }
                }
              }
            },
            "nullable": true,
            "example": {
              "name": "green",
              "enabled": true
            }
          },
          "variants": {
            "type": "array",
            "description": "The feature variants.",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            }
          }
        }
      },
      "advancedPlaygroundFeatureSchema": {
        "description": "A simplified feature toggle model intended for the Unleash playground.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "projectId",
          "environments"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "my-feature",
            "description": "The feature's name."
          },
          "projectId": {
            "type": "string",
            "example": "my-project",
            "description": "The ID of the project that contains this feature."
          },
          "environments": {
            "type": "object",
            "description": "The lists of features that have been evaluated grouped by environment.",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/advancedPlaygroundEnvironmentFeatureSchema"
              }
            }
          }
        }
      },
      "advancedPlaygroundRequestSchema": {
        "description": "Data for the playground API to evaluate toggles in advanced mode with environment and context multi selection",
        "type": "object",
        "required": [
          "environments",
          "context"
        ],
        "properties": {
          "environments": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9~_.-]+$"
            },
            "minItems": 1,
            "example": [
              "development",
              "production"
            ],
            "description": "The environments to evaluate toggles in."
          },
          "projects": {
            "description": "A list of projects to check for toggles in.",
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "my-project"
                ],
                "description": "A list of projects to check for toggles in."
              },
              {
                "type": "string",
                "enum": [
                  "*"
                ],
                "description": "Check toggles in all projects."
              }
            ]
          },
          "context": {
            "$ref": "#/components/schemas/sdkContextSchema"
          }
        }
      },
      "advancedPlaygroundResponseSchema": {
        "description": "The state of all features given the provided input.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "features",
          "input"
        ],
        "properties": {
          "input": {
            "description": "The given input used to evaluate the features.",
            "$ref": "#/components/schemas/advancedPlaygroundRequestSchema"
          },
          "features": {
            "type": "array",
            "description": "The list of features that have been evaluated.",
            "items": {
              "$ref": "#/components/schemas/advancedPlaygroundFeatureSchema"
            }
          }
        }
      },
      "apiTokenSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "secret",
          "tokenName",
          "type",
          "project",
          "projects",
          "createdAt"
        ],
        "description": "An overview of an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys).",
        "properties": {
          "secret": {
            "type": "string",
            "description": "The token used for authentication.",
            "example": "project:environment.xyzrandomstring"
          },
          "username": {
            "type": "string",
            "deprecated": true,
            "description": "This property was deprecated in Unleash v5. Prefer the `tokenName` property instead.",
            "example": "a-name"
          },
          "tokenName": {
            "type": "string",
            "description": "A unique name for this particular token",
            "example": "some-user"
          },
          "type": {
            "type": "string",
            "enum": [
              "client",
              "admin",
              "frontend"
            ],
            "description": "The type of API token",
            "example": "client"
          },
          "environment": {
            "type": "string",
            "description": "The environment the token has access to. `*` if it has access to all environments.",
            "example": "development"
          },
          "project": {
            "type": "string",
            "description": "The project this token belongs to.",
            "example": "developerexperience"
          },
          "projects": {
            "type": "array",
            "description": "The list of projects this token has access to. If the token has access to specific projects they will be listed here. If the token has access to all projects it will be represented as `[*]`",
            "items": {
              "type": "string"
            },
            "example": [
              "developerexperience",
              "enterprisegrowth"
            ]
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The token's expiration date. NULL if the token doesn't have an expiration set.",
            "example": "2023-04-19T08:15:14.000Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-04-19T08:15:14.000Z",
            "description": "When the token was created."
          },
          "seenAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-04-19T08:15:14.000Z",
            "description": "When the token was last seen/used to authenticate with. NULL if the token has not yet been used for authentication."
          },
          "alias": {
            "type": "string",
            "nullable": true,
            "description": "Alias is no longer in active use and will often be NULL. It's kept around as a way of allowing old proxy tokens created with the old metadata format to keep working.",
            "example": "randomid-or-some-alias"
          }
        }
      },
      "apiTokensSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "tokens"
        ],
        "description": "Contains a list of API tokens.",
        "properties": {
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/apiTokenSchema"
            },
            "description": "A list of API tokens."
          }
        }
      },
      "applicationSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "appName"
        ],
        "properties": {
          "appName": {
            "description": "Name of the application",
            "type": "string",
            "example": "accounting"
          },
          "sdkVersion": {
            "description": "Which SDK and version the application reporting uses. Typically represented as `<identifier>:<version>`",
            "type": "string",
            "example": "unleash-client-java:8.0.0"
          },
          "strategies": {
            "description": "Which [strategies](https://docs.getunleash.io/topics/the-anatomy-of-unleash#activation-strategies) the application has loaded. Useful when trying to figure out if your [custom strategy](https://docs.getunleash.io/reference/custom-activation-strategies) has been loaded in the SDK",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "standard",
              "gradualRollout",
              "mySpecialCustomStrategy"
            ]
          },
          "description": {
            "description": "Extra information added about the application reporting the metrics. Only present if added via the Unleash Admin interface",
            "type": "string",
            "example": "Application for reporting page visits"
          },
          "url": {
            "description": "A link to reference the application reporting the metrics. Could for instance be a GitHub link to the repository of the application",
            "type": "string",
            "example": "https://github.com/Unleash/unleash-client-proxy-js"
          },
          "color": {
            "description": "The CSS color that is used to color the application's entry in the application list",
            "type": "string",
            "example": "red"
          },
          "icon": {
            "description": "An URL to an icon file to be used for the applications's entry in the application list",
            "type": "string",
            "example": "https://github.com/favicon.ico"
          }
        }
      },
      "applicationsSchema": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "applications": {
            "description": "Contains a list of applications that have connected via an SDK",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationSchema"
            }
          }
        }
      },
      "batchFeaturesSchema": {
        "type": "object",
        "required": [
          "features"
        ],
        "properties": {
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "batchStaleSchema": {
        "type": "object",
        "required": [
          "features",
          "stale"
        ],
        "properties": {
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "stale": {
            "type": "boolean"
          }
        }
      },
      "bulkRegistrationSchema": {
        "type": "object",
        "required": [
          "appName",
          "instanceId",
          "environment"
        ],
        "description": "An application registration. Defines the format POSTed by our server-side SDKs when they're starting up",
        "properties": {
          "connectVia": {
            "type": "array",
            "description": "A list of applications this app registration has been registered through. If connected directly to Unleash, this is an empty list. \n This can be used in later visualizations to tell how many levels of proxy or Edge instances our SDKs have connected through",
            "items": {
              "type": "object",
              "required": [
                "appName",
                "instanceId"
              ],
              "properties": {
                "appName": {
                  "type": "string"
                },
                "instanceId": {
                  "type": "string"
                }
              }
            },
            "example": [
              {
                "appName": "unleash-edge",
                "instanceId": "edge-pod-bghzv5"
              }
            ]
          },
          "appName": {
            "description": "The name of the application that is evaluating toggles",
            "type": "string",
            "example": "Ingress load balancer"
          },
          "environment": {
            "description": "Which environment the application is running in",
            "type": "string",
            "example": "development"
          },
          "instanceId": {
            "description": "A [(somewhat) unique identifier](https://docs.getunleash.io/reference/sdks/node#advanced-usage) for the application",
            "type": "string",
            "example": "application-name-dacb1234"
          },
          "interval": {
            "description": "How often (in seconds) the application refreshes its features",
            "type": "number",
            "example": 10
          },
          "started": {
            "description": "The application started at",
            "example": "1952-03-11T12:00:00.000Z",
            "$ref": "#/components/schemas/dateSchema"
          },
          "strategies": {
            "description": "Enabled [strategies](https://docs.getunleash.io/reference/activation-strategies) in the application",
            "type": "array",
            "example": [
              "standard",
              "gradualRollout"
            ],
            "items": {
              "type": "string"
            }
          },
          "sdkVersion": {
            "description": "The version the sdk is running. Typically <client>:<version>",
            "example": "unleash-client-java:8.0.0",
            "type": "string"
          }
        }
      },
      "bulkMetricsSchema": {
        "type": "object",
        "required": [
          "applications",
          "metrics"
        ],
        "description": "A batch of metrics accumulated by Edge (or other compatible applications). Includes both application registrations as well usage metrics from clients",
        "properties": {
          "applications": {
            "description": "A list of applications registered by an Unleash SDK",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bulkRegistrationSchema"
            }
          },
          "metrics": {
            "description": "a list of client usage metrics registered by downstream providers. (Typically Unleash Edge)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/clientMetricsEnvSchema"
            }
          }
        }
      },
      "bulkToggleFeaturesSchema": {
        "type": "object",
        "required": [
          "features"
        ],
        "description": "The feature list used for bulk toggle operations",
        "properties": {
          "features": {
            "type": "array",
            "description": "The features that we want to bulk toggle",
            "items": {
              "type": "string",
              "description": "The feature name we want to toggle"
            },
            "example": [
              "feature-a",
              "feature-b"
            ]
          }
        }
      },
      "changePasswordSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "token",
          "password"
        ],
        "properties": {
          "token": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "clientApplicationSchema": {
        "type": "object",
        "required": [
          "appName",
          "interval",
          "started",
          "strategies"
        ],
        "description": "A client application is an instance of one of our SDKs",
        "properties": {
          "appName": {
            "description": "An identifier for the app that uses the sdk, should be static across SDK restarts",
            "type": "string",
            "example": "example-app"
          },
          "instanceId": {
            "description": "A unique identifier identifying the instance of the application running the SDK. Often changes based on execution environment. For instance: two pods in Kubernetes will have two different instanceIds",
            "type": "string",
            "example": "b77f3d13-5f48-4a7b-a3f4-a449b97ce43a"
          },
          "sdkVersion": {
            "type": "string",
            "description": "An SDK version identifier. Usually formatted as \"unleash-client-<language>:<version>\"",
            "example": "unleash-client-java:7.0.0"
          },
          "environment": {
            "description": "The SDK's configured 'environment' property. Deprecated. This property  does **not** control which Unleash environment the SDK gets toggles for. To control Unleash environments, use the SDKs API key.",
            "deprecated": true,
            "type": "string",
            "example": "development"
          },
          "interval": {
            "type": "number",
            "description": "How often (in seconds) does the client refresh its toggles",
            "example": 10,
            "minimum": 0
          },
          "started": {
            "description": "Either an RFC-3339 timestamp or a unix timestamp in seconds",
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "number"
              }
            ],
            "example": "2023-06-13T16:35:00.000Z"
          },
          "strategies": {
            "description": "Which strategies the SDKs runtime knows about",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "default",
              "gradualRollout",
              "remoteAddress"
            ]
          }
        }
      },
      "clientFeatureSchema": {
        "type": "object",
        "required": [
          "name",
          "enabled"
        ],
        "description": "Feature toggle configuration used by SDKs to evaluate state of a toggle",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The unique name of a feature toggle. Is validated to be URL safe on creation",
            "example": "new.payment.flow.stripe"
          },
          "type": {
            "type": "string",
            "description": "What kind of feature flag is this. Refer to the documentation on [feature toggle types](https://docs.getunleash.io/reference/feature-toggle-types) for more information",
            "example": "release"
          },
          "description": {
            "type": "string",
            "description": "A description of the toggle",
            "nullable": true,
            "example": "No variants here"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the feature flag is enabled for the current API key or not. This is ANDed with the evaluation results of the strategies list, so if this is false, the evaluation result will always be false",
            "example": true
          },
          "stale": {
            "description": "If this is true Unleash believes this feature toggle has been active longer than Unleash expects a toggle of this type to be active",
            "type": "boolean",
            "example": false
          },
          "impressionData": {
            "description": "Set to true if SDKs should trigger [impression events](https://docs.getunleash.io/reference/impression-data) when this toggle is evaluated",
            "type": "boolean",
            "nullable": true,
            "example": false
          },
          "project": {
            "description": "Which project this feature toggle belongs to",
            "type": "string",
            "example": "new.payment.flow"
          },
          "strategies": {
            "type": "array",
            "description": "Evaluation strategies for this toggle. Each entry in this list will be evaluated and ORed together",
            "items": {
              "$ref": "#/components/schemas/featureStrategySchema"
            }
          },
          "variants": {
            "type": "array",
            "description": "[Variants](https://docs.getunleash.io/reference/feature-toggle-variants#what-are-variants) configured for this toggle",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            },
            "nullable": true
          }
        }
      },
      "clientFeaturesQuerySchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Query parameters active for a client features request",
        "properties": {
          "tag": {
            "type": "array",
            "description": "Features tagged with one of these tags are included",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": [
              [
                "simple:payment",
                "simple:stripejourney"
              ]
            ]
          },
          "project": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Features that are part of these projects are included in this response. (DEPRECATED) - Handled by API tokens",
            "example": [
              "new.payment.flow"
            ],
            "deprecated": true
          },
          "namePrefix": {
            "description": "Features are filtered to only include features whose name starts with this prefix",
            "type": "string",
            "example": "payment"
          },
          "environment": {
            "type": "string",
            "description": "Strategies for the feature toggle configured for this environment are included. (DEPRECATED) - Handled by API tokens",
            "deprecated": true
          },
          "inlineSegmentConstraints": {
            "description": "Set to true if requesting client does not support Unleash-Client-Specification 4.2.2 or newer. Modern SDKs will have this set to false, since they will be able to merge constraints and segments themselves",
            "type": "boolean",
            "example": true
          }
        }
      },
      "clientFeaturesSchema": {
        "type": "object",
        "required": [
          "version",
          "features"
        ],
        "description": "Configuration data for server-side SDKs for evaluating feature flags.",
        "properties": {
          "version": {
            "type": "number",
            "description": "A version number for the format used in the response. Most Unleash instances now return version 2, which includes segments as a separate array",
            "example": 2,
            "minimum": 0
          },
          "features": {
            "description": "A list of feature toggles with their configuration",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/clientFeatureSchema"
            }
          },
          "segments": {
            "description": "A list of [Segments](https://docs.getunleash.io/reference/segments) configured for this Unleash instance",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/segmentSchema"
            }
          },
          "query": {
            "description": "A summary of filters and parameters sent to the endpoint. Used by the server to build the features and segments response",
            "$ref": "#/components/schemas/clientFeaturesQuerySchema"
          }
        }
      },
      "clientMetricsSchema": {
        "type": "object",
        "required": [
          "appName",
          "bucket"
        ],
        "description": "Client usage metrics, accumulated in buckets of hour by hour by default",
        "properties": {
          "appName": {
            "description": "The name of the application that is evaluating toggles",
            "type": "string",
            "example": "insurance-selector"
          },
          "instanceId": {
            "description": "A [(somewhat) unique identifier](https://docs.getunleash.io/reference/sdks/node#advanced-usage) for the application",
            "type": "string",
            "example": "application-name-dacb1234"
          },
          "environment": {
            "description": "Which environment the application is running in",
            "type": "string",
            "example": "development"
          },
          "bucket": {
            "type": "object",
            "required": [
              "start",
              "stop",
              "toggles"
            ],
            "description": "Holds all metrics gathered over a window of time. Typically 1 hour wide",
            "properties": {
              "start": {
                "$ref": "#/components/schemas/dateSchema",
                "description": "The start of the time window these metrics are valid for. The window is usually 1 hour wide",
                "example": "1926-05-08T12:00:00.000Z"
              },
              "stop": {
                "$ref": "#/components/schemas/dateSchema",
                "description": "The end of the time window these metrics are valid for. The window is 1 hour wide",
                "example": "1926-05-08T13:00:00.000Z"
              },
              "toggles": {
                "type": "object",
                "description": "an object containing feature names with yes/no plus variant usage",
                "example": {
                  "myCoolToggle": {
                    "yes": 25,
                    "no": 42,
                    "variants": {
                      "blue": 6,
                      "green": 15,
                      "red": 46
                    }
                  },
                  "myOtherToggle": {
                    "yes": 0,
                    "no": 100
                  }
                },
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "yes": {
                      "description": "How many times the toggle evaluated to true",
                      "type": "number",
                      "example": 974,
                      "minimum": 0
                    },
                    "no": {
                      "description": "How many times the toggle evaluated to false",
                      "type": "integer",
                      "example": 50,
                      "minimum": 0
                    },
                    "variants": {
                      "description": "An object describing how many times each variant was returned. Variant names are used as properties, and the number of times they were exposed is the corresponding value (i.e. `{ [variantName]: number }`).",
                      "type": "object",
                      "additionalProperties": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "example": {
                        "variantA": 15,
                        "variantB": 25,
                        "variantC": 5
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "clientMetricsEnvSchema": {
        "type": "object",
        "required": [
          "featureName",
          "appName",
          "environment"
        ],
        "additionalProperties": true,
        "description": "Used for reporting feature evaluation results from SDKs",
        "properties": {
          "featureName": {
            "type": "string",
            "description": "Name of the feature checked by the SDK",
            "example": "my.special.feature"
          },
          "appName": {
            "description": "The name of the application the SDK is being used in",
            "type": "string",
            "example": "accounting"
          },
          "environment": {
            "description": "Which environment the SDK is being used in",
            "type": "string",
            "example": "development"
          },
          "timestamp": {
            "description": "The start of the time window these metrics are valid for. The window is 1 hour wide",
            "example": "1926-05-08T12:00:00.000Z",
            "$ref": "#/components/schemas/dateSchema"
          },
          "yes": {
            "description": "How many times the toggle evaluated to true",
            "type": "integer",
            "example": 974,
            "minimum": 0
          },
          "no": {
            "description": "How many times the toggle evaluated to false",
            "type": "integer",
            "example": 50,
            "minimum": 0
          },
          "variants": {
            "description": "How many times each variant was returned",
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            },
            "example": {
              "variantA": 15,
              "variantB": 25,
              "variantC": 5
            }
          }
        }
      },
      "cloneFeatureSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "replaceGroupId": {
            "type": "boolean"
          }
        }
      },
      "constraintSchema": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "contextName",
          "operator"
        ],
        "description": "A strategy constraint. For more information, refer to [the strategy constraint reference documentation](https://docs.getunleash.io/reference/strategy-constraints)",
        "properties": {
          "contextName": {
            "description": "The name of the context field that this constraint should apply to.",
            "example": "appName",
            "type": "string"
          },
          "operator": {
            "description": "The operator to use when evaluating this constraint. For more information about the various operators, refer to [the strategy constraint operator documentation](https://docs.getunleash.io/reference/strategy-constraints#strategy-constraint-operators).",
            "type": "string",
            "enum": [
              "NOT_IN",
              "IN",
              "STR_ENDS_WITH",
              "STR_STARTS_WITH",
              "STR_CONTAINS",
              "NUM_EQ",
              "NUM_GT",
              "NUM_GTE",
              "NUM_LT",
              "NUM_LTE",
              "DATE_AFTER",
              "DATE_BEFORE",
              "SEMVER_EQ",
              "SEMVER_GT",
              "SEMVER_LT"
            ],
            "example": "IN"
          },
          "caseInsensitive": {
            "description": "Whether the operator should be case sensitive or not. Defaults to `false` (being case sensitive).",
            "type": "boolean",
            "default": false
          },
          "inverted": {
            "description": "Whether the result should be negated or not. If `true`, will turn a `true` result into a `false` result and vice versa.",
            "type": "boolean",
            "default": false
          },
          "values": {
            "type": "array",
            "description": "The context values that should be used for constraint evaluation. Use this property instead of `value` for properties that accept multiple values.",
            "items": {
              "type": "string"
            },
            "example": [
              "my-app",
              "my-other-app"
            ]
          },
          "value": {
            "description": "The context value that should be used for constraint evaluation. Use this property instead of `values` for properties that only accept single values.",
            "type": "string",
            "example": "my-app"
          }
        }
      },
      "contextFieldSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "stickiness": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "number"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "usedInFeatures": {
            "type": "number",
            "description": "Number of projects where this context field is used in",
            "example": 3,
            "nullable": true
          },
          "usedInProjects": {
            "type": "number",
            "description": "Number of projects where this context field is used in",
            "example": 2,
            "nullable": true
          },
          "legalValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/legalValueSchema"
            }
          }
        }
      },
      "contextFieldsSchema": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/contextFieldSchema"
        }
      },
      "createApiTokenSchema": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "secret": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "One of client, admin, frontend"
          },
          "environment": {
            "type": "string"
          },
          "project": {
            "type": "string"
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "anyOf": [
          {
            "properties": {
              "username": {
                "type": "string"
              }
            },
            "required": [
              "username"
            ]
          },
          {
            "properties": {
              "tokenName": {
                "type": "string"
              }
            },
            "required": [
              "tokenName"
            ]
          }
        ]
      },
      "createApplicationSchema": {
        "type": "object",
        "additionalProperties": true,
        "description": "Reported application information from Unleash SDKs",
        "properties": {
          "appName": {
            "description": "Name of the application",
            "type": "string",
            "example": "accounting"
          },
          "sdkVersion": {
            "description": "Which SDK and version the application reporting uses. Typically represented as `<identifier>:<version>`",
            "type": "string",
            "example": "unleash-client-java:8.0.0"
          },
          "strategies": {
            "description": "Which [strategies](https://docs.getunleash.io/topics/the-anatomy-of-unleash#activation-strategies) the application has loaded. Useful when trying to figure out if your [custom strategy](https://docs.getunleash.io/reference/custom-activation-strategies) has been loaded in the SDK",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "standard",
              "gradualRollout",
              "mySpecialCustomStrategy"
            ]
          },
          "url": {
            "description": "A link to reference the application reporting the metrics. Could for instance be a GitHub link to the repository of the application",
            "type": "string",
            "example": "https://github.com/Unleash/unleash-client-proxy-js"
          },
          "color": {
            "description": "Css color to be used to color the application's entry in the application list",
            "type": "string",
            "example": "red"
          },
          "icon": {
            "description": "An URL to an icon file to be used for the applications's entry in the application list",
            "type": "string",
            "example": "https://github.com/favicon.ico"
          }
        }
      },
      "createFeatureSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "impressionData": {
            "type": "boolean"
          }
        }
      },
      "createFeatureStrategySchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name or type of strategy",
            "example": "flexibleRollout"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "description": "A descriptive title for the strategy",
            "example": "Gradual Rollout 25-Prod"
          },
          "disabled": {
            "type": "boolean",
            "description": "A toggle to disable the strategy. defaults to false. Disabled strategies are not evaluated or returned to the SDKs",
            "example": false,
            "nullable": true
          },
          "sortOrder": {
            "type": "number",
            "description": "The order of the strategy in the list",
            "example": 9999
          },
          "constraints": {
            "type": "array",
            "description": "A list of the constraints attached to the strategy",
            "example": [
              {
                "values": [
                  "1",
                  "2"
                ],
                "inverted": false,
                "operator": "IN",
                "contextName": "appName",
                "caseInsensitive": false
              }
            ],
            "items": {
              "$ref": "#/components/schemas/constraintSchema"
            }
          },
          "parameters": {
            "description": "An object containing the parameters for the strategy",
            "example": {
              "groupId": "some_new",
              "rollout": "25",
              "stickiness": "sessionId"
            },
            "$ref": "#/components/schemas/parametersSchema"
          },
          "segments": {
            "type": "array",
            "description": "Ids of segments to use for this strategy",
            "example": [
              1,
              2
            ],
            "items": {
              "type": "number"
            }
          }
        }
      },
      "createInvitedUserSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email",
          "name",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "createUserSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "rootRole"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "rootRole": {
            "type": "number"
          },
          "sendEmail": {
            "type": "boolean"
          }
        }
      },
      "dateSchema": {
        "oneOf": [
          {
            "type": "string",
            "format": "date-time"
          },
          {
            "type": "number"
          }
        ]
      },
      "edgeTokenSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "token",
          "projects",
          "type"
        ],
        "description": "A representation of a client token, limiting access to [CLIENT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#client-tokens) (used by serverside SDKs) or [FRONTEND](https://docs.getunleash.io/reference/api-tokens-and-client-keys#front-end-tokens) (used by proxy SDKs)",
        "properties": {
          "projects": {
            "description": "The list of projects this token has access to. If the token has access to specific projects they will be listed here. If the token has access to all projects it will be represented as [`*`]",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "developerexperience",
              "enterprisegrowth"
            ]
          },
          "type": {
            "description": "The [API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys#api-tokens)'s **type**. Unleash supports three different types of API tokens ([ADMIN](https://docs.getunleash.io/reference/api-tokens-and-client-keys#admin-tokens), [CLIENT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#client-tokens), [FRONTEND](https://docs.getunleash.io/reference/api-tokens-and-client-keys#front-end-tokens)). They all have varying access, so when validating a token it's important to know what kind you're dealing with",
            "type": "string",
            "enum": [
              "client",
              "admin",
              "frontend"
            ],
            "example": "client"
          },
          "token": {
            "description": "The actual token value. [Unleash API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys) are comprised of three parts. <project(s)>:<environment>.randomcharacters",
            "type": "string",
            "example": "*:development.5c806b5320c88cf27e81f3e9b97dab298a77d5879316e3c2d806206b"
          }
        }
      },
      "emailSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "environmentSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "type",
          "enabled",
          "protected",
          "sortOrder"
        ],
        "description": "A definition of the project environment",
        "properties": {
          "name": {
            "type": "string",
            "example": "my-dev-env",
            "description": "The name of the environment"
          },
          "type": {
            "type": "string",
            "example": "development",
            "description": "The [type of environment](https://docs.getunleash.io/reference/environments#environment-types)."
          },
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the environment is enabled for the project, otherwise `false`."
          },
          "protected": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the environment is protected, otherwise `false`. A *protected* environment can not be deleted."
          },
          "sortOrder": {
            "type": "integer",
            "example": 3,
            "description": "Priority of the environment in a list of environments, the lower the value, the higher up in the list the environment will appear. Needs to be an integer"
          },
          "projectCount": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "example": 10,
            "description": "The number of projects with this environment"
          },
          "apiTokenCount": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "example": 6,
            "description": "The number of API tokens for the project environment"
          },
          "enabledToggleCount": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "example": 10,
            "description": "The number of enabled toggles for the project environment"
          }
        }
      },
      "environmentProjectSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "type",
          "enabled",
          "protected",
          "sortOrder"
        ],
        "description": "Describes a project's configuration in a given environment.",
        "properties": {
          "name": {
            "type": "string",
            "example": "development",
            "description": "The name of the environment"
          },
          "type": {
            "type": "string",
            "example": "production",
            "description": "The [type of environment](https://docs.getunleash.io/reference/environments#environment-types)."
          },
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the environment is enabled for the project, otherwise `false`"
          },
          "protected": {
            "type": "boolean",
            "example": false,
            "description": "`true` if the environment is protected, otherwise `false`. A *protected* environment can not be deleted."
          },
          "sortOrder": {
            "type": "integer",
            "example": 1,
            "description": "Priority of the environment in a list of environments, the lower the value, the higher up in the list the environment will appear"
          },
          "projectApiTokenCount": {
            "type": "integer",
            "minimum": 0,
            "example": 5,
            "description": "The number of client and front-end API tokens that have access to this project"
          },
          "projectEnabledToggleCount": {
            "type": "integer",
            "minimum": 0,
            "example": 7,
            "description": "The number of features enabled in this environment for this project"
          },
          "defaultStrategy": {
            "description": "The strategy configuration to add when enabling a feature environment by default",
            "$ref": "#/components/schemas/createFeatureStrategySchema"
          }
        }
      },
      "environmentsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "environments"
        ],
        "properties": {
          "version": {
            "type": "integer"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/environmentSchema"
            }
          }
        }
      },
      "environmentsProjectSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "environments"
        ],
        "description": "Environments defined for a given project",
        "properties": {
          "version": {
            "type": "integer"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/environmentProjectSchema"
            }
          }
        }
      },
      "eventSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "createdAt",
          "type",
          "createdBy"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "environment": {
            "type": "string",
            "nullable": true
          },
          "project": {
            "type": "string",
            "nullable": true
          },
          "featureName": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "object",
            "nullable": true
          },
          "preData": {
            "type": "object",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tagSchema"
            },
            "nullable": true
          }
        }
      },
      "eventsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "events"
        ],
        "properties": {
          "version": {
            "type": "integer",
            "minimum": 1
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/eventSchema"
            }
          },
          "totalEvents": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "exportResultSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "features",
          "featureStrategies",
          "tagTypes"
        ],
        "properties": {
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureSchema"
            }
          },
          "featureStrategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureStrategySchema"
            }
          },
          "featureEnvironments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureEnvironmentSchema"
            }
          },
          "contextFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/contextFieldSchema"
            }
          },
          "featureTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureTagSchema"
            }
          },
          "segments": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "number"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "tagTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tagTypeSchema"
            }
          }
        }
      },
      "exportQuerySchema": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "environment"
        ],
        "properties": {
          "environment": {
            "type": "string"
          },
          "downloadFile": {
            "type": "boolean"
          }
        },
        "oneOf": [
          {
            "required": [
              "features"
            ],
            "properties": {
              "features": {
                "type": "array",
                "items": {
                  "type": "string",
                  "minLength": 1
                },
                "description": "Selects features to export by name."
              }
            }
          },
          {
            "required": [
              "tag"
            ],
            "properties": {
              "tag": {
                "type": "string",
                "description": "Selects features to export by tag. Takes precedence over the features field."
              }
            }
          }
        ]
      },
      "featureEnvironmentMetricsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "environment",
          "timestamp",
          "yes",
          "no"
        ],
        "description": "How many times `feautreName` was evaluated to `true` (yes) and `false` (no) for `appName` in `environmnet`",
        "properties": {
          "featureName": {
            "description": "The name of the feature",
            "type": "string",
            "example": "my.special.feature"
          },
          "appName": {
            "description": "The name of the application the SDK is being used in",
            "type": "string",
            "example": "accounting"
          },
          "environment": {
            "description": "Which environment the SDK is being used in",
            "type": "string",
            "example": "development"
          },
          "timestamp": {
            "description": "The start of the time window these metrics are valid for. The window is usually 1 hour wide",
            "example": "1926-05-08T12:00:00.000Z",
            "$ref": "#/components/schemas/dateSchema"
          },
          "yes": {
            "description": "How many times the toggle evaluated to true",
            "type": "integer",
            "example": 974,
            "minimum": 0
          },
          "no": {
            "description": "How many times the toggle evaluated to false",
            "type": "integer",
            "example": 50,
            "minimum": 0
          },
          "variants": {
            "description": "How many times each variant was returned",
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            },
            "example": {
              "variantA": 15,
              "variantB": 25,
              "variantC": 5
            }
          }
        }
      },
      "featureEnvironmentSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "enabled"
        ],
        "description": "A detailed description of the feature environment",
        "properties": {
          "name": {
            "type": "string",
            "example": "my-dev-env",
            "description": "The name of the environment"
          },
          "featureName": {
            "type": "string",
            "example": "disable-comments"
          },
          "environment": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "example": "development",
            "description": "The type of the environment"
          },
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the feature is enabled for the environment, otherwise `false`."
          },
          "sortOrder": {
            "type": "number",
            "example": 3,
            "description": "The sort order of the feature environment in the feature environments list"
          },
          "variantCount": {
            "type": "number"
          },
          "strategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureStrategySchema"
            },
            "description": "A list of activation strategies for the feature environment"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            },
            "description": "A list of variants for the feature environment"
          }
        }
      },
      "featureEventsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "events"
        ],
        "properties": {
          "version": {
            "type": "number"
          },
          "toggleName": {
            "type": "string"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/eventSchema"
            }
          },
          "totalEvents": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "featureMetricsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "maturity",
          "data"
        ],
        "description": "A batch of feature metrics",
        "properties": {
          "version": {
            "description": "The version of this schema",
            "type": "integer",
            "minimum": 1
          },
          "maturity": {
            "description": "The maturity level of this API (alpha, beta, stable, deprecated)",
            "type": "string",
            "example": "stable"
          },
          "data": {
            "description": "Metrics gathered per environment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureEnvironmentMetricsSchema"
            }
          }
        }
      },
      "featureSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "disable-comments",
            "description": "Unique feature name"
          },
          "type": {
            "type": "string",
            "example": "kill-switch",
            "description": "Type of the toggle e.g. experiment, kill-switch, release, operational, permission"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Controls disabling of the comments section in case of an incident",
            "description": "Detailed description of the feature"
          },
          "archived": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the feature is archived"
          },
          "project": {
            "type": "string",
            "example": "dx-squad",
            "description": "Name of the project the feature belongs to"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "stale": {
            "type": "boolean",
            "example": false,
            "description": "`true` if the feature is stale based on the age and feature type, otherwise `false`."
          },
          "favorite": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the feature was favorited, otherwise `false`."
          },
          "impressionData": {
            "type": "boolean",
            "example": false,
            "description": "`true` if the impression data collection is enabled for the feature, otherwise `false`."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-01-28T15:21:39.975Z"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-01-29T15:21:39.975Z"
          },
          "lastSeenAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-01-28T16:21:39.975Z"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureEnvironmentSchema"
            },
            "description": "The list of environments where the feature can be used"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            },
            "description": "The list of feature variants",
            "deprecated": true
          },
          "strategies": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "This is a legacy field that will be deprecated",
            "deprecated": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tagSchema"
            },
            "nullable": true,
            "description": "The list of feature tags"
          }
        }
      },
      "featuresSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "features"
        ],
        "properties": {
          "version": {
            "type": "integer"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureSchema"
            }
          }
        }
      },
      "featureStrategySchema": {
        "description": "A single activation strategy configuration schema for a feature",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A uuid for the feature strategy",
            "example": "6b5157cb-343a-41e7-bfa3-7b4ec3044840"
          },
          "name": {
            "type": "string",
            "description": "The name or type of strategy",
            "example": "flexibleRollout"
          },
          "title": {
            "type": "string",
            "description": "A descriptive title for the strategy",
            "example": "Gradual Rollout 25-Prod",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "description": "A toggle to disable the strategy. defaults to false. Disabled strategies are not evaluated or returned to the SDKs",
            "example": false,
            "nullable": true
          },
          "featureName": {
            "type": "string",
            "description": "The name or feature the strategy is attached to",
            "example": "myAwesomeFeature"
          },
          "sortOrder": {
            "type": "number",
            "description": "The order of the strategy in the list",
            "example": 9999
          },
          "segments": {
            "type": "array",
            "description": "A list of segment ids attached to the strategy",
            "example": [
              1,
              2
            ],
            "items": {
              "type": "number"
            }
          },
          "constraints": {
            "type": "array",
            "description": "A list of the constraints attached to the strategy",
            "items": {
              "$ref": "#/components/schemas/constraintSchema"
            }
          },
          "parameters": {
            "$ref": "#/components/schemas/parametersSchema"
          }
        }
      },
      "featureStrategySegmentSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "segmentId",
          "featureStrategyId"
        ],
        "properties": {
          "segmentId": {
            "type": "integer"
          },
          "featureStrategyId": {
            "type": "string"
          }
        }
      },
      "featureTagSchema": {
        "type": "object",
        "description": "Describes a tag applied to a feature",
        "additionalProperties": false,
        "required": [
          "featureName",
          "tagValue"
        ],
        "properties": {
          "featureName": {
            "type": "string",
            "example": "my-feature",
            "description": "The name of the feature this tag is applied to"
          },
          "tagType": {
            "type": "string",
            "example": "simple",
            "description": "The [type](https://docs.getunleash.io/reference/tags#tag-types tag types) of the tag"
          },
          "tagValue": {
            "type": "string",
            "example": "my-tag",
            "description": "The value of the tag"
          },
          "type": {
            "deprecated": true,
            "type": "string",
            "description": "The [type](https://docs.getunleash.io/reference/tags#tag-types tag types) of the tag. This property is deprecated and will be removed in a future version of Unleash. Superseded by the `tagType` property."
          },
          "value": {
            "deprecated": true,
            "type": "string",
            "description": "The value of the tag. This property is deprecated and will be removed in a future version of Unleash. Superseded by the `tagValue` property."
          }
        }
      },
      "featureTypeSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "description",
          "lifetimeDays"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "lifetimeDays": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "featureTypesSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "types"
        ],
        "properties": {
          "version": {
            "type": "integer"
          },
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureTypeSchema"
            }
          }
        }
      },
      "featureUsageSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "How many applications have seen this feature toggle, as well as how this feature was evaluated the last hour",
        "required": [
          "version",
          "maturity",
          "featureName",
          "lastHourUsage",
          "seenApplications"
        ],
        "properties": {
          "version": {
            "description": "The version of this schema",
            "type": "integer",
            "minimum": 1
          },
          "maturity": {
            "description": "The maturity level of this API (alpha, beta, stable, deprecated)",
            "type": "string",
            "example": "stable"
          },
          "featureName": {
            "description": "The name of the feature",
            "type": "string",
            "example": "my.special.feature"
          },
          "lastHourUsage": {
            "description": "Last hour statistics. Accumulated per feature per environment. Contains counts for evaluations to true (yes) and to false (no)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureEnvironmentMetricsSchema"
            }
          },
          "seenApplications": {
            "description": "A list of applications seen using this feature",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "accounting",
              "billing",
              "booking"
            ]
          }
        }
      },
      "featureVariantsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "variants"
        ],
        "properties": {
          "version": {
            "type": "integer"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            }
          }
        }
      },
      "feedbackSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userId": {
            "type": "number"
          },
          "feedbackId": {
            "type": "string"
          },
          "neverShow": {
            "type": "boolean"
          },
          "given": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "groupSchema": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "mappingsSSO": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rootRole": {
            "type": "number",
            "nullable": true,
            "description": "A role id that is used as the root role for all users in this group. This can be either the id of the Editor or Admin role."
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/groupUserModelSchema"
            }
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "groupsSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/groupSchema"
            }
          }
        }
      },
      "groupUserModelSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "user"
        ],
        "properties": {
          "joinedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/userSchema"
          }
        }
      },
      "healthCheckSchema": {
        "type": "object",
        "description": "Used by service orchestrators to decide whether this Unleash instance should be marked as healthy or unhealthy",
        "additionalProperties": false,
        "required": [
          "health"
        ],
        "properties": {
          "health": {
            "description": "The state this Unleash instance is in. GOOD if everything is ok, BAD if the instance should be restarted",
            "type": "string",
            "enum": [
              "GOOD",
              "BAD"
            ],
            "example": "GOOD"
          }
        }
      },
      "healthOverviewSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "name",
          "defaultStickiness",
          "mode",
          "members",
          "health",
          "environments",
          "features"
        ],
        "description": "An overview of a project's stats and its health as described in the documentation on [technical debt](https://docs.getunleash.io/reference/technical-debt)",
        "properties": {
          "version": {
            "type": "integer",
            "description": "The project overview version.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The project's name",
            "example": "enterprisegrowth"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The project's description",
            "example": "The project for all things enterprisegrowth"
          },
          "defaultStickiness": {
            "type": "string",
            "example": "userId",
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy"
          },
          "mode": {
            "type": "string",
            "enum": [
              "open",
              "protected"
            ],
            "example": "open",
            "description": "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not."
          },
          "members": {
            "type": "integer",
            "description": "The number of users/members in the project.",
            "example": 5,
            "minimum": 0
          },
          "health": {
            "type": "integer",
            "description": "The overall [health rating](https://docs.getunleash.io/reference/technical-debt#health-rating) of the project.",
            "example": 95
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/projectEnvironmentSchema"
            },
            "description": "An array containing the names of all the environments configured for the project."
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureSchema"
            },
            "description": "An array containing an overview of all the features of the project and their individual status"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the project was last updated.",
            "example": "2023-04-19T08:15:14.000Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the project was last updated.",
            "example": "2023-04-19T08:15:14.000Z"
          },
          "favorite": {
            "type": "boolean",
            "description": "Indicates if the project has been marked as a favorite by the current user requesting the project health overview.",
            "example": true
          },
          "stats": {
            "$ref": "#/components/schemas/projectStatsSchema",
            "description": "Project statistics"
          }
        }
      },
      "healthReportSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "name",
          "defaultStickiness",
          "mode",
          "members",
          "health",
          "environments",
          "features",
          "potentiallyStaleCount",
          "activeCount",
          "staleCount"
        ],
        "description": "A report of the current health of the requested project, with datapoints like counters of currently active, stale, and potentially stale feature toggles.",
        "properties": {
          "version": {
            "type": "integer",
            "description": "The project overview version.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The project's name",
            "example": "enterprisegrowth"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The project's description",
            "example": "The project for all things enterprisegrowth"
          },
          "defaultStickiness": {
            "type": "string",
            "example": "userId",
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy"
          },
          "mode": {
            "type": "string",
            "enum": [
              "open",
              "protected"
            ],
            "example": "open",
            "description": "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not."
          },
          "members": {
            "type": "integer",
            "description": "The number of users/members in the project.",
            "example": 5,
            "minimum": 0
          },
          "health": {
            "type": "integer",
            "description": "The overall [health rating](https://docs.getunleash.io/reference/technical-debt#health-rating) of the project.",
            "example": 95
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/projectEnvironmentSchema"
            },
            "description": "An array containing the names of all the environments configured for the project."
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureSchema"
            },
            "description": "An array containing an overview of all the features of the project and their individual status"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the project was last updated.",
            "example": "2023-04-19T08:15:14.000Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the project was last updated.",
            "example": "2023-04-19T08:15:14.000Z"
          },
          "favorite": {
            "type": "boolean",
            "description": "Indicates if the project has been marked as a favorite by the current user requesting the project health overview.",
            "example": true
          },
          "stats": {
            "$ref": "#/components/schemas/projectStatsSchema",
            "description": "Project statistics"
          },
          "potentiallyStaleCount": {
            "type": "number",
            "description": "The number of potentially stale feature toggles.",
            "example": 5
          },
          "activeCount": {
            "type": "number",
            "description": "The number of active feature toggles.",
            "example": 2
          },
          "staleCount": {
            "type": "number",
            "description": "The number of stale feature toggles.",
            "example": 10
          }
        }
      },
      "idSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "instanceAdminStatsSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Information about an instance and statistics about usage of various features of Unleash",
        "required": [
          "instanceId"
        ],
        "properties": {
          "instanceId": {
            "type": "string",
            "description": "A unique identifier for this instance. Generated by the database migration scripts at first run. Typically a UUID.",
            "example": "ed3861ae-78f9-4e8c-8e57-b57efc15f82b"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When these statistics were produced",
            "example": "2023-06-12T12:25:06Z"
          },
          "versionOSS": {
            "type": "string",
            "description": "The version of Unleash OSS that is bundled in this instance",
            "example": "5.1.7"
          },
          "versionEnterprise": {
            "type": "string",
            "description": "The version of Unleash Enterprise that is bundled in this instance",
            "example": "5.1.7"
          },
          "users": {
            "type": "number",
            "description": "The number of users this instance has",
            "example": 8,
            "minimum": 0
          },
          "featureToggles": {
            "type": "number",
            "description": "The number of feature-toggles this instance has",
            "example": 47,
            "minimum": 0
          },
          "projects": {
            "type": "number",
            "description": "The number of projects defined in this instance.",
            "example": 3,
            "minimum": 0
          },
          "contextFields": {
            "type": "number",
            "description": "The number of context fields defined in this instance.",
            "example": 7,
            "minimum": 0
          },
          "roles": {
            "type": "number",
            "description": "The number of roles defined in this instance",
            "example": 5,
            "minimum": 0
          },
          "groups": {
            "type": "number",
            "description": "The number of groups defined in this instance",
            "example": 12,
            "minimum": 0
          },
          "environments": {
            "type": "number",
            "description": "The number of environments defined in this instance",
            "example": 3,
            "minimum": 0
          },
          "segments": {
            "type": "number",
            "description": "The number of segments defined in this instance",
            "example": 19,
            "minimum": 0
          },
          "strategies": {
            "type": "number",
            "description": "The number of strategies defined in this instance",
            "example": 8,
            "minimum": 0
          },
          "SAMLenabled": {
            "type": "boolean",
            "description": "Whether or not SAML authentication is enabled for this instance",
            "example": false
          },
          "OIDCenabled": {
            "type": "boolean",
            "description": "Whether or not OIDC authentication is enabled for this instance",
            "example": true
          },
          "clientApps": {
            "type": "array",
            "description": "A count of connected applications in the last week, last month and all time since last restart",
            "items": {
              "type": "object",
              "description": "An entry describing how many client applications has been observed over the defined range",
              "properties": {
                "range": {
                  "type": "string",
                  "description": "A description of a time range",
                  "enum": [
                    "allTime",
                    "30d",
                    "7d"
                  ],
                  "example": "30d"
                },
                "count": {
                  "type": "number",
                  "description": "The number of client applications that have been observed in this period",
                  "example": 1
                }
              }
            }
          },
          "sum": {
            "type": "string",
            "description": "A SHA-256 checksum of the instance statistics to be used to verify that the data in this object has not been tampered with",
            "example": "b023323477abb1eb145bebf3cdb30a1c2063e3edc1f7ae474ed8ed6c80de9a3b"
          }
        }
      },
      "legalValueSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "loginSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "maintenanceSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "toggleMaintenanceSchema": {
        "type": "object",
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "meSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "user",
          "permissions",
          "feedback",
          "splash"
        ],
        "properties": {
          "user": {
            "$ref": "#/components/schemas/userSchema"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/permissionSchema"
            }
          },
          "feedback": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/feedbackSchema"
            }
          },
          "splash": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "nameSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "overrideSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "contextName",
          "values"
        ],
        "description": "An override for deciding which variant should be assigned to a user based on the context name",
        "properties": {
          "contextName": {
            "description": "The name of the context field used to determine overrides",
            "type": "string",
            "example": "userId"
          },
          "values": {
            "description": "Which values that should be overriden",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "red",
              "blue"
            ]
          }
        }
      },
      "parametersSchema": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "passwordSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "type": "string"
          },
          "oldPassword": {
            "type": "string"
          },
          "confirmPassword": {
            "type": "string"
          }
        }
      },
      "patchesSchema": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/patchSchema"
        }
      },
      "patchSchema": {
        "type": "object",
        "required": [
          "path",
          "op"
        ],
        "properties": {
          "path": {
            "type": "string"
          },
          "op": {
            "type": "string",
            "enum": [
              "add",
              "remove",
              "replace",
              "copy",
              "move"
            ]
          },
          "from": {
            "type": "string"
          },
          "value": {}
        }
      },
      "patSchema": {
        "type": "object",
        "description": "An overview of a [Personal Access Token](https://docs.getunleash.io/how-to/how-to-create-personal-access-tokens).",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identification number for this Personal Access Token. (This property is set by Unleash when the token is created and cannot be set manually: if you provide a value when creating a PAT, Unleash will ignore it.)",
            "example": 1,
            "minimum": 1
          },
          "secret": {
            "type": "string",
            "description": "The token used for authentication. (This property is set by Unleash when the token is created and cannot be set manually: if you provide a value when creating a PAT, Unleash will ignore it.)",
            "example": "user:xyzrandomstring"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "The token's expiration date.",
            "example": "2023-04-19T08:15:14.000Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-04-19T08:15:14.000Z",
            "description": "When the token was created. (This property is set by Unleash when the token is created and cannot be set manually: if you provide a value when creating a PAT, Unleash will ignore it.)"
          },
          "seenAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-04-19T08:15:14.000Z",
            "description": "When the token was last seen/used to authenticate with. `null` if it has not been used yet. (This property is set by Unleash when the token is created and cannot be set manually: if you provide a value when creating a PAT, Unleash will ignore it.)"
          }
        }
      },
      "patsSchema": {
        "type": "object",
        "description": "Contains a collection of [Personal Access Tokens](https://docs.getunleash.io/how-to/how-to-create-personal-access-tokens).",
        "properties": {
          "pats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/patSchema"
            },
            "description": "A collection of Personal Access Tokens"
          }
        }
      },
      "permissionSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "permission"
        ],
        "properties": {
          "permission": {
            "type": "string"
          },
          "project": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          }
        }
      },
      "playgroundConstraintSchema": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "contextName",
          "operator",
          "result"
        ],
        "description": "A strategy constraint. For more information, refer to [the strategy constraint reference documentation](https://docs.getunleash.io/reference/strategy-constraints)",
        "properties": {
          "contextName": {
            "description": "The name of the context field that this constraint should apply to.",
            "example": "appName",
            "type": "string"
          },
          "operator": {
            "description": "The operator to use when evaluating this constraint. For more information about the various operators, refer to [the strategy constraint operator documentation](https://docs.getunleash.io/reference/strategy-constraints#strategy-constraint-operators).",
            "type": "string",
            "enum": [
              "NOT_IN",
              "IN",
              "STR_ENDS_WITH",
              "STR_STARTS_WITH",
              "STR_CONTAINS",
              "NUM_EQ",
              "NUM_GT",
              "NUM_GTE",
              "NUM_LT",
              "NUM_LTE",
              "DATE_AFTER",
              "DATE_BEFORE",
              "SEMVER_EQ",
              "SEMVER_GT",
              "SEMVER_LT"
            ],
            "example": "IN"
          },
          "caseInsensitive": {
            "description": "Whether the operator should be case sensitive or not. Defaults to `false` (being case sensitive).",
            "type": "boolean",
            "default": false
          },
          "inverted": {
            "description": "Whether the result should be negated or not. If `true`, will turn a `true` result into a `false` result and vice versa.",
            "type": "boolean",
            "default": false
          },
          "values": {
            "type": "array",
            "description": "The context values that should be used for constraint evaluation. Use this property instead of `value` for properties that accept multiple values.",
            "items": {
              "type": "string"
            },
            "example": [
              "my-app",
              "my-other-app"
            ]
          },
          "value": {
            "description": "The context value that should be used for constraint evaluation. Use this property instead of `values` for properties that only accept single values.",
            "type": "string",
            "example": "my-app"
          },
          "result": {
            "description": "Whether this was evaluated as true or false.",
            "type": "boolean"
          }
        }
      },
      "playgroundFeatureSchema": {
        "description": "A simplified feature toggle model intended for the Unleash playground.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "projectId",
          "isEnabled",
          "isEnabledInCurrentEnvironment",
          "variant",
          "variants",
          "strategies"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "my-feature",
            "description": "The feature's name."
          },
          "projectId": {
            "type": "string",
            "example": "my-project",
            "description": "The ID of the project that contains this feature."
          },
          "strategies": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "result",
              "data"
            ],
            "description": "The feature's applicable strategies and cumulative results of the strategies",
            "properties": {
              "result": {
                "description": "The cumulative results of all the feature's strategies. Can be `true`,\n                                  `false`, or `unknown`.\n                                  This property will only be `unknown`\n                                  if one or more of the strategies can't be fully evaluated and the rest of the strategies\n                                  all resolve to `false`.",
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "unknown"
                    ]
                  }
                ]
              },
              "data": {
                "description": "The strategies that apply to this feature.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/playgroundStrategySchema"
                }
              }
            }
          },
          "isEnabledInCurrentEnvironment": {
            "type": "boolean",
            "description": "Whether the feature is active and would be evaluated in the provided environment in a normal SDK context."
          },
          "isEnabled": {
            "description": "Whether this feature is enabled or not in the current environment.\n                          If a feature can't be fully evaluated (that is, `strategies.result` is `unknown`),\n                          this will be `false` to align with how client SDKs treat unresolved feature states.",
            "type": "boolean",
            "example": true
          },
          "variant": {
            "description": "The feature variant you receive based on the provided context or the _disabled\n                          variant_. If a feature is disabled or doesn't have any\n                          variants, you would get the _disabled variant_.\n                          Otherwise, you'll get one of thefeature's defined variants.",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "name",
              "enabled"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The variant's name. If there is no variant or if the toggle is disabled, this will be `disabled`",
                "example": "red-variant"
              },
              "enabled": {
                "type": "boolean",
                "description": "Whether the variant is enabled or not. If the feature is disabled or if it doesn't have variants, this property will be `false`"
              },
              "payload": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "type",
                  "value"
                ],
                "description": "An optional payload attached to the variant.",
                "properties": {
                  "type": {
                    "description": "The format of the payload.",
                    "type": "string",
                    "enum": [
                      "json",
                      "csv",
                      "string"
                    ]
                  },
                  "value": {
                    "type": "string",
                    "description": "The payload value stringified.",
                    "example": "{\"property\": \"value\"}"
                  }
                }
              }
            },
            "nullable": true,
            "example": {
              "name": "green",
              "enabled": true
            }
          },
          "variants": {
            "type": "array",
            "description": "The feature variants.",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            }
          }
        }
      },
      "playgroundRequestSchema": {
        "description": "Data for the playground API to evaluate toggles",
        "type": "object",
        "required": [
          "environment",
          "context"
        ],
        "properties": {
          "environment": {
            "type": "string",
            "example": "development",
            "description": "The environment to evaluate toggles in."
          },
          "projects": {
            "description": "A list of projects to check for toggles in.",
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "my-project"
                ],
                "description": "A list of projects to check for toggles in."
              },
              {
                "type": "string",
                "enum": [
                  "*"
                ],
                "description": "Check toggles in all projects."
              }
            ]
          },
          "context": {
            "$ref": "#/components/schemas/sdkContextSchema"
          }
        }
      },
      "playgroundResponseSchema": {
        "description": "The state of all features given the provided input.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "features",
          "input"
        ],
        "properties": {
          "input": {
            "description": "The given input used to evaluate the features.",
            "$ref": "#/components/schemas/playgroundRequestSchema"
          },
          "features": {
            "type": "array",
            "description": "The list of features that have been evaluated.",
            "items": {
              "$ref": "#/components/schemas/playgroundFeatureSchema"
            }
          }
        }
      },
      "playgroundSegmentSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "id",
          "constraints",
          "result"
        ],
        "properties": {
          "id": {
            "description": "The segment's id.",
            "type": "integer"
          },
          "name": {
            "description": "The name of the segment.",
            "example": "segment A",
            "type": "string"
          },
          "result": {
            "description": "Whether this was evaluated as true or false.",
            "type": "boolean"
          },
          "constraints": {
            "type": "array",
            "description": "The list of constraints in this segment.",
            "items": {
              "$ref": "#/components/schemas/playgroundConstraintSchema"
            }
          }
        }
      },
      "playgroundStrategySchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "result",
          "segments",
          "constraints",
          "parameters",
          "disabled",
          "links"
        ],
        "properties": {
          "name": {
            "description": "The strategy's name.",
            "type": "string"
          },
          "title": {
            "type": "string",
            "example": "Beta rollout",
            "description": "Description of the feature's purpose."
          },
          "id": {
            "description": "The strategy's id.",
            "type": "string",
            "example": "3AECCF7E-FF82-4174-8287-8EBE06079A50"
          },
          "result": {
            "description": "The strategy's evaluation result. If the strategy is a custom strategy that Unleash can't evaluate, `evaluationStatus` will be `unknown`. Otherwise, it will be `true` or `false`",
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "evaluationStatus",
                  "enabled"
                ],
                "properties": {
                  "evaluationStatus": {
                    "type": "string",
                    "description": "Signals that this strategy could not be evaluated. This is most likely because you're using a custom strategy that Unleash doesn't know about.",
                    "enum": [
                      "incomplete"
                    ]
                  },
                  "enabled": {
                    "description": "Whether this strategy resolves to `false` or if it might resolve to `true`. Because Unleash can't evaluate the strategy, it can't say for certain whether it will be `true`, but if you have failing constraints or segments, it _can_ determine that your strategy would be `false`.",
                    "anyOf": [
                      {
                        "type": "boolean",
                        "enum": [
                          false
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "unknown"
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "evaluationStatus",
                  "enabled"
                ],
                "properties": {
                  "evaluationStatus": {
                    "description": "Signals that this strategy was evaluated successfully.",
                    "type": "string",
                    "enum": [
                      "complete"
                    ]
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether this strategy evaluates to true or not."
                  }
                }
              }
            ]
          },
          "disabled": {
            "type": "boolean",
            "description": "The strategy's status. Disabled strategies are not evaluated",
            "example": false,
            "nullable": true
          },
          "segments": {
            "type": "array",
            "description": "The strategy's segments and their evaluation results.",
            "items": {
              "$ref": "#/components/schemas/playgroundSegmentSchema"
            }
          },
          "constraints": {
            "type": "array",
            "description": "The strategy's constraints and their evaluation results.",
            "items": {
              "$ref": "#/components/schemas/playgroundConstraintSchema"
            }
          },
          "parameters": {
            "description": "The strategy's constraints and their evaluation results.",
            "example": {
              "myParam1": "param value"
            },
            "$ref": "#/components/schemas/parametersSchema"
          },
          "links": {
            "description": "A set of links to actions you can perform on this strategy",
            "type": "object",
            "required": [
              "edit"
            ],
            "properties": {
              "edit": {
                "type": "string",
                "example": "/projects/some-project/features/some-feature/strategies/edit?environmentId=some-env&strategyId= 3AECCF7E-FF82-4174-8287-8EBE06079A50"
              }
            }
          }
        }
      },
      "profileSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "rootRole",
          "projects",
          "features"
        ],
        "properties": {
          "rootRole": {
            "$ref": "#/components/schemas/roleSchema"
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureSchema"
            }
          }
        }
      },
      "projectEnvironmentSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "Add an environment to a project, optionally also sets if change requests are enabled for this environment on the project",
        "required": [
          "environment"
        ],
        "properties": {
          "environment": {
            "type": "string",
            "description": "The environment to add to the project",
            "example": "development"
          },
          "changeRequestsEnabled": {
            "type": "boolean",
            "description": "Whether change requests should be enabled or for this environment on the project or not",
            "example": true
          },
          "defaultStrategy": {
            "$ref": "#/components/schemas/createFeatureStrategySchema",
            "description": "A default strategy to create for this environment on the project."
          }
        }
      },
      "projectSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "description": "A definition of the project used for projects listing purposes",
        "properties": {
          "id": {
            "type": "string",
            "example": "dx-squad",
            "description": "The id of this project"
          },
          "name": {
            "type": "string",
            "example": "DX-Squad",
            "description": "The name of this project"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "DX squad feature release",
            "description": "Additional information about the project"
          },
          "health": {
            "type": "number",
            "example": 50,
            "description": "An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating) on a scale from 0 to 100"
          },
          "featureCount": {
            "type": "number",
            "example": 10,
            "description": "The number of features this project has"
          },
          "memberCount": {
            "type": "number",
            "example": 4,
            "description": "The number of members this project has"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "favorite": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the project was favorited, otherwise `false`."
          },
          "mode": {
            "type": "string",
            "enum": [
              "open",
              "protected"
            ],
            "example": "open",
            "description": "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not."
          },
          "defaultStickiness": {
            "type": "string",
            "example": "userId",
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy"
          }
        }
      },
      "projectsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "projects"
        ],
        "description": "An overview of all the projects in the Unleash instance",
        "properties": {
          "version": {
            "type": "integer"
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/projectSchema"
            },
            "description": "A list of projects in the Unleash instance"
          }
        }
      },
      "proxyClientSchema": {
        "type": "object",
        "required": [
          "appName",
          "interval",
          "started",
          "strategies"
        ],
        "properties": {
          "appName": {
            "type": "string",
            "description": "Name of the application using Unleash"
          },
          "instanceId": {
            "type": "string",
            "description": "Instance id for this application (typically hostname, podId or similar)"
          },
          "sdkVersion": {
            "type": "string",
            "description": "Optional field that describes the sdk version (name:version)"
          },
          "environment": {
            "type": "string",
            "deprecated": true
          },
          "interval": {
            "type": "number",
            "description": "At which interval, in milliseconds, will this client be expected to send metrics"
          },
          "started": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "number"
              }
            ],
            "description": "When this client started. Should be reported as ISO8601 time."
          },
          "strategies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of strategies implemented by this application"
          }
        }
      },
      "proxyFeatureSchema": {
        "type": "object",
        "required": [
          "name",
          "enabled",
          "impressionData"
        ],
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "impressionData": {
            "type": "boolean"
          },
          "variant": {
            "type": "object",
            "required": [
              "name",
              "enabled"
            ],
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string"
              },
              "enabled": {
                "type": "boolean"
              },
              "payload": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "type",
                  "value"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "string",
                      "json",
                      "csv"
                    ]
                  },
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "proxyFeaturesSchema": {
        "type": "object",
        "required": [
          "toggles"
        ],
        "additionalProperties": false,
        "properties": {
          "toggles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/proxyFeatureSchema"
            }
          }
        }
      },
      "publicSignupTokenCreateSchema": {
        "type": "object",
        "description": "Used for creating a [public invite link](https://docs.getunleash.io/reference/public-signup#public-sign-up-tokens)",
        "additionalProperties": false,
        "required": [
          "name",
          "expiresAt"
        ],
        "properties": {
          "name": {
            "description": "The token's name.",
            "type": "string"
          },
          "expiresAt": {
            "type": "string",
            "description": "The token's expiration date.",
            "format": "date-time"
          }
        }
      },
      "publicSignupTokenSchema": {
        "description": "Used for transporting a [public invite link](https://docs.getunleash.io/reference/public-signup#public-sign-up-tokens)",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "secret",
          "url",
          "name",
          "expiresAt",
          "createdAt",
          "createdBy",
          "enabled",
          "role"
        ],
        "properties": {
          "secret": {
            "description": "The actual value of the token. This is the part that is used by Unleash to create an invite link",
            "type": "string",
            "example": "a3c84b25409ea8ca1782ef17f94a42fc"
          },
          "url": {
            "description": "The public signup link for the token. Users who follow this link will be taken to a signup page where they can create an Unleash user.",
            "type": "string",
            "example": "https://sandbox.getunleash.io/enterprise/new-user?invite=a3c84b25409ea8ca1782ef17f94a42fc"
          },
          "name": {
            "description": "The token's name. Only for displaying in the UI",
            "type": "string",
            "example": "Invite public viewers"
          },
          "enabled": {
            "description": "Whether the token is active. This property will always be `false` for a token that has expired.",
            "type": "boolean",
            "example": true
          },
          "expiresAt": {
            "type": "string",
            "description": "The time when the token will expire.",
            "format": "date-time",
            "example": "2023-04-12T11:13:31.960Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the token was created.",
            "example": "2023-04-12T11:13:31.960Z"
          },
          "createdBy": {
            "description": "The creator's email or username",
            "example": "someone@example.com",
            "type": "string",
            "nullable": true
          },
          "users": {
            "type": "array",
            "description": "Array of users that have signed up using the token.",
            "items": {
              "$ref": "#/components/schemas/userSchema"
            },
            "nullable": true
          },
          "role": {
            "description": "Users who sign up using this token will be given this role.",
            "$ref": "#/components/schemas/roleSchema"
          }
        }
      },
      "publicSignupTokensSchema": {
        "type": "object",
        "description": "A wrapper object containing all the public signup tokens",
        "additionalProperties": false,
        "required": [
          "tokens"
        ],
        "properties": {
          "tokens": {
            "type": "array",
            "description": "An array of all the public signup tokens",
            "example": [
              {
                "secret": "a3c84b25409ea8ca1782ef17f94a42fc",
                "url": "https://my_unleash_instance/new-user?invite=a3c84b25409ea8ca1782ef17f94a42fc",
                "name": "Invite public viewers",
                "enabled": false,
                "expiresAt": "2023-04-12T11:13:31.960Z",
                "createdAt": "2023-04-12T11:13:31.960Z",
                "createdBy": "someone",
                "users": null,
                "role": {
                  "id": 3,
                  "type": "root",
                  "name": "Viewer"
                }
              }
            ],
            "items": {
              "$ref": "#/components/schemas/publicSignupTokenSchema"
            }
          }
        }
      },
      "publicSignupTokenUpdateSchema": {
        "description": "Used by Unleash for updating a token's expiration date or, when deleting the invite link, it's status",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "expiresAt": {
            "type": "string",
            "description": "The token's expiration date.",
            "format": "date-time",
            "example": "2023-04-11T15:46:56Z"
          },
          "enabled": {
            "description": "Whether the token is active or not.",
            "type": "boolean",
            "example": true
          }
        }
      },
      "pushVariantsSchema": {
        "type": "object",
        "properties": {
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/variantSchema"
            }
          },
          "environments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "projectStatsSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "avgTimeToProdCurrentWindow",
          "createdCurrentWindow",
          "createdPastWindow",
          "archivedCurrentWindow",
          "archivedPastWindow",
          "projectActivityCurrentWindow",
          "projectActivityPastWindow",
          "projectMembersAddedCurrentWindow"
        ],
        "description": "Statistics for a project, including the average time to production, number of features created, the project activity and more.\n\nStats are divided into current and previous **windows**.\n- The **current window** is the past 30 days.\n- The **previous window** is the 30 days **before** the current window (from 60 to 30 days ago)",
        "properties": {
          "avgTimeToProdCurrentWindow": {
            "type": "number",
            "example": 10,
            "description": "The average time from when a feature was created to when it was enabled in the \"production\" environment during the current window"
          },
          "createdCurrentWindow": {
            "type": "number",
            "example": 15,
            "description": "The number of feature toggles created during the current window"
          },
          "createdPastWindow": {
            "type": "number",
            "example": 15,
            "description": "The number of feature toggles created during the previous window"
          },
          "archivedCurrentWindow": {
            "type": "number",
            "example": 5,
            "description": "The number of feature toggles that were archived during the current window"
          },
          "archivedPastWindow": {
            "type": "number",
            "example": 5,
            "description": "The number of feature toggles that were archived during the previous window"
          },
          "projectActivityCurrentWindow": {
            "type": "number",
            "example": 100,
            "description": "The number of project events that occurred during the current window"
          },
          "projectActivityPastWindow": {
            "type": "number",
            "example": 100,
            "description": "The number of project events that occurred during the previous window"
          },
          "projectMembersAddedCurrentWindow": {
            "type": "number",
            "example": 1,
            "description": "The number of members that were added to the project during the current window"
          }
        }
      },
      "resetPasswordSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "resetPasswordUrl"
        ],
        "properties": {
          "resetPasswordUrl": {
            "type": "string"
          }
        }
      },
      "requestsPerSecondSchema": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "resultType": {
                "type": "string"
              },
              "result": {
                "description": "An array of values per metric. Each one represents a line in the graph labeled by its metric name",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "metric": {
                      "description": "A key value set representing the metric",
                      "type": "object",
                      "properties": {
                        "appName": {
                          "type": "string"
                        },
                        "endpoint": {
                          "type": "string"
                        }
                      }
                    },
                    "values": {
                      "description": "An array of arrays. Each element of the array is an array of size 2 consisting of the 2 axis for the graph: in position zero the x axis represented as a number and position one the y axis represented as string",
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "requestsPerSecondSegmentedSchema": {
        "type": "object",
        "properties": {
          "clientMetrics": {
            "$ref": "#/components/schemas/requestsPerSecondSchema"
          },
          "adminMetrics": {
            "$ref": "#/components/schemas/requestsPerSecondSchema"
          }
        }
      },
      "roleSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "name"
        ],
        "properties": {
          "id": {
            "type": "number"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "sdkContextSchema": {
        "description": "The Unleash context as modeled in client SDKs",
        "type": "object",
        "additionalProperties": true,
        "required": [
          "appName"
        ],
        "properties": {
          "appName": {
            "type": "string",
            "minLength": 1,
            "example": "My cool application.",
            "description": "The name of the application."
          },
          "currentTime": {
            "type": "string",
            "format": "date-time",
            "example": "2022-07-05T12:56:41+02:00",
            "description": "A DateTime (or similar) data class instance or a string in an RFC3339-compatible format. Defaults to the current time if not set by the user."
          },
          "environment": {
            "type": "string",
            "deprecated": true,
            "description": "The environment the app is running in."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "customContextField": "this is one!",
              "otherCustomField": "3"
            }
          },
          "remoteAddress": {
            "type": "string",
            "example": "192.168.1.1",
            "description": "The app's IP address"
          },
          "sessionId": {
            "type": "string",
            "example": "b65e7b23-fec0-4814-a129-0e9861ef18fc",
            "description": "An identifier for the current session"
          },
          "userId": {
            "type": "string",
            "example": "username@provider.com",
            "description": "An identifier for the current user"
          }
        }
      },
      "searchEventsSchema": {
        "type": "object",
        "description": "\n        Search for events by type, project, feature, free-text query,\n        or a combination thereof. Pass an empty object to fetch all events.\n    ",
        "properties": {
          "type": {
            "type": "string",
            "description": "Find events by event type (case-sensitive)."
          },
          "project": {
            "type": "string",
            "description": "Find events by project ID (case-sensitive)."
          },
          "feature": {
            "type": "string",
            "description": "Find events by feature toggle name (case-sensitive)."
          },
          "query": {
            "type": "string",
            "description": "\n                Find events by a free-text search query.\n                The query will be matched against the event type,\n                the username or email that created the event (if any),\n                and the event data payload (if any).\n            "
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 100
          },
          "offset": {
            "type": "integer",
            "minimum": 0,
            "default": 0
          }
        }
      },
      "segmentSchema": {
        "type": "object",
        "description": "Represents a segment of users defined by a set of constraints.",
        "additionalProperties": false,
        "required": [
          "id",
          "constraints"
        ],
        "properties": {
          "id": {
            "type": "number",
            "description": "The segment's id."
          },
          "name": {
            "type": "string",
            "description": "The name of the segment.",
            "example": "segment A"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of the segment.",
            "example": "Segment A description"
          },
          "constraints": {
            "type": "array",
            "description": "List of constraints that determine which users are part of the segment",
            "items": {
              "$ref": "#/components/schemas/constraintSchema"
            }
          }
        }
      },
      "setStrategySortOrderSchema": {
        "type": "array",
        "items": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "id",
            "sortOrder"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "sortOrder": {
              "type": "number"
            }
          }
        }
      },
      "setUiConfigSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "frontendSettings": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "frontendApiOrigins"
            ],
            "properties": {
              "frontendApiOrigins": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "sortOrderSchema": {
        "type": "object",
        "additionalProperties": {
          "type": "number"
        }
      },
      "splashSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "userId",
          "splashId",
          "seen"
        ],
        "properties": {
          "userId": {
            "type": "number"
          },
          "splashId": {
            "type": "string"
          },
          "seen": {
            "type": "boolean"
          }
        }
      },
      "stateSchema": {
        "type": "object",
        "additionalProperties": true,
        "deprecated": true,
        "description": "The state of the application used by export/import APIs which are deprecated in favor of the more fine grained /api/admin/export and /api/admin/import APIs",
        "required": [
          "version"
        ],
        "properties": {
          "version": {
            "type": "integer"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureSchema"
            }
          },
          "strategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/strategySchema"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tagSchema"
            }
          },
          "tagTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tagTypeSchema"
            }
          },
          "featureTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureTagSchema"
            }
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/projectSchema"
            }
          },
          "featureStrategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureStrategySchema"
            }
          },
          "featureEnvironments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureEnvironmentSchema"
            }
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/environmentSchema"
            }
          },
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/segmentSchema"
            }
          },
          "featureStrategySegments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureStrategySegmentSchema"
            }
          }
        }
      },
      "strategiesSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "strategies"
        ],
        "properties": {
          "version": {
            "type": "integer"
          },
          "strategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/strategySchema"
            }
          }
        }
      },
      "strategySchema": {
        "description": "The [activation strategy](https://docs.getunleash.io/reference/activation-strategies) schema",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "displayName",
          "description",
          "editable",
          "deprecated",
          "parameters"
        ],
        "properties": {
          "title": {
            "type": "string",
            "nullable": true,
            "description": "An optional title for the strategy",
            "example": "GradualRollout - Prod25"
          },
          "name": {
            "type": "string",
            "description": "The name or type of the strategy",
            "example": "flexibleRollout"
          },
          "displayName": {
            "type": "string",
            "description": "A human friendly name for the strategy",
            "example": "Gradual Rollout",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A short description for the strategy",
            "example": "Gradual rollout to logged in users"
          },
          "editable": {
            "type": "boolean",
            "description": "Determines whether the strategy allows for editing",
            "example": true
          },
          "deprecated": {
            "type": "boolean",
            "description": "",
            "example": true
          },
          "parameters": {
            "type": "array",
            "description": "A list of relevant parameters for each strategy",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string",
                  "example": "percentage"
                },
                "type": {
                  "type": "string",
                  "example": "percentage"
                },
                "description": {
                  "type": "string",
                  "example": "Gradual rollout to logged in users"
                },
                "required": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        }
      },
      "tagsBulkAddSchema": {
        "description": "Represents tag changes to be applied to a list of features.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "features",
          "tags"
        ],
        "properties": {
          "features": {
            "description": "The list of features that will be affected by the tag changes.",
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "tags": {
            "description": "The tag changes to be applied to the features.",
            "$ref": "#/components/schemas/updateTagsSchema"
          }
        }
      },
      "tagSchema": {
        "type": "object",
        "description": "Representation of a [tag](https://docs.getunleash.io/reference/tags)",
        "additionalProperties": false,
        "required": [
          "value",
          "type"
        ],
        "properties": {
          "value": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "description": "The value of the tag",
            "example": "a-tag-value"
          },
          "type": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "default": "simple",
            "description": "The [type](https://docs.getunleash.io/reference/tags#tag-types) of the tag",
            "example": "simple"
          }
        }
      },
      "tagsSchema": {
        "description": "A list of tags with a version number",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "tags"
        ],
        "properties": {
          "version": {
            "type": "integer",
            "description": "The version of the schema used to model the tags."
          },
          "tags": {
            "type": "array",
            "description": "A list of tags.",
            "items": {
              "$ref": "#/components/schemas/tagSchema"
            }
          }
        }
      },
      "tagTypeSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "tagTypesSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "tagTypes"
        ],
        "properties": {
          "version": {
            "type": "integer"
          },
          "tagTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tagTypeSchema"
            }
          }
        }
      },
      "tagWithVersionSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "tag"
        ],
        "properties": {
          "version": {
            "type": "integer"
          },
          "tag": {
            "$ref": "#/components/schemas/tagSchema"
          }
        }
      },
      "tokenUserSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "email",
          "token",
          "createdBy",
          "role"
        ],
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/roleSchema"
          }
        }
      },
      "tokenStringListSchema": {
        "type": "object",
        "additionalProperties": true,
        "description": "A list of unleash tokens to validate against known tokens",
        "required": [
          "tokens"
        ],
        "properties": {
          "tokens": {
            "description": "Tokens that we want to get access information about",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "aproject:development.randomstring",
              "[]:production.randomstring"
            ]
          }
        }
      },
      "uiConfigSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "unleashUrl",
          "baseUriPath",
          "versionInfo"
        ],
        "properties": {
          "slogan": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "unleashUrl": {
            "type": "string"
          },
          "baseUriPath": {
            "type": "string"
          },
          "disablePasswordAuth": {
            "type": "boolean"
          },
          "emailEnabled": {
            "type": "boolean"
          },
          "maintenanceMode": {
            "type": "boolean"
          },
          "segmentValuesLimit": {
            "type": "number"
          },
          "strategySegmentsLimit": {
            "type": "number"
          },
          "networkViewEnabled": {
            "type": "boolean"
          },
          "frontendApiOrigins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "flags": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/components/schemas/variantFlagSchema"
                }
              ]
            }
          },
          "links": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "authenticationType": {
            "type": "string",
            "enum": [
              "open-source",
              "demo",
              "enterprise",
              "hosted",
              "custom",
              "none"
            ]
          },
          "versionInfo": {
            "$ref": "#/components/schemas/versionSchema"
          }
        }
      },
      "updateApiTokenSchema": {
        "type": "object",
        "required": [
          "expiresAt"
        ],
        "properties": {
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "updateFeatureSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "stale": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "impressionData": {
            "type": "boolean"
          },
          "constraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/constraintSchema"
            }
          }
        }
      },
      "updateFeatureStrategySchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "sortOrder": {
            "type": "number"
          },
          "constraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/constraintSchema"
            }
          },
          "title": {
            "type": "string",
            "nullable": true,
            "description": "A descriptive title for the strategy",
            "example": "Gradual Rollout 25-Prod"
          },
          "disabled": {
            "type": "boolean",
            "description": "A toggle to disable the strategy. defaults to true. Disabled strategies are not evaluated or returned to the SDKs",
            "example": false,
            "nullable": true
          },
          "parameters": {
            "$ref": "#/components/schemas/parametersSchema"
          }
        }
      },
      "updateTagTypeSchema": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          }
        }
      },
      "updateUserSchema": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "rootRole": {
            "type": "number"
          }
        }
      },
      "updateTagsSchema": {
        "type": "object",
        "description": "Represents a set of changes to a feature's tags, such as adding or removing tags.",
        "additionalProperties": false,
        "required": [
          "addedTags",
          "removedTags"
        ],
        "properties": {
          "addedTags": {
            "type": "array",
            "description": "Tags to add to the feature.",
            "items": {
              "$ref": "#/components/schemas/tagSchema"
            }
          },
          "removedTags": {
            "type": "array",
            "description": "Tags to remove from the feature.",
            "items": {
              "$ref": "#/components/schemas/tagSchema"
            }
          }
        },
        "example": {
          "addedTags": [
            {
              "value": "tag-to-add",
              "type": "simple"
            }
          ],
          "removedTags": [
            {
              "value": "tag-to-remove",
              "type": "simple"
            }
          ]
        }
      },
      "upsertContextFieldSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "stickiness": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "number"
          },
          "legalValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/legalValueSchema"
            }
          }
        }
      },
      "upsertSegmentSchema": {
        "type": "object",
        "description": "Represents a segment of users defined by a set of constraints.",
        "required": [
          "name",
          "constraints"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the segment."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of the segment."
          },
          "project": {
            "type": "string",
            "nullable": true,
            "description": "Project from where this segment will be accessible. If none is defined the segment will be global (i.e. accessible from any project)."
          },
          "constraints": {
            "type": "array",
            "description": "List of constraints that determine which users will be part of the segment",
            "items": {
              "$ref": "#/components/schemas/constraintSchema"
            }
          }
        },
        "example": {
          "name": "segment name",
          "description": "segment description",
          "project": "optional project id",
          "constraints": [
            {
              "contextName": "environment",
              "operator": "IN",
              "values": [
                "production",
                "staging"
              ]
            }
          ]
        }
      },
      "upsertStrategySchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "editable": {
            "type": "boolean"
          },
          "parameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "required": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "userSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "number"
          },
          "isAPI": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "inviteLink": {
            "type": "string"
          },
          "loginAttempts": {
            "type": "number"
          },
          "emailSent": {
            "type": "boolean"
          },
          "rootRole": {
            "type": "number"
          },
          "seenAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "accountType": {
            "type": "string"
          }
        }
      },
      "usersGroupsBaseSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/groupSchema"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userSchema"
            }
          }
        }
      },
      "usersSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "users"
        ],
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userSchema"
            }
          },
          "rootRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/roleSchema"
            }
          }
        }
      },
      "usersSearchSchema": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/userSchema"
        }
      },
      "validatedEdgeTokensSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "tokens"
        ],
        "description": "A object containing a list of valid Unleash tokens.",
        "properties": {
          "tokens": {
            "description": "The list of Unleash token objects. Each object contains the token itself and some additional metadata.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/edgeTokenSchema"
            }
          }
        }
      },
      "validatePasswordSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "type": "string"
          }
        }
      },
      "validateTagTypeSchema": {
        "type": "object",
        "required": [
          "valid",
          "tagType"
        ],
        "properties": {
          "valid": {
            "type": "boolean"
          },
          "tagType": {
            "$ref": "#/components/schemas/tagTypeSchema"
          }
        }
      },
      "variantSchema": {
        "type": "object",
        "additionalProperties": false,
        "description": "A variant allows for further separation of users into segments. See [our excellent documentation](https://docs.getunleash.io/reference/feature-toggle-variants#what-are-variants) for a more detailed description",
        "required": [
          "name",
          "weight"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The variants name. Is unique for this feature toggle",
            "example": "blue_group"
          },
          "weight": {
            "type": "number",
            "description": "The weight is the likelihood of any one user getting this variant. It is a number between 0 and 1000. See the section on [variant weights](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight) for more information",
            "minimum": 0,
            "maximum": 1000
          },
          "weightType": {
            "description": "Set to fix if this variant must have exactly the weight allocated to it. If the type is variable, the weight will adjust so that the total weight of all variants adds up to 1000",
            "type": "string",
            "example": "fix"
          },
          "stickiness": {
            "type": "string",
            "description": "[Stickiness](https://docs.getunleash.io/reference/feature-toggle-variants#variant-stickiness) is how Unleash guarantees that the same user gets the same variant every time",
            "example": "custom.context.field"
          },
          "payload": {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "description": "Extra data configured for this variant",
            "properties": {
              "type": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "example": {
              "type": "json",
              "value": "{color: red}"
            }
          },
          "overrides": {
            "description": "Overrides assigning specific variants to specific users. The weighting system automatically assigns users to specific groups for you, but any overrides in this list will take precedence.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/overrideSchema"
            }
          }
        }
      },
      "variantFlagSchema": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "payload": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          }
        }
      },
      "variantsSchema": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/variantSchema"
        }
      },
      "versionSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "current",
          "latest",
          "isLatest",
          "instanceId"
        ],
        "properties": {
          "current": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "oss": {
                "type": "string"
              },
              "enterprise": {
                "type": "string"
              }
            }
          },
          "latest": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "oss": {
                "type": "string"
              },
              "enterprise": {
                "type": "string"
              }
            }
          },
          "isLatest": {
            "type": "boolean"
          },
          "instanceId": {
            "type": "string"
          }
        }
      },
      "projectOverviewSchema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "name"
        ],
        "description": "A high-level overview of a project. It contains information such as project statistics, the name of the project, what members and what features it contains, etc.",
        "properties": {
          "stats": {
            "$ref": "#/components/schemas/projectStatsSchema",
            "description": "Project statistics"
          },
          "version": {
            "type": "number",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "dx-squad",
            "description": "The name of this project"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "DX squad feature release",
            "description": "Additional information about the project"
          },
          "defaultStickiness": {
            "type": "string",
            "example": "userId",
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy"
          },
          "mode": {
            "type": "string",
            "enum": [
              "open",
              "protected"
            ],
            "example": "open",
            "description": "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not."
          },
          "members": {
            "type": "number",
            "example": 4,
            "description": "The number of members this project has"
          },
          "health": {
            "type": "number",
            "example": 50,
            "description": "An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating) on a scale from 0 to 100"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/projectEnvironmentSchema"
            },
            "example": [
              {
                "environment": "development"
              },
              {
                "environment": "production",
                "defaultStrategy": {
                  "name": "flexibleRollout",
                  "constraints": [],
                  "parameters": {
                    "rollout": "50",
                    "stickiness": "customAppName",
                    "groupId": "stickytoggle"
                  }
                }
              }
            ],
            "description": "The environments that are enabled for this project"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureSchema"
            },
            "description": "The full list of features in this project (excluding archived features)"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-02-10T08:36:35.262Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-02-10T08:36:35.262Z"
          },
          "favorite": {
            "type": "boolean",
            "example": true,
            "description": "`true` if the project was favorited, otherwise `false`."
          }
        }
      },
      "importTogglesSchema": {
        "type": "object",
        "required": [
          "project",
          "environment",
          "data"
        ],
        "additionalProperties": false,
        "properties": {
          "project": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/exportResultSchema"
          }
        }
      },
      "importTogglesValidateSchema": {
        "type": "object",
        "required": [
          "errors",
          "warnings"
        ],
        "additionalProperties": false,
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/importTogglesValidateItemSchema"
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/importTogglesValidateItemSchema"
            }
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/importTogglesValidateItemSchema"
            }
          }
        }
      },
      "importTogglesValidateItemSchema": {
        "type": "object",
        "required": [
          "message",
          "affectedItems"
        ],
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string"
          },
          "affectedItems": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "contextFieldStrategiesSchema": {
        "type": "object",
        "description": "A wrapper object containing all for strategies using a specific context field",
        "required": [
          "strategies"
        ],
        "properties": {
          "strategies": {
            "type": "array",
            "description": "List of strategies using the context field",
            "items": {
              "type": "object",
              "required": [
                "id",
                "featureName",
                "projectId",
                "environment",
                "strategyName"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "example": "433ae8d9-dd69-4ad0-bc46-414aedbe9c55",
                  "description": "The ID of the strategy."
                },
                "featureName": {
                  "type": "string",
                  "example": "best-feature",
                  "description": "The name of the feature that contains this strategy."
                },
                "projectId": {
                  "type": "string",
                  "description": "The ID of the project that contains this feature."
                },
                "environment": {
                  "type": "string",
                  "description": "The ID of the environment where this strategy is in."
                },
                "strategyName": {
                  "type": "string",
                  "description": "The name of the strategy."
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Addons",
      "description": "Create, update, and delete [Unleash addons](https://docs.getunleash.io/addons)."
    },
    {
      "name": "Admin UI",
      "description": "Configure the Unleash Admin UI. Why did you enable an experimental feature?"
    },
    {
      "name": "API tokens",
      "description": "Create, update, and delete [Unleash API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys)."
    },
    {
      "name": "Archive",
      "description": "Revive or permanently delete [archived feature toggles](https://docs.getunleash.io/advanced/archived_toggles)."
    },
    {
      "name": "Auth",
      "description": "Manage logins, passwords, etc."
    },
    {
      "name": "Change Requests",
      "description": "API for managing [change requests](https://docs.getunleash.io/reference/change-requests)."
    },
    {
      "name": "Client",
      "description": "Endpoints for [Unleash server-side clients](https://docs.getunleash.io/reference/sdks)."
    },
    {
      "name": "Context",
      "description": "Create, update, and delete [context fields](https://docs.getunleash.io/reference/unleash-context) that Unleash is aware of."
    },
    {
      "name": "Edge",
      "description": "Endpoints related to Unleash on the Edge."
    },
    {
      "name": "Environments",
      "description": "Create, update, delete, enable or disable [environments](https://docs.getunleash.io/reference/environments) for this Unleash instance."
    },
    {
      "name": "Events",
      "description": "Read events from this Unleash instance."
    },
    {
      "name": "Features",
      "description": "Create, update, and delete [features toggles](https://docs.getunleash.io/reference/feature-toggles)."
    },
    {
      "name": "Frontend API",
      "description": "API for connecting client-side (frontend) applications to Unleash."
    },
    {
      "name": "Import/Export",
      "description": "[Import and export](https://docs.getunleash.io/deploy/import_export) the state of your Unleash instance."
    },
    {
      "name": "Instance Admin",
      "description": "Instance admin endpoints used to manage the Unleash instance itself."
    },
    {
      "name": "Maintenance",
      "description": "Enable/disable the maintenance mode of Unleash."
    },
    {
      "name": "Metrics",
      "description": "Register, read, or delete metrics recorded by Unleash."
    },
    {
      "name": "Operational",
      "description": "Endpoints related to the operational status of this Unleash instance."
    },
    {
      "name": "Personal access tokens",
      "description": "Create, update, and delete [Personal access tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens)."
    },
    {
      "name": "Playground",
      "description": "Evaluate an Unleash context against your feature toggles."
    },
    {
      "name": "Projects",
      "description": "Create, update, and delete [Unleash projects](https://docs.getunleash.io/reference/projects)."
    },
    {
      "name": "Public signup tokens",
      "description": "Create, update, and delete [Unleash Public Signup tokens](https://docs.getunleash.io/reference/public-signup-tokens)."
    },
    {
      "name": "Segments",
      "description": "Create, update, delete, and manage [segments](https://docs.getunleash.io/reference/segments)."
    },
    {
      "name": "Service Accounts",
      "description": "Endpoints for managing [Service Accounts](https://docs.getunleash.io/reference/service-accounts), which enable programmatic access to the Unleash API."
    },
    {
      "name": "Strategies",
      "description": "Create, update, delete, manage [custom strategies](https://docs.getunleash.io/reference/custom-activation-strategies)."
    },
    {
      "name": "Tags",
      "description": "Create, update, and delete [tags and tag types](https://docs.getunleash.io/reference/tags)."
    },
    {
      "name": "Unstable",
      "description": "Experimental endpoints that may change or disappear at any time."
    },
    {
      "name": "Users",
      "description": "Manage users and passwords."
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "Operational"
        ],
        "operationId": "getHealth",
        "summary": "Get instance operational status",
        "description": "This operation returns information about whether this Unleash instance is healthy and ready to serve requests or not. Typically used by your deployment orchestrator (e.g. Kubernetes, Docker Swarm, Mesos, et al.).",
        "responses": {
          "200": {
            "description": "healthCheckSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/healthCheckSchema"
                }
              }
            }
          },
          "500": {
            "description": "healthCheckSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/healthCheckSchema"
                }
              }
            }
          }
        }
      }
    },
    "/invite/{token}/validate": {
      "get": {
        "tags": [
          "Public signup tokens"
        ],
        "operationId": "validatePublicSignupToken",
        "summary": "Check whether a public sign-up token exists, has not expired and is enabled",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/invite/{token}/signup": {
      "post": {
        "tags": [
          "Public signup tokens"
        ],
        "operationId": "addPublicSignupTokenUser",
        "summary": "Add a user via a signup token",
        "description": "Create a user with the viewer root role and link them to the provided signup token",
        "requestBody": {
          "description": "createInvitedUserSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createInvitedUserSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "userSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/auth/simple/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "login",
        "requestBody": {
          "description": "loginSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loginSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "userSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSchema"
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset/validate": {
      "get": {
        "tags": [
          "Auth"
        ],
        "operationId": "validateToken",
        "responses": {
          "200": {
            "description": "tokenUserSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tokenUserSchema"
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset/password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "changePassword",
        "requestBody": {
          "description": "changePasswordSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changePasswordSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        }
      }
    },
    "/auth/reset/validate-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "validatePassword",
        "requestBody": {
          "description": "validatePasswordSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/validatePasswordSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        }
      }
    },
    "/auth/reset/password-email": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "sendResetPasswordEmail",
        "requestBody": {
          "description": "emailSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emailSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        }
      }
    },
    "/api/admin/features": {
      "get": {
        "tags": [
          "Features"
        ],
        "operationId": "getAllToggles",
        "responses": {
          "200": {
            "description": "featuresSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featuresSchema"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/admin/features/validate": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "validateFeature",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        }
      }
    },
    "/api/admin/features/{featureName}/tags": {
      "get": {
        "summary": "Get all tags for a feature.",
        "description": "Retrieves all the tags for a feature name. If the feature does not exist it returns an empty list.",
        "tags": [
          "Features"
        ],
        "operationId": "listTags",
        "responses": {
          "200": {
            "description": "tagsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "summary": "Adds a tag to a feature.",
        "description": "Adds a tag to a feature if the feature and tag type exist in the system. The operation is idempotent, so adding an existing tag will result in a successful response.",
        "tags": [
          "Features"
        ],
        "operationId": "addTag",
        "requestBody": {
          "description": "tagSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "summary": "Updates multiple tags for a feature.",
        "description": "Receives a list of tags to add and a list of tags to remove that are mandatory but can be empty. All tags under addedTags are first added to the feature and then all tags under removedTags are removed from the feature.",
        "tags": [
          "Features"
        ],
        "operationId": "updateTags",
        "requestBody": {
          "description": "updateTagsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateTagsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagsSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/features/{featureName}/tags/{type}/{value}": {
      "delete": {
        "summary": "Removes a tag from a feature.",
        "description": "Removes a tag from a feature. If the feature exists but the tag does not, it returns a successful response.",
        "tags": [
          "Features"
        ],
        "operationId": "removeTag",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/feature-types": {
      "get": {
        "tags": [
          "Features"
        ],
        "operationId": "getAllFeatureTypes",
        "responses": {
          "200": {
            "description": "featureTypesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypesSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/archive/features": {
      "get": {
        "tags": [
          "Archive"
        ],
        "operationId": "getArchivedFeatures",
        "responses": {
          "200": {
            "description": "featuresSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featuresSchema"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/admin/archive/features/{projectId}": {
      "get": {
        "tags": [
          "Archive"
        ],
        "operationId": "getArchivedFeaturesByProjectId",
        "responses": {
          "200": {
            "description": "featuresSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featuresSchema"
                }
              }
            }
          }
        },
        "deprecated": true,
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/archive/{featureName}": {
      "delete": {
        "tags": [
          "Archive"
        ],
        "operationId": "deleteFeature",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/archive/revive/{featureName}": {
      "post": {
        "tags": [
          "Archive"
        ],
        "operationId": "reviveFeature",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/strategies": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "operationId": "getAllStrategies",
        "responses": {
          "200": {
            "description": "strategiesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/strategiesSchema"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Strategies"
        ],
        "operationId": "createStrategy",
        "requestBody": {
          "description": "upsertStrategySchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upsertStrategySchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/strategySchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/strategies/{name}": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "operationId": "getStrategy",
        "responses": {
          "200": {
            "description": "strategySchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/strategySchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Strategies"
        ],
        "operationId": "removeStrategy",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/strategies/{strategyName}": {
      "put": {
        "tags": [
          "Strategies"
        ],
        "operationId": "updateStrategy",
        "requestBody": {
          "description": "upsertStrategySchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upsertStrategySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "strategyName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/strategies/{strategyName}/deprecate": {
      "post": {
        "tags": [
          "Strategies"
        ],
        "operationId": "deprecateStrategy",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "strategyName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/strategies/{strategyName}/reactivate": {
      "post": {
        "tags": [
          "Strategies"
        ],
        "operationId": "reactivateStrategy",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "strategyName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/events": {
      "get": {
        "operationId": "getEvents",
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "eventsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "description": "The name of the project whose events you want to retrieve",
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "description": "Returns **the last 100** events from the Unleash instance when called without a query parameter. When called with a `project` parameter, returns **all events** for the specified project.\n\nIf the provided project does not exist, the list of events will be empty.",
        "summary": "Get the most recent events from the Unleash instance or all events related to a project."
      }
    },
    "/api/admin/events/{featureName}": {
      "get": {
        "operationId": "getEventsForToggle",
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "featureEventsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureEventsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Returns all events related to the specified feature toggle. If the feature toggle does not exist, the list of events will be empty.",
        "summary": "Get all events related to a specific feature toggle.",
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/events/search": {
      "post": {
        "operationId": "searchEvents",
        "tags": [
          "Events"
        ],
        "requestBody": {
          "description": "searchEventsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/searchEventsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "eventsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventsSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/playground": {
      "post": {
        "operationId": "getPlayground",
        "tags": [
          "Playground"
        ],
        "responses": {
          "200": {
            "description": "playgroundResponseSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playgroundResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "playgroundRequestSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/playgroundRequestSchema"
              }
            }
          }
        },
        "description": "Use the provided `context`, `environment`, and `projects` to evaluate toggles on this Unleash instance. Returns a list of all toggles that match the parameters and what they evaluate to. The response also contains the input parameters that were provided.",
        "summary": "Evaluate an Unleash context against a set of environments and projects."
      }
    },
    "/api/admin/playground/advanced": {
      "post": {
        "operationId": "getAdvancedPlayground",
        "tags": [
          "Unstable"
        ],
        "responses": {
          "200": {
            "description": "advancedPlaygroundResponseSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/advancedPlaygroundResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "advancedPlaygroundRequestSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/advancedPlaygroundRequestSchema"
              }
            }
          }
        },
        "description": "Use the provided `context`, `environments`, and `projects` to evaluate toggles on this Unleash instance. You can use comma-separated values to provide multiple values to each context field. Returns a combinatorial list of all toggles that match the parameters and what they evaluate to. The response also contains the input parameters that were provided.",
        "summary": "Batch evaluate an Unleash context against a set of environments and projects."
      }
    },
    "/api/admin/metrics/applications/{appName}": {
      "post": {
        "tags": [
          "Metrics"
        ],
        "operationId": "createApplication",
        "summary": "Create an application to connect reported metrics",
        "description": "Is used to report usage as well which sdk the application uses",
        "responses": {
          "202": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "createApplicationSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createApplicationSchema"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Metrics"
        ],
        "operationId": "deleteApplication",
        "summary": "Delete an application",
        "description": "Delete the application specified in the request URL. Returns 200 OK if the application was successfully deleted or if it didn't exist",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "Metrics"
        ],
        "operationId": "getApplication",
        "summary": "Get application data",
        "description": "Returns data about the specified application (`appName`). The data contains information on the name of the application, sdkVersion (which sdk reported these metrics, typically `unleash-client-node:3.4.1` or `unleash-client-java:7.1.0`), as well as data about how to display this application in a list.",
        "responses": {
          "200": {
            "description": "applicationSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationSchema"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/metrics/applications": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get all applications",
        "description": "Returns all applications registered with Unleash. Applications can be created via metrics reporting or manual creation",
        "operationId": "getApplications",
        "responses": {
          "200": {
            "description": "applicationsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationsSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/client-metrics/features/{name}/raw": {
      "get": {
        "operationId": "getRawFeatureMetrics",
        "tags": [
          "Metrics"
        ],
        "summary": "Feature usage metrics for the last 48 hours, grouped by hour",
        "responses": {
          "200": {
            "description": "featureMetricsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureMetricsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/client-metrics/features/{name}": {
      "get": {
        "operationId": "getFeatureUsageSummary",
        "tags": [
          "Metrics"
        ],
        "summary": "Last hour of usage and a list of applications that have reported seeing this feature toggle",
        "description": "Separate counts for yes (enabled), no (disabled), as well as how many times each variant was selected during the last hour",
        "responses": {
          "200": {
            "description": "featureUsageSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureUsageSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/user": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getMe",
        "responses": {
          "200": {
            "description": "meSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/meSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user/profile": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getProfile",
        "responses": {
          "200": {
            "description": "profileSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/profileSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user/change-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "changeMyPassword",
        "requestBody": {
          "description": "passwordSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/passwordSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "password mismatch"
          },
          "401": {
            "description": "incorrect old password"
          }
        }
      }
    },
    "/api/admin/user/tokens": {
      "get": {
        "tags": [
          "Personal access tokens"
        ],
        "operationId": "getPats",
        "summary": "Get all Personal Access Tokens for the current user.",
        "description": "Returns all of the [Personal Access Tokens](https://docs.getunleash.io/how-to/how-to-create-personal-access-tokens) belonging to the current user.",
        "responses": {
          "200": {
            "description": "patsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/patsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Personal access tokens"
        ],
        "operationId": "createPat",
        "summary": "Create a new Personal Access Token.",
        "description": "Creates a new [Personal Access Token](https://docs.getunleash.io/how-to/how-to-create-personal-access-tokens) for the current user.",
        "requestBody": {
          "description": "patSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/patSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user/tokens/{id}": {
      "delete": {
        "tags": [
          "Personal access tokens"
        ],
        "operationId": "deletePat",
        "summary": "Delete a Personal Access Token.",
        "description": "This endpoint allows for deleting a [Personal Access Token](https://docs.getunleash.io/how-to/how-to-create-personal-access-tokens) belonging to the current user.",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/ui-config": {
      "get": {
        "tags": [
          "Admin UI"
        ],
        "operationId": "getUiConfig",
        "responses": {
          "200": {
            "description": "uiConfigSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/uiConfigSchema"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin UI"
        ],
        "operationId": "setUiConfig",
        "requestBody": {
          "description": "setUiConfigSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setUiConfigSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        }
      }
    },
    "/api/admin/context": {
      "get": {
        "tags": [
          "Context"
        ],
        "operationId": "getContextFields",
        "responses": {
          "200": {
            "description": "contextFieldsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contextFieldsSchema"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Context"
        ],
        "operationId": "createContextField",
        "requestBody": {
          "description": "upsertContextFieldSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upsertContextFieldSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contextFieldSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/context/{contextField}": {
      "get": {
        "tags": [
          "Context"
        ],
        "operationId": "getContextField",
        "responses": {
          "200": {
            "description": "contextFieldSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contextFieldSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "contextField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Context"
        ],
        "operationId": "updateContextField",
        "requestBody": {
          "description": "upsertContextFieldSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upsertContextFieldSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "contextField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Context"
        ],
        "operationId": "deleteContextField",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "contextField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/context/{contextField}/strategies": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "operationId": "getStrategiesByContextField",
        "responses": {
          "200": {
            "description": "contextFieldStrategiesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contextFieldStrategiesSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "contextField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/context/validate": {
      "post": {
        "tags": [
          "Context"
        ],
        "operationId": "validate",
        "requestBody": {
          "description": "nameSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nameSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        }
      }
    },
    "/api/admin/state/import": {
      "post": {
        "tags": [
          "Import/Export"
        ],
        "operationId": "import",
        "deprecated": true,
        "summary": "Import state (deprecated)",
        "description": "Imports state into the system. Deprecated in favor of /api/admin/features-batch/import",
        "responses": {
          "202": {
            "description": "This response has no body."
          }
        },
        "requestBody": {
          "description": "stateSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stateSchema"
              }
            }
          }
        }
      }
    },
    "/api/admin/state/export": {
      "get": {
        "tags": [
          "Import/Export"
        ],
        "operationId": "export",
        "deprecated": true,
        "summary": "Export state (deprecated)",
        "description": "Exports the current state of the system. Deprecated in favor of /api/admin/features-batch/export",
        "responses": {
          "200": {
            "description": "stateSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stateSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "format",
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "yaml"
              ],
              "default": "json"
            },
            "description": "Desired export format. Must be either `json` or `yaml`.",
            "in": "query"
          },
          {
            "name": "download",
            "schema": {
              "default": false,
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "number"
                }
              ]
            },
            "description": "Whether exported data should be downloaded as a file.",
            "in": "query"
          },
          {
            "name": "strategies",
            "schema": {
              "default": true,
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "number"
                }
              ]
            },
            "description": "Whether strategies should be included in the exported data.",
            "in": "query"
          },
          {
            "name": "featureToggles",
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "number"
                }
              ],
              "default": true
            },
            "description": "Whether feature toggles should be included in the exported data.",
            "in": "query"
          },
          {
            "name": "projects",
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "number"
                }
              ],
              "default": true
            },
            "description": "Whether projects should be included in the exported data.",
            "in": "query"
          },
          {
            "name": "tags",
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "number"
                }
              ],
              "default": true
            },
            "description": "Whether tag types, tags, and feature_tags should be included in the exported data.",
            "in": "query"
          },
          {
            "name": "environments",
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "number"
                }
              ],
              "default": true
            },
            "description": "Whether environments should be included in the exported data.",
            "in": "query"
          }
        ]
      }
    },
    "/api/admin/features-batch/export": {
      "post": {
        "tags": [
          "Unstable"
        ],
        "operationId": "exportFeatures",
        "requestBody": {
          "description": "exportQuerySchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/exportQuerySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "exportResultSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exportResultSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/features-batch/validate": {
      "post": {
        "summary": "Validate import of feature toggles for an environment in the project",
        "description": "Unleash toggles exported from a different instance can be imported into a new project and environment",
        "tags": [
          "Unstable"
        ],
        "operationId": "validateImport",
        "requestBody": {
          "description": "importTogglesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/importTogglesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "importTogglesValidateSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/importTogglesValidateSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/features-batch/import": {
      "post": {
        "summary": "Import feature toggles for an environment in the project",
        "description": "Unleash toggles exported from a different instance can be imported into a new project and environment",
        "tags": [
          "Unstable"
        ],
        "operationId": "importToggles",
        "requestBody": {
          "description": "importTogglesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/importTogglesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        }
      }
    },
    "/api/admin/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getTags",
        "responses": {
          "200": {
            "description": "tagsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagsSchema"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "operationId": "createTag",
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagWithVersionSchema"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "tagSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagSchema"
              }
            }
          }
        }
      }
    },
    "/api/admin/tags/{type}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getTagsByType",
        "responses": {
          "200": {
            "description": "tagsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagsSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/tags/{type}/{value}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getTag",
        "responses": {
          "200": {
            "description": "tagWithVersionSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagWithVersionSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "operationId": "deleteTag",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/tag-types": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getTagTypes",
        "responses": {
          "200": {
            "description": "tagTypesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagTypesSchema"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "operationId": "createTagType",
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagTypeSchema"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "tagTypeSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagTypeSchema"
              }
            }
          }
        }
      }
    },
    "/api/admin/tag-types/validate": {
      "post": {
        "tags": [
          "Tags"
        ],
        "operationId": "validateTagType",
        "responses": {
          "200": {
            "description": "validateTagTypeSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validateTagTypeSchema"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "tagTypeSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagTypeSchema"
              }
            }
          }
        }
      }
    },
    "/api/admin/tag-types/{name}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getTagType",
        "responses": {
          "200": {
            "description": "tagTypeSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagTypeSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "operationId": "updateTagType",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "requestBody": {
          "description": "updateTagTypeSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateTagTypeSchema"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "operationId": "deleteTagType",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/addons": {
      "get": {
        "summary": "Get all addons and providers",
        "description": "Retrieve all addons and providers that are defined on this Unleash instance.",
        "tags": [
          "Addons"
        ],
        "operationId": "getAddons",
        "responses": {
          "200": {
            "description": "addonsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addonsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new addon",
        "description": "Create an addon instance. The addon must use one of the providers available on this Unleash instance.",
        "tags": [
          "Addons"
        ],
        "operationId": "createAddon",
        "requestBody": {
          "description": "addonCreateUpdateSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addonCreateUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "addonSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addonSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "The request body is larger than what we accept. By default we only accept bodies of 100kB or less",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTooLarge",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You provided more data than we can handle. Unleash accepts at most X MB.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/addons/{id}": {
      "get": {
        "summary": "Get a specific addon",
        "description": "Retrieve information about the addon whose ID matches the ID in the request URL.",
        "tags": [
          "Addons"
        ],
        "operationId": "getAddon",
        "responses": {
          "200": {
            "description": "addonSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addonSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "summary": "Update an addon",
        "description": "Update the addon with a specific ID. Any fields in the update object will be updated. Properties that are not included in the update object will not be affected. To empty a property, pass `null` as that property's value.\n\nNote: passing `null` as a value for the description property will set it to an empty string.",
        "tags": [
          "Addons"
        ],
        "operationId": "updateAddon",
        "requestBody": {
          "description": "addonCreateUpdateSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addonCreateUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "addonSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addonSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "The request body is larger than what we accept. By default we only accept bodies of 100kB or less",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTooLarge",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You provided more data than we can handle. Unleash accepts at most X MB.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "summary": "Delete an addon",
        "description": "Delete the addon specified by the ID in the request path.",
        "tags": [
          "Addons"
        ],
        "operationId": "deleteAddon",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/api-tokens": {
      "get": {
        "tags": [
          "API tokens"
        ],
        "operationId": "getAllApiTokens",
        "responses": {
          "200": {
            "description": "apiTokensSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokensSchema"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "API tokens"
        ],
        "operationId": "createApiToken",
        "requestBody": {
          "description": "createApiTokenSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createApiTokenSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokenSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/api-tokens/{token}": {
      "put": {
        "tags": [
          "API tokens"
        ],
        "operationId": "updateApiToken",
        "requestBody": {
          "description": "updateApiTokenSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateApiTokenSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "API tokens"
        ],
        "operationId": "deleteApiToken",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/user-admin/validate-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "validateUserPassword",
        "requestBody": {
          "description": "passwordSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/passwordSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        }
      }
    },
    "/api/admin/user-admin/{id}/change-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "changeUserPassword",
        "requestBody": {
          "description": "passwordSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/passwordSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/user-admin/reset-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "resetUserPassword",
        "requestBody": {
          "description": "idSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/idSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "resetPasswordSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resetPasswordSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user-admin": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "usersSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersSchema"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "createUser",
        "requestBody": {
          "description": "createUserSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createUserSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "userSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user-admin/search": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "searchUsers",
        "responses": {
          "200": {
            "description": "usersSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user-admin/access": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getBaseUsersAndGroups",
        "responses": {
          "200": {
            "description": "usersGroupsBaseSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersGroupsBaseSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user-admin/admin-count": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getAdminCount",
        "responses": {
          "200": {
            "description": "adminCountSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminCountSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/user-admin/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUser",
        "responses": {
          "200": {
            "description": "userSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "operationId": "updateUser",
        "requestBody": {
          "description": "updateUserSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateUserSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "userSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "operationId": "deleteUser",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/feedback": {
      "post": {
        "tags": [
          "Admin UI"
        ],
        "operationId": "createFeedback",
        "requestBody": {
          "description": "feedbackSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/feedbackSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "feedbackSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/feedbackSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/feedback/{id}": {
      "put": {
        "tags": [
          "Admin UI"
        ],
        "operationId": "updateFeedback",
        "requestBody": {
          "description": "feedbackSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/feedbackSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "feedbackSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/feedbackSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "getProjects",
        "summary": "Get a list of all projects.",
        "description": "This endpoint returns an list of all the projects in the Unleash instance.",
        "responses": {
          "200": {
            "description": "projectsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/projects/{projectId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "getProjectOverview",
        "summary": "Get an overview of a project.",
        "description": "This endpoint returns an overview of the specified projects stats, project health, number of members, which environments are configured, and the features in the project.",
        "responses": {
          "200": {
            "description": "projectOverviewSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectOverviewSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}": {
      "get": {
        "tags": [
          "Features"
        ],
        "operationId": "getFeatureEnvironment",
        "responses": {
          "200": {
            "description": "featureEnvironmentSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureEnvironmentSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/off": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "toggleFeatureEnvironmentOff",
        "responses": {
          "200": {
            "description": "featureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/on": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "toggleFeatureEnvironmentOn",
        "responses": {
          "200": {
            "description": "featureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/bulk_features/environments/{environment}/on": {
      "post": {
        "tags": [
          "Features"
        ],
        "description": "This endpoint enables multiple feature toggles.",
        "summary": "Bulk enable a list of features.",
        "operationId": "bulkToggleFeaturesEnvironmentOn",
        "requestBody": {
          "description": "bulkToggleFeaturesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bulkToggleFeaturesSchema"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/bulk_features/environments/{environment}/off": {
      "post": {
        "tags": [
          "Features"
        ],
        "description": "This endpoint disables multiple feature toggles.",
        "summary": "Bulk disabled a list of features.",
        "operationId": "bulkToggleFeaturesEnvironmentOff",
        "requestBody": {
          "description": "bulkToggleFeaturesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bulkToggleFeaturesSchema"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies": {
      "get": {
        "tags": [
          "Features"
        ],
        "operationId": "getFeatureStrategies",
        "responses": {
          "200": {
            "description": "featureStrategySchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureStrategySchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "addFeatureStrategy",
        "requestBody": {
          "description": "createFeatureStrategySchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createFeatureStrategySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureStrategySchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureStrategySchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId}": {
      "get": {
        "tags": [
          "Features"
        ],
        "operationId": "getFeatureStrategy",
        "responses": {
          "200": {
            "description": "featureStrategySchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureStrategySchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "strategyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Features"
        ],
        "operationId": "updateFeatureStrategy",
        "requestBody": {
          "description": "updateFeatureStrategySchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateFeatureStrategySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureStrategySchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureStrategySchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "strategyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Features"
        ],
        "operationId": "patchFeatureStrategy",
        "requestBody": {
          "description": "patchesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureStrategySchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureStrategySchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "strategyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "operationId": "deleteFeatureStrategy",
        "tags": [
          "Features"
        ],
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "strategyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/set-sort-order": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "setStrategySortOrder",
        "requestBody": {
          "description": "setStrategySortOrderSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setStrategySortOrderSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features": {
      "get": {
        "tags": [
          "Features"
        ],
        "operationId": "getFeatures",
        "responses": {
          "200": {
            "description": "featuresSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featuresSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "createFeature",
        "requestBody": {
          "description": "createFeatureSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createFeatureSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/clone": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "cloneFeature",
        "requestBody": {
          "description": "cloneFeatureSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloneFeatureSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}": {
      "get": {
        "operationId": "getFeature",
        "tags": [
          "Features"
        ],
        "description": "This endpoint returns the information about the requested feature if the feature belongs to the specified project.",
        "summary": "Get a feature.",
        "responses": {
          "200": {
            "description": "featureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "You either do not have the required permissions or used an invalid URL."
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Features"
        ],
        "operationId": "updateFeature",
        "requestBody": {
          "description": "updateFeatureSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateFeatureSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Features"
        ],
        "operationId": "patchFeature",
        "requestBody": {
          "description": "patchesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Features"
        ],
        "operationId": "archiveFeature",
        "description": "This endpoint archives the specified feature if the feature belongs to the specified project.",
        "summary": "Archive a feature.",
        "responses": {
          "202": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "You either do not have the required permissions or used an invalid URL."
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/stale": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "staleFeatures",
        "description": "This endpoint stales the specified features.",
        "summary": "Stales a list of features",
        "requestBody": {
          "description": "batchStaleSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batchStaleSchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/tags": {
      "put": {
        "tags": [
          "Tags"
        ],
        "operationId": "addTagToFeatures",
        "requestBody": {
          "description": "tagsBulkAddSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagsBulkAddSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/environments": {
      "post": {
        "tags": [
          "Projects"
        ],
        "operationId": "addEnvironmentToProject",
        "summary": "Add an environment to a project.",
        "description": "This endpoint adds the provided environment to the specified project, with optional support for enabling and disabling change requests for the environment and project.",
        "requestBody": {
          "description": "projectEnvironmentSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/projectEnvironmentSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NameExistsError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/environments/{environment}": {
      "delete": {
        "tags": [
          "Projects"
        ],
        "operationId": "removeEnvironmentFromProject",
        "summary": "Remove an environment from a project.",
        "description": "This endpoint removes the specified environment from the project.",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/environments/{environment}/default-strategy": {
      "post": {
        "tags": [
          "Projects"
        ],
        "operationId": "addDefaultStrategyToProjectEnvironment",
        "description": "Adds a default strategy for this environment. Unleash will use this strategy by default when enabling a toggle. Use the wild card \"*\" for `:environment` to add to all environments. ",
        "requestBody": {
          "description": "createFeatureStrategySchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createFeatureStrategySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "createFeatureStrategySchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createFeatureStrategySchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/health-report": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "getProjectHealthReport",
        "summary": "Get a health report for a project.",
        "description": "This endpoint returns a health report for the specified project. This data is used for [the technical debt dashboard](https://docs.getunleash.io/reference/technical-debt#the-technical-debt-dashboard)",
        "responses": {
          "200": {
            "description": "healthReportSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/healthReportSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/variants": {
      "get": {
        "summary": "Retrieve variants for a feature (deprecated) ",
        "description": "(deprecated from 4.21) Retrieve the variants for the specified feature. From Unleash 4.21 onwards, this endpoint will attempt to choose a [production-type environment](https://docs.getunleash.io/reference/environments) as the source of truth. If more than one production environment is found, the first one will be used.",
        "deprecated": true,
        "tags": [
          "Features"
        ],
        "operationId": "getFeatureVariants",
        "responses": {
          "200": {
            "description": "featureVariantsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "summary": "Apply a patch to a feature's variants (in all environments).",
        "description": "Apply a list of patches patch to the specified feature's variants. The patch objects should conform to the [JSON-patch format (RFC 6902)](https://www.rfc-editor.org/rfc/rfc6902).\n                        \n                        ⚠️ **Warning**: This method is not atomic. If something fails in the middle of applying the patch, you can be left with a half-applied patch. We recommend that you instead [patch variants on a per-environment basis](/docs/reference/api/unleash/patch-environments-feature-variants.api.mdx), which **is** an atomic operation.",
        "tags": [
          "Features"
        ],
        "operationId": "patchFeatureVariants",
        "requestBody": {
          "description": "patchesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureVariantsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "summary": "Create (overwrite) variants for a feature toggle in all environments",
        "description": "This overwrites the current variants for the feature specified in the :featureName parameter in all environments.\n\n                    The backend will validate the input for the following invariants\n\n                    * If there are variants, there needs to be at least one variant with `weightType: variable`\n                    * The sum of the weights of variants with `weightType: fix` must be strictly less than 1000 (< 1000)\n\n                    The backend will also distribute remaining weight up to 1000 after adding the variants with `weightType: fix` together amongst the variants of `weightType: variable`",
        "tags": [
          "Features"
        ],
        "operationId": "overwriteFeatureVariants",
        "requestBody": {
          "description": "variantsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/variantsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureVariantsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/variants": {
      "get": {
        "summary": "Get variants for a feature in an environment",
        "description": "Returns the variants for a feature in a specific environment. If the feature has no variants it will return an empty array of variants",
        "tags": [
          "Features"
        ],
        "operationId": "getEnvironmentFeatureVariants",
        "responses": {
          "200": {
            "description": "featureVariantsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "summary": "Patch a feature's variants in an environment",
        "description": "Apply a list of patches to the features environments in the specified environment. The patch objects should conform to the [JSON-patch format (RFC 6902)](https://www.rfc-editor.org/rfc/rfc6902).",
        "tags": [
          "Features"
        ],
        "operationId": "patchEnvironmentsFeatureVariants",
        "requestBody": {
          "description": "patchesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureVariantsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "summary": "Create (overwrite) variants for a feature in an environment",
        "description": "This overwrites the current variants for the feature toggle in the :featureName parameter for the :environment parameter.\n                        \n                        The backend will validate the input for the following invariants:\n                        \n                    * If there are variants, there needs to be at least one variant with `weightType: variable`\n                    * The sum of the weights of variants with `weightType: fix` must be strictly less than 1000 (< 1000)\n\n                    The backend will also distribute remaining weight up to 1000 after adding the variants with `weightType: fix` together amongst the variants of `weightType: variable`",
        "tags": [
          "Features"
        ],
        "operationId": "overwriteEnvironmentFeatureVariants",
        "requestBody": {
          "description": "variantsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/variantsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureVariantsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/variants-batch": {
      "put": {
        "tags": [
          "Features"
        ],
        "operationId": "overwriteFeatureVariantsOnEnvironments",
        "requestBody": {
          "description": "pushVariantsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pushVariantsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "featureVariantsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/api-tokens": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "getProjectApiTokens",
        "summary": "Get api tokens for project.",
        "description": "Returns the [project API tokens](https://docs.getunleash.io/how-to/how-to-create-project-api-tokens) that have been created for this project.",
        "responses": {
          "200": {
            "description": "apiTokensSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokensSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "operationId": "createProjectApiToken",
        "requestBody": {
          "description": "createApiTokenSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createApiTokenSchema"
              }
            }
          }
        },
        "summary": "Create a project API token.",
        "description": "Endpoint that allows creation of [project API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys#api-token-visibility) for the specified project.",
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokenSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/api-tokens/{token}": {
      "delete": {
        "tags": [
          "Projects"
        ],
        "operationId": "deleteProjectApiToken",
        "summary": "Delete a project API token.",
        "description": "This operation deletes the API token specified in the request URL. If the token doesn't exist, returns an OK response (status code 200).",
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/delete": {
      "post": {
        "tags": [
          "Archive"
        ],
        "operationId": "deleteFeatures",
        "description": "This endpoint deletes the specified features, that are in archive.",
        "summary": "Deletes a list of features",
        "requestBody": {
          "description": "batchFeaturesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batchFeaturesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/revive": {
      "post": {
        "tags": [
          "Archive"
        ],
        "operationId": "reviveFeatures",
        "description": "This endpoint revives the specified features.",
        "summary": "Revives a list of features",
        "requestBody": {
          "description": "batchFeaturesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batchFeaturesSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/archive": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "archiveFeatures",
        "description": "This endpoint archives the specified features.",
        "summary": "Archives a list of features",
        "requestBody": {
          "description": "batchFeaturesSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batchFeaturesSchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/environments": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get all environments",
        "description": "Retrieves all environments that exist in this Unleash instance.",
        "operationId": "getAllEnvironments",
        "responses": {
          "200": {
            "description": "environmentsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environmentsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/environments/{name}": {
      "get": {
        "tags": [
          "Environments"
        ],
        "operationId": "getEnvironment",
        "summary": "Get the environment with `name`",
        "description": "Retrieves the environment with `name` if it exists in this Unleash instance",
        "responses": {
          "200": {
            "description": "environmentSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environmentSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/environments/project/{projectId}": {
      "get": {
        "tags": [
          "Environments"
        ],
        "operationId": "getProjectEnvironments",
        "summary": "Get the environments available to a project",
        "description": "Gets the environments that are available for this project. An environment is available for a project if enabled in the [project configuration](https://docs.getunleash.io/reference/environments#step-1-enable-new-environments-for-your-project)",
        "responses": {
          "200": {
            "description": "environmentsProjectSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environmentsProjectSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/environments/sort-order": {
      "put": {
        "tags": [
          "Environments"
        ],
        "summary": "Update environment sort orders",
        "description": "Updates sort orders for the named environments. Environments not specified are unaffected.",
        "operationId": "updateSortOrder",
        "requestBody": {
          "description": "sortOrderSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sortOrderSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/environments/{name}/on": {
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Toggle the environment with `name` on",
        "description": "Makes it possible to enable this environment for a project. An environment must first be globally enabled using this endpoint before it can be enabled for a project",
        "operationId": "toggleEnvironmentOn",
        "responses": {
          "204": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/environments/{name}/off": {
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Toggle the environment with `name` off",
        "description": "Removes this environment from the list of available environments for projects to use",
        "operationId": "toggleEnvironmentOff",
        "responses": {
          "204": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NotFoundError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\".",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/splash/{id}": {
      "post": {
        "tags": [
          "Admin UI"
        ],
        "operationId": "updateSplashSettings",
        "responses": {
          "200": {
            "description": "splashSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/splashSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/constraints/validate": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "validateConstraint",
        "requestBody": {
          "description": "constraintSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/constraintSchema"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "validConstraint"
          },
          "400": {
            "description": "invalidConstraint"
          }
        }
      }
    },
    "/api/admin/invite-link/tokens": {
      "get": {
        "tags": [
          "Public signup tokens"
        ],
        "summary": "Retrieve all existing public signup tokens",
        "operationId": "getAllPublicSignupTokens",
        "responses": {
          "200": {
            "description": "publicSignupTokensSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicSignupTokensSchema"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Public signup tokens"
        ],
        "operationId": "createPublicSignupToken",
        "summary": "Create a public signup token",
        "description": "Lets administrators create a invite link to share with colleagues.  People that join using the public invite are assigned the `Viewer` role",
        "requestBody": {
          "description": "publicSignupTokenCreateSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/publicSignupTokenCreateSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "description": "The resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicSignupTokenSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/invite-link/tokens/{token}": {
      "get": {
        "tags": [
          "Public signup tokens"
        ],
        "summary": "Retrieve a token",
        "description": "Get information about a specific token. The `:token` part of the URL should be the token's secret.",
        "operationId": "getPublicSignupToken",
        "responses": {
          "200": {
            "description": "publicSignupTokenSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicSignupTokenSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Public signup tokens"
        ],
        "operationId": "updatePublicSignupToken",
        "summary": "Update a public signup token",
        "description": "Update information about a specific token. The `:token` part of the URL should be the token's secret.",
        "requestBody": {
          "description": "publicSignupTokenUpdateSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/publicSignupTokenUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "publicSignupTokenSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicSignupTokenSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/instance-admin/statistics/csv": {
      "get": {
        "tags": [
          "Instance Admin"
        ],
        "summary": "Instance usage statistics",
        "description": "Provides statistics about various features of Unleash to allow for reporting of usage for self-hosted customers. The response contains data such as the number of users, groups, features, strategies, versions, etc.",
        "operationId": "getInstanceAdminStatsCsv",
        "responses": {
          "200": {
            "description": "instanceAdminStatsSchemaCsv",
            "content": {
              "text/csv": {
                "example": "\"OIDCenabled\",\"SAMLenabled\",\"clientApps\",\"contextFields\",\"environments\",\"featureExports\",\"featureImports\",\"featureToggles\",\"groups\",\"instanceId\",\"projects\",\"roles\",\"segments\",\"strategies\",\"sum\",\"timestamp\",\"users\",\"versionEnterprise\",\"versionOSS\"\ntrue,false,\"[{\"\"range\"\":\"\"allTime\"\",\"\"count\"\":15},{\"\"range\"\":\"\"30d\"\",\"\"count\"\":9},{\"\"range\"\":\"\"7d\"\",\"\"count\"\":5}]\",6,2,0,0,29,3,\"ed3861ae-78f9-4e8c-8e57-b57efc15f82b\",1,5,2,8,\"some-sha256-hash\",\"2023-07-12T10:00:00.000Z\",10,\"5.1.7\",\"5.1.7\"",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/instance-admin/statistics": {
      "get": {
        "tags": [
          "Instance Admin"
        ],
        "operationId": "getInstanceAdminStats",
        "summary": "Instance usage statistics",
        "description": "Provides statistics about various features of Unleash to allow for reporting of usage for self-hosted customers. The response contains data such as the number of users, groups, features, strategies, versions, etc.",
        "responses": {
          "200": {
            "description": "instanceAdminStatsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/instanceAdminStatsSchema"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/admin/projects/{projectId}/features/{featureName}/favorites": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "addFavoriteFeature",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Features"
        ],
        "operationId": "removeFavoriteFeature",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/projects/{projectId}/favorites": {
      "post": {
        "tags": [
          "Features"
        ],
        "operationId": "addFavoriteProject",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Features"
        ],
        "operationId": "removeFavoriteProject",
        "responses": {
          "200": {
            "description": "This response has no body."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/admin/maintenance": {
      "post": {
        "summary": "Enabled/disabled maintenance mode",
        "description": "Lets administrators put Unleash into a mostly read-only mode. While Unleash is in maintenance mode, users can not change any configuration settings",
        "tags": [
          "Maintenance"
        ],
        "operationId": "toggleMaintenance",
        "responses": {
          "204": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "toggleMaintenanceSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/toggleMaintenanceSchema"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get maintenance mode status",
        "description": "Tells you whether maintenance mode is enabled or disabled",
        "tags": [
          "Maintenance"
        ],
        "operationId": "getMaintenance",
        "responses": {
          "200": {
            "description": "maintenanceSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/maintenanceSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "AuthenticationRequired",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "NoAccessError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client/features/{featureName}": {
      "get": {
        "operationId": "getClientFeature",
        "summary": "Get a single feature toggle",
        "description": "Gets all the client data for a single toggle. Contains the exact same information about a toggle as the `/api/client/features` endpoint does, but only contains data about the specified toggle. All SDKs should use `/api/client/features`",
        "tags": [
          "Client"
        ],
        "responses": {
          "200": {
            "description": "clientFeatureSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clientFeatureSchema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/client/features": {
      "get": {
        "summary": "Get all toggles (SDK)",
        "description": "Returns the SDK configuration for all feature toggles that are available to the provided API key. Used by SDKs to configure local evaluation",
        "operationId": "getAllClientFeatures",
        "tags": [
          "Client"
        ],
        "responses": {
          "200": {
            "description": "clientFeaturesSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clientFeaturesSchema"
                }
              }
            }
          }
        }
      }
    },
    "/api/client/metrics": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Register client usage metrics",
        "description": "Registers usage metrics. Stores information about how many times each toggle was evaluated to enabled and disabled within a time frame. If provided, this operation will also store data on how many times each feature toggle's variants were displayed to the end user.",
        "operationId": "registerClientMetrics",
        "requestBody": {
          "description": "clientMetricsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clientMetricsSchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client/register": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Register a client SDK",
        "description": "Register a client SDK with Unleash. SDKs call this endpoint on startup to tell Unleash about their existence. Used to track custom strategies in use as well as SDK versions.",
        "operationId": "registerClientApplication",
        "requestBody": {
          "description": "clientApplicationSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clientApplicationSchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "This response has no body."
          }
        }
      }
    },
    "/edge/validate": {
      "post": {
        "tags": [
          "Edge"
        ],
        "summary": "Check which tokens are valid",
        "description": "This operation accepts a list of tokens to validate. Unleash will validate each token you provide. For each valid token you provide, Unleash will return the token along with its type and which projects it has access to.",
        "operationId": "getValidTokens",
        "requestBody": {
          "description": "tokenStringListSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tokenStringListSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "validatedEdgeTokensSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validatedEdgeTokensSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "The request body is larger than what we accept. By default we only accept bodies of 100kB or less",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTooLarge",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You provided more data than we can handle. Unleash accepts at most X MB.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/edge/metrics": {
      "post": {
        "tags": [
          "Edge"
        ],
        "summary": "Send metrics from Edge",
        "description": "This operation accepts batched metrics from Edge. Metrics will be inserted into Unleash's metrics storage",
        "operationId": "bulkMetrics",
        "requestBody": {
          "description": "bulkMetricsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bulkMetricsSchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent [].",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "The request body is larger than what we accept. By default we only accept bodies of 100kB or less",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTooLarge",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "You provided more data than we can handle. Unleash accepts at most X MB.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008",
                      "description": "The ID of the error instance"
                    },
                    "name": {
                      "type": "string",
                      "example": "ContentTypeerror",
                      "description": "The name of the error kind"
                    },
                    "message": {
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format.",
                      "description": "A description of what went wrong."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
