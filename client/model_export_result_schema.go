/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.4.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ExportResultSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportResultSchema{}

// ExportResultSchema The result of the export operation, providing you with the feature toggle definitions, strategy definitions and the rest of the elements relevant to the features (tags, environments etc.)
type ExportResultSchema struct {
	// All the exported features.
	Features []FeatureSchema `json:"features"`
	// All strategy instances that are used by the exported features in the `features` list.
	FeatureStrategies []FeatureStrategySchema `json:"featureStrategies"`
	// Environment-specific configuration for all the features in the `features` list. Includes data such as whether the feature is enabled in the selected export environment, whether there are any variants assigned, etc.
	FeatureEnvironments []FeatureEnvironmentSchema `json:"featureEnvironments,omitempty"`
	// A list of all the context fields that are in use by any of the strategies in the `featureStrategies` list.
	ContextFields []ContextFieldSchema `json:"contextFields,omitempty"`
	// A list of all the tags that have been applied to any of the features in the `features` list.
	FeatureTags []FeatureTagSchema `json:"featureTags,omitempty"`
	// A list of all the segments that are used by the strategies in the `featureStrategies` list.
	Segments []ExportResultSchemaSegmentsInner `json:"segments,omitempty"`
	// A list of all of the tag types that are used in the `featureTags` list.
	TagTypes []TagTypeSchema `json:"tagTypes"`
}

// NewExportResultSchema instantiates a new ExportResultSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportResultSchema(features []FeatureSchema, featureStrategies []FeatureStrategySchema, tagTypes []TagTypeSchema) *ExportResultSchema {
	this := ExportResultSchema{}
	this.Features = features
	this.FeatureStrategies = featureStrategies
	this.TagTypes = tagTypes
	return &this
}

// NewExportResultSchemaWithDefaults instantiates a new ExportResultSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportResultSchemaWithDefaults() *ExportResultSchema {
	this := ExportResultSchema{}
	return &this
}

// GetFeatures returns the Features field value
func (o *ExportResultSchema) GetFeatures() []FeatureSchema {
	if o == nil {
		var ret []FeatureSchema
		return ret
	}

	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value
// and a boolean to check if the value has been set.
func (o *ExportResultSchema) GetFeaturesOk() ([]FeatureSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Features, true
}

// SetFeatures sets field value
func (o *ExportResultSchema) SetFeatures(v []FeatureSchema) {
	o.Features = v
}

// GetFeatureStrategies returns the FeatureStrategies field value
func (o *ExportResultSchema) GetFeatureStrategies() []FeatureStrategySchema {
	if o == nil {
		var ret []FeatureStrategySchema
		return ret
	}

	return o.FeatureStrategies
}

// GetFeatureStrategiesOk returns a tuple with the FeatureStrategies field value
// and a boolean to check if the value has been set.
func (o *ExportResultSchema) GetFeatureStrategiesOk() ([]FeatureStrategySchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.FeatureStrategies, true
}

// SetFeatureStrategies sets field value
func (o *ExportResultSchema) SetFeatureStrategies(v []FeatureStrategySchema) {
	o.FeatureStrategies = v
}

// GetFeatureEnvironments returns the FeatureEnvironments field value if set, zero value otherwise.
func (o *ExportResultSchema) GetFeatureEnvironments() []FeatureEnvironmentSchema {
	if o == nil || IsNil(o.FeatureEnvironments) {
		var ret []FeatureEnvironmentSchema
		return ret
	}
	return o.FeatureEnvironments
}

// GetFeatureEnvironmentsOk returns a tuple with the FeatureEnvironments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportResultSchema) GetFeatureEnvironmentsOk() ([]FeatureEnvironmentSchema, bool) {
	if o == nil || IsNil(o.FeatureEnvironments) {
		return nil, false
	}
	return o.FeatureEnvironments, true
}

// HasFeatureEnvironments returns a boolean if a field has been set.
func (o *ExportResultSchema) HasFeatureEnvironments() bool {
	if o != nil && !IsNil(o.FeatureEnvironments) {
		return true
	}

	return false
}

// SetFeatureEnvironments gets a reference to the given []FeatureEnvironmentSchema and assigns it to the FeatureEnvironments field.
func (o *ExportResultSchema) SetFeatureEnvironments(v []FeatureEnvironmentSchema) {
	o.FeatureEnvironments = v
}

// GetContextFields returns the ContextFields field value if set, zero value otherwise.
func (o *ExportResultSchema) GetContextFields() []ContextFieldSchema {
	if o == nil || IsNil(o.ContextFields) {
		var ret []ContextFieldSchema
		return ret
	}
	return o.ContextFields
}

// GetContextFieldsOk returns a tuple with the ContextFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportResultSchema) GetContextFieldsOk() ([]ContextFieldSchema, bool) {
	if o == nil || IsNil(o.ContextFields) {
		return nil, false
	}
	return o.ContextFields, true
}

// HasContextFields returns a boolean if a field has been set.
func (o *ExportResultSchema) HasContextFields() bool {
	if o != nil && !IsNil(o.ContextFields) {
		return true
	}

	return false
}

// SetContextFields gets a reference to the given []ContextFieldSchema and assigns it to the ContextFields field.
func (o *ExportResultSchema) SetContextFields(v []ContextFieldSchema) {
	o.ContextFields = v
}

// GetFeatureTags returns the FeatureTags field value if set, zero value otherwise.
func (o *ExportResultSchema) GetFeatureTags() []FeatureTagSchema {
	if o == nil || IsNil(o.FeatureTags) {
		var ret []FeatureTagSchema
		return ret
	}
	return o.FeatureTags
}

// GetFeatureTagsOk returns a tuple with the FeatureTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportResultSchema) GetFeatureTagsOk() ([]FeatureTagSchema, bool) {
	if o == nil || IsNil(o.FeatureTags) {
		return nil, false
	}
	return o.FeatureTags, true
}

// HasFeatureTags returns a boolean if a field has been set.
func (o *ExportResultSchema) HasFeatureTags() bool {
	if o != nil && !IsNil(o.FeatureTags) {
		return true
	}

	return false
}

// SetFeatureTags gets a reference to the given []FeatureTagSchema and assigns it to the FeatureTags field.
func (o *ExportResultSchema) SetFeatureTags(v []FeatureTagSchema) {
	o.FeatureTags = v
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *ExportResultSchema) GetSegments() []ExportResultSchemaSegmentsInner {
	if o == nil || IsNil(o.Segments) {
		var ret []ExportResultSchemaSegmentsInner
		return ret
	}
	return o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportResultSchema) GetSegmentsOk() ([]ExportResultSchemaSegmentsInner, bool) {
	if o == nil || IsNil(o.Segments) {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *ExportResultSchema) HasSegments() bool {
	if o != nil && !IsNil(o.Segments) {
		return true
	}

	return false
}

// SetSegments gets a reference to the given []ExportResultSchemaSegmentsInner and assigns it to the Segments field.
func (o *ExportResultSchema) SetSegments(v []ExportResultSchemaSegmentsInner) {
	o.Segments = v
}

// GetTagTypes returns the TagTypes field value
func (o *ExportResultSchema) GetTagTypes() []TagTypeSchema {
	if o == nil {
		var ret []TagTypeSchema
		return ret
	}

	return o.TagTypes
}

// GetTagTypesOk returns a tuple with the TagTypes field value
// and a boolean to check if the value has been set.
func (o *ExportResultSchema) GetTagTypesOk() ([]TagTypeSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.TagTypes, true
}

// SetTagTypes sets field value
func (o *ExportResultSchema) SetTagTypes(v []TagTypeSchema) {
	o.TagTypes = v
}

func (o ExportResultSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportResultSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["features"] = o.Features
	toSerialize["featureStrategies"] = o.FeatureStrategies
	if !IsNil(o.FeatureEnvironments) {
		toSerialize["featureEnvironments"] = o.FeatureEnvironments
	}
	if !IsNil(o.ContextFields) {
		toSerialize["contextFields"] = o.ContextFields
	}
	if !IsNil(o.FeatureTags) {
		toSerialize["featureTags"] = o.FeatureTags
	}
	if !IsNil(o.Segments) {
		toSerialize["segments"] = o.Segments
	}
	toSerialize["tagTypes"] = o.TagTypes
	return toSerialize, nil
}

type NullableExportResultSchema struct {
	value *ExportResultSchema
	isSet bool
}

func (v NullableExportResultSchema) Get() *ExportResultSchema {
	return v.value
}

func (v *NullableExportResultSchema) Set(val *ExportResultSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableExportResultSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableExportResultSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportResultSchema(val *ExportResultSchema) *NullableExportResultSchema {
	return &NullableExportResultSchema{value: val, isSet: true}
}

func (v NullableExportResultSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportResultSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
