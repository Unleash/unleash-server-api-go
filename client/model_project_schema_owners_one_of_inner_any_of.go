/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the ProjectSchemaOwnersOneOfInnerAnyOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectSchemaOwnersOneOfInnerAnyOf{}

// ProjectSchemaOwnersOneOfInnerAnyOf struct for ProjectSchemaOwnersOneOfInnerAnyOf
type ProjectSchemaOwnersOneOfInnerAnyOf struct {
	OwnerType            string         `json:"ownerType"`
	Name                 string         `json:"name"`
	ImageUrl             NullableString `json:"imageUrl,omitempty"`
	Email                NullableString `json:"email,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProjectSchemaOwnersOneOfInnerAnyOf ProjectSchemaOwnersOneOfInnerAnyOf

// NewProjectSchemaOwnersOneOfInnerAnyOf instantiates a new ProjectSchemaOwnersOneOfInnerAnyOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectSchemaOwnersOneOfInnerAnyOf(ownerType string, name string) *ProjectSchemaOwnersOneOfInnerAnyOf {
	this := ProjectSchemaOwnersOneOfInnerAnyOf{}
	this.OwnerType = ownerType
	this.Name = name
	return &this
}

// NewProjectSchemaOwnersOneOfInnerAnyOfWithDefaults instantiates a new ProjectSchemaOwnersOneOfInnerAnyOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectSchemaOwnersOneOfInnerAnyOfWithDefaults() *ProjectSchemaOwnersOneOfInnerAnyOf {
	this := ProjectSchemaOwnersOneOfInnerAnyOf{}
	return &this
}

// GetOwnerType returns the OwnerType field value
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) GetOwnerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerType
}

// GetOwnerTypeOk returns a tuple with the OwnerType field value
// and a boolean to check if the value has been set.
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) GetOwnerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerType, true
}

// SetOwnerType sets field value
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) SetOwnerType(v string) {
	o.OwnerType = v
}

// GetName returns the Name field value
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) SetName(v string) {
	o.Name = v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) GetImageUrl() string {
	if o == nil || IsNil(o.ImageUrl.Get()) {
		var ret string
		return ret
	}
	return *o.ImageUrl.Get()
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) GetImageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageUrl.Get(), o.ImageUrl.IsSet()
}

// HasImageUrl returns a boolean if a field has been set.
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) HasImageUrl() bool {
	if o != nil && o.ImageUrl.IsSet() {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given NullableString and assigns it to the ImageUrl field.
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) SetImageUrl(v string) {
	o.ImageUrl.Set(&v)
}

// SetImageUrlNil sets the value for ImageUrl to be an explicit nil
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) SetImageUrlNil() {
	o.ImageUrl.Set(nil)
}

// UnsetImageUrl ensures that no value is present for ImageUrl, not even an explicit nil
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) UnsetImageUrl() {
	o.ImageUrl.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) SetEmail(v string) {
	o.Email.Set(&v)
}

// SetEmailNil sets the value for Email to be an explicit nil
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *ProjectSchemaOwnersOneOfInnerAnyOf) UnsetEmail() {
	o.Email.Unset()
}

func (o ProjectSchemaOwnersOneOfInnerAnyOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectSchemaOwnersOneOfInnerAnyOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ownerType"] = o.OwnerType
	toSerialize["name"] = o.Name
	if o.ImageUrl.IsSet() {
		toSerialize["imageUrl"] = o.ImageUrl.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProjectSchemaOwnersOneOfInnerAnyOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ownerType",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectSchemaOwnersOneOfInnerAnyOf := _ProjectSchemaOwnersOneOfInnerAnyOf{}

	err = json.Unmarshal(data, &varProjectSchemaOwnersOneOfInnerAnyOf)

	if err != nil {
		return err
	}

	*o = ProjectSchemaOwnersOneOfInnerAnyOf(varProjectSchemaOwnersOneOfInnerAnyOf)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ownerType")
		delete(additionalProperties, "name")
		delete(additionalProperties, "imageUrl")
		delete(additionalProperties, "email")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProjectSchemaOwnersOneOfInnerAnyOf struct {
	value *ProjectSchemaOwnersOneOfInnerAnyOf
	isSet bool
}

func (v NullableProjectSchemaOwnersOneOfInnerAnyOf) Get() *ProjectSchemaOwnersOneOfInnerAnyOf {
	return v.value
}

func (v *NullableProjectSchemaOwnersOneOfInnerAnyOf) Set(val *ProjectSchemaOwnersOneOfInnerAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectSchemaOwnersOneOfInnerAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectSchemaOwnersOneOfInnerAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectSchemaOwnersOneOfInnerAnyOf(val *ProjectSchemaOwnersOneOfInnerAnyOf) *NullableProjectSchemaOwnersOneOfInnerAnyOf {
	return &NullableProjectSchemaOwnersOneOfInnerAnyOf{value: val, isSet: true}
}

func (v NullableProjectSchemaOwnersOneOfInnerAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectSchemaOwnersOneOfInnerAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
