/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the CreateInvitedUserSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateInvitedUserSchema{}

// CreateInvitedUserSchema struct for CreateInvitedUserSchema
type CreateInvitedUserSchema struct {
	Username *string `json:"username,omitempty"`
	Email    string  `json:"email"`
	Name     string  `json:"name"`
	Password string  `json:"password"`
}

// NewCreateInvitedUserSchema instantiates a new CreateInvitedUserSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateInvitedUserSchema(email string, name string, password string) *CreateInvitedUserSchema {
	this := CreateInvitedUserSchema{}
	this.Email = email
	this.Name = name
	this.Password = password
	return &this
}

// NewCreateInvitedUserSchemaWithDefaults instantiates a new CreateInvitedUserSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateInvitedUserSchemaWithDefaults() *CreateInvitedUserSchema {
	this := CreateInvitedUserSchema{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *CreateInvitedUserSchema) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInvitedUserSchema) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *CreateInvitedUserSchema) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *CreateInvitedUserSchema) SetUsername(v string) {
	o.Username = &v
}

// GetEmail returns the Email field value
func (o *CreateInvitedUserSchema) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CreateInvitedUserSchema) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CreateInvitedUserSchema) SetEmail(v string) {
	o.Email = v
}

// GetName returns the Name field value
func (o *CreateInvitedUserSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateInvitedUserSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateInvitedUserSchema) SetName(v string) {
	o.Name = v
}

// GetPassword returns the Password field value
func (o *CreateInvitedUserSchema) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CreateInvitedUserSchema) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *CreateInvitedUserSchema) SetPassword(v string) {
	o.Password = v
}

func (o CreateInvitedUserSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateInvitedUserSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	toSerialize["email"] = o.Email
	toSerialize["name"] = o.Name
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

type NullableCreateInvitedUserSchema struct {
	value *CreateInvitedUserSchema
	isSet bool
}

func (v NullableCreateInvitedUserSchema) Get() *CreateInvitedUserSchema {
	return v.value
}

func (v *NullableCreateInvitedUserSchema) Set(val *CreateInvitedUserSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateInvitedUserSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateInvitedUserSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateInvitedUserSchema(val *CreateInvitedUserSchema) *NullableCreateInvitedUserSchema {
	return &NullableCreateInvitedUserSchema{value: val, isSet: true}
}

func (v NullableCreateInvitedUserSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateInvitedUserSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
