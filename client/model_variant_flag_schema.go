/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.4.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the VariantFlagSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariantFlagSchema{}

// VariantFlagSchema A representation of an evaluated Unleash feature variant.
type VariantFlagSchema struct {
	// The name of the variant. Will always be disabled if `enabled` is false.
	Name *string `json:"name,omitempty"`
	// Whether the variant is enabled or not.
	Enabled *bool                     `json:"enabled,omitempty"`
	Payload *VariantFlagSchemaPayload `json:"payload,omitempty"`
}

// NewVariantFlagSchema instantiates a new VariantFlagSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariantFlagSchema() *VariantFlagSchema {
	this := VariantFlagSchema{}
	return &this
}

// NewVariantFlagSchemaWithDefaults instantiates a new VariantFlagSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariantFlagSchemaWithDefaults() *VariantFlagSchema {
	this := VariantFlagSchema{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VariantFlagSchema) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantFlagSchema) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VariantFlagSchema) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VariantFlagSchema) SetName(v string) {
	o.Name = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *VariantFlagSchema) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantFlagSchema) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *VariantFlagSchema) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *VariantFlagSchema) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *VariantFlagSchema) GetPayload() VariantFlagSchemaPayload {
	if o == nil || IsNil(o.Payload) {
		var ret VariantFlagSchemaPayload
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantFlagSchema) GetPayloadOk() (*VariantFlagSchemaPayload, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *VariantFlagSchema) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given VariantFlagSchemaPayload and assigns it to the Payload field.
func (o *VariantFlagSchema) SetPayload(v VariantFlagSchemaPayload) {
	o.Payload = &v
}

func (o VariantFlagSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariantFlagSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	return toSerialize, nil
}

type NullableVariantFlagSchema struct {
	value *VariantFlagSchema
	isSet bool
}

func (v NullableVariantFlagSchema) Get() *VariantFlagSchema {
	return v.value
}

func (v *NullableVariantFlagSchema) Set(val *VariantFlagSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableVariantFlagSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableVariantFlagSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariantFlagSchema(val *VariantFlagSchema) *NullableVariantFlagSchema {
	return &NullableVariantFlagSchema{value: val, isSet: true}
}

func (v NullableVariantFlagSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariantFlagSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
