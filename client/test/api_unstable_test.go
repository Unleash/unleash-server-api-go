/*
Unleash API

Testing UnstableApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	openapiclient "github.com/Unleash/unleash-server-api-go/client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_client_UnstableApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UnstableApiService AddChangeRequestComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var id string

		httpRes, err := apiClient.UnstableApi.AddChangeRequestComment(context.Background(), projectId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService ChangeRequest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var environment string

		resp, httpRes, err := apiClient.UnstableApi.ChangeRequest(context.Background(), projectId, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService DeleteChange", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var changeRequestId string
		var changeId string

		httpRes, err := apiClient.UnstableApi.DeleteChange(context.Background(), projectId, changeRequestId, changeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService DeleteChangeRequest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var id string

		httpRes, err := apiClient.UnstableApi.DeleteChangeRequest(context.Background(), projectId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService EditChange", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var changeRequestId string
		var changeId string

		resp, httpRes, err := apiClient.UnstableApi.EditChange(context.Background(), projectId, changeRequestId, changeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService GetAdvancedPlayground", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UnstableApi.GetAdvancedPlayground(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService GetChangeRequest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var id string

		resp, httpRes, err := apiClient.UnstableApi.GetChangeRequest(context.Background(), projectId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService GetChangeRequestsForProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.UnstableApi.GetChangeRequestsForProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService GetLoginHistory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UnstableApi.GetLoginHistory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService GetNotifications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UnstableApi.GetNotifications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService GetOpenChangeRequestsForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.UnstableApi.GetOpenChangeRequestsForUser(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService GetPendingChangeRequestsForFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.UnstableApi.GetPendingChangeRequestsForFeature(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService GetPendingChangeRequestsForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.UnstableApi.GetPendingChangeRequestsForUser(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService GetProjectChangeRequestConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.UnstableApi.GetProjectChangeRequestConfig(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService MarkNotificationsAsRead", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.UnstableApi.MarkNotificationsAsRead(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService UpdateChangeRequestState", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var id string

		resp, httpRes, err := apiClient.UnstableApi.UpdateChangeRequestState(context.Background(), projectId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService UpdateChangeRequestTitle", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var id string

		httpRes, err := apiClient.UnstableApi.UpdateChangeRequestTitle(context.Background(), projectId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UnstableApiService UpdateProjectChangeRequestConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var environment string

		httpRes, err := apiClient.UnstableApi.UpdateProjectChangeRequestConfig(context.Background(), projectId, environment).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
