/*
Unleash API

Testing StrategiesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/Unleash/unleash-server-api-go/client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_client_StrategiesAPIService(t *testing.T) {

	configuration := client.NewConfiguration()
	apiClient := client.NewAPIClient(configuration)

	t.Run("Test StrategiesAPIService CreateStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StrategiesAPI.CreateStrategy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StrategiesAPIService DeprecateStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var strategyName string

		httpRes, err := apiClient.StrategiesAPI.DeprecateStrategy(context.Background(), strategyName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StrategiesAPIService GetAllStrategies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StrategiesAPI.GetAllStrategies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StrategiesAPIService GetStrategiesByContextField", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contextField string

		resp, httpRes, err := apiClient.StrategiesAPI.GetStrategiesByContextField(context.Background(), contextField).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StrategiesAPIService GetStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		resp, httpRes, err := apiClient.StrategiesAPI.GetStrategy(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StrategiesAPIService ReactivateStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var strategyName string

		httpRes, err := apiClient.StrategiesAPI.ReactivateStrategy(context.Background(), strategyName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StrategiesAPIService RemoveStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		httpRes, err := apiClient.StrategiesAPI.RemoveStrategy(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StrategiesAPIService UpdateFeatureStrategySegments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StrategiesAPI.UpdateFeatureStrategySegments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StrategiesAPIService UpdateStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		httpRes, err := apiClient.StrategiesAPI.UpdateStrategy(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
