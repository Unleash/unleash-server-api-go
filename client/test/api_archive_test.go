/*
Unleash API

Testing ArchiveApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/openapi"
)

func Test_openapi_ArchiveApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ArchiveApiService DeleteFeature", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var featureName string

		httpRes, err := apiClient.ArchiveApi.DeleteFeature(context.Background(), featureName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchiveApiService DeleteFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		httpRes, err := apiClient.ArchiveApi.DeleteFeatures(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchiveApiService GetArchivedFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ArchiveApi.GetArchivedFeatures(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchiveApiService GetArchivedFeaturesByProjectId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ArchiveApi.GetArchivedFeaturesByProjectId(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchiveApiService ReviveFeature", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var featureName string

		httpRes, err := apiClient.ArchiveApi.ReviveFeature(context.Background(), featureName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArchiveApiService ReviveFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		httpRes, err := apiClient.ArchiveApi.ReviveFeatures(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
