/*
Unleash API

Testing FeaturesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	openapiclient "github.com/Unleash/unleash-server-api-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_client_FeaturesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FeaturesApiService AddFavoriteFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		httpRes, err := apiClient.FeaturesApi.AddFavoriteFeature(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService AddFavoriteProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		httpRes, err := apiClient.FeaturesApi.AddFavoriteProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService AddFeatureStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesApi.AddFeatureStrategy(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService AddTag", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var featureName string

		resp, httpRes, err := apiClient.FeaturesApi.AddTag(context.Background(), featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService ArchiveFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		httpRes, err := apiClient.FeaturesApi.ArchiveFeature(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService ArchiveFeatures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		httpRes, err := apiClient.FeaturesApi.ArchiveFeatures(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService BulkToggleFeaturesEnvironmentOff", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var environment string

		httpRes, err := apiClient.FeaturesApi.BulkToggleFeaturesEnvironmentOff(context.Background(), projectId, environment).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService BulkToggleFeaturesEnvironmentOn", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var environment string

		httpRes, err := apiClient.FeaturesApi.BulkToggleFeaturesEnvironmentOn(context.Background(), projectId, environment).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService ChangeProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		httpRes, err := apiClient.FeaturesApi.ChangeProject(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService CloneFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesApi.CloneFeature(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService CreateFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.FeaturesApi.CreateFeature(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService DeleteFeatureStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string
		var strategyId string

		httpRes, err := apiClient.FeaturesApi.DeleteFeatureStrategy(context.Background(), projectId, featureName, environment, strategyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService GetAllFeatureTypes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FeaturesApi.GetAllFeatureTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService GetAllToggles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FeaturesApi.GetAllToggles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService GetEnvironmentFeatureVariants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesApi.GetEnvironmentFeatureVariants(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService GetFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesApi.GetFeature(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService GetFeatureEnvironment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesApi.GetFeatureEnvironment(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService GetFeatureStrategies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesApi.GetFeatureStrategies(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService GetFeatureStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string
		var strategyId string

		resp, httpRes, err := apiClient.FeaturesApi.GetFeatureStrategy(context.Background(), projectId, featureName, environment, strategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService GetFeatureVariants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesApi.GetFeatureVariants(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService GetFeatures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.FeaturesApi.GetFeatures(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService ListTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var featureName string

		resp, httpRes, err := apiClient.FeaturesApi.ListTags(context.Background(), featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService OverwriteEnvironmentFeatureVariants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesApi.OverwriteEnvironmentFeatureVariants(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService OverwriteFeatureVariants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesApi.OverwriteFeatureVariants(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService OverwriteFeatureVariantsOnEnvironments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesApi.OverwriteFeatureVariantsOnEnvironments(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService PatchEnvironmentsFeatureVariants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesApi.PatchEnvironmentsFeatureVariants(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService PatchFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesApi.PatchFeature(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService PatchFeatureStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string
		var strategyId string

		resp, httpRes, err := apiClient.FeaturesApi.PatchFeatureStrategy(context.Background(), projectId, featureName, environment, strategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService PatchFeatureVariants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesApi.PatchFeatureVariants(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService RemoveFavoriteFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		httpRes, err := apiClient.FeaturesApi.RemoveFavoriteFeature(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService RemoveFavoriteProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		httpRes, err := apiClient.FeaturesApi.RemoveFavoriteProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService RemoveTag", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var featureName string
		var type_ string
		var value string

		httpRes, err := apiClient.FeaturesApi.RemoveTag(context.Background(), featureName, type_, value).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService SetStrategySortOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		httpRes, err := apiClient.FeaturesApi.SetStrategySortOrder(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService StaleFeatures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		httpRes, err := apiClient.FeaturesApi.StaleFeatures(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService ToggleFeatureEnvironmentOff", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesApi.ToggleFeatureEnvironmentOff(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService ToggleFeatureEnvironmentOn", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesApi.ToggleFeatureEnvironmentOn(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService UpdateFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesApi.UpdateFeature(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService UpdateFeatureStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string
		var strategyId string

		resp, httpRes, err := apiClient.FeaturesApi.UpdateFeatureStrategy(context.Background(), projectId, featureName, environment, strategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService UpdateTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var featureName string

		resp, httpRes, err := apiClient.FeaturesApi.UpdateTags(context.Background(), featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService ValidateConstraint", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.FeaturesApi.ValidateConstraint(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesApiService ValidateFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.FeaturesApi.ValidateFeature(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
