/*
Unleash API

Testing FeaturesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/Unleash/unleash-server-api-go/client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_client_FeaturesAPIService(t *testing.T) {

	configuration := client.NewConfiguration()
	apiClient := client.NewAPIClient(configuration)

	t.Run("Test FeaturesAPIService AddFavoriteFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		httpRes, err := apiClient.FeaturesAPI.AddFavoriteFeature(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService AddFavoriteProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		httpRes, err := apiClient.FeaturesAPI.AddFavoriteProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService AddFeatureStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesAPI.AddFeatureStrategy(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService AddTag", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var featureName string

		resp, httpRes, err := apiClient.FeaturesAPI.AddTag(context.Background(), featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService ArchiveFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		httpRes, err := apiClient.FeaturesAPI.ArchiveFeature(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService ArchiveFeatures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		httpRes, err := apiClient.FeaturesAPI.ArchiveFeatures(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService BulkToggleFeaturesEnvironmentOff", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var environment string

		httpRes, err := apiClient.FeaturesAPI.BulkToggleFeaturesEnvironmentOff(context.Background(), projectId, environment).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService BulkToggleFeaturesEnvironmentOn", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var environment string

		httpRes, err := apiClient.FeaturesAPI.BulkToggleFeaturesEnvironmentOn(context.Background(), projectId, environment).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService ChangeProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		httpRes, err := apiClient.FeaturesAPI.ChangeProject(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService CloneFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesAPI.CloneFeature(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService CreateFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.FeaturesAPI.CreateFeature(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService DeleteFeatureStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string
		var strategyId string

		httpRes, err := apiClient.FeaturesAPI.DeleteFeatureStrategy(context.Background(), projectId, featureName, environment, strategyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService GetAllToggles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FeaturesAPI.GetAllToggles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService GetEnvironmentFeatureVariants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesAPI.GetEnvironmentFeatureVariants(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService GetFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesAPI.GetFeature(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService GetFeatureEnvironment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesAPI.GetFeatureEnvironment(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService GetFeatureStrategies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesAPI.GetFeatureStrategies(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService GetFeatureStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string
		var strategyId string

		resp, httpRes, err := apiClient.FeaturesAPI.GetFeatureStrategy(context.Background(), projectId, featureName, environment, strategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService GetFeatureVariants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesAPI.GetFeatureVariants(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService GetFeatures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.FeaturesAPI.GetFeatures(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService ListTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var featureName string

		resp, httpRes, err := apiClient.FeaturesAPI.ListTags(context.Background(), featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService OverwriteEnvironmentFeatureVariants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesAPI.OverwriteEnvironmentFeatureVariants(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService OverwriteFeatureVariants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesAPI.OverwriteFeatureVariants(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService OverwriteFeatureVariantsOnEnvironments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesAPI.OverwriteFeatureVariantsOnEnvironments(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService PatchEnvironmentsFeatureVariants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesAPI.PatchEnvironmentsFeatureVariants(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService PatchFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesAPI.PatchFeature(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService PatchFeatureStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string
		var strategyId string

		resp, httpRes, err := apiClient.FeaturesAPI.PatchFeatureStrategy(context.Background(), projectId, featureName, environment, strategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService PatchFeatureVariants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesAPI.PatchFeatureVariants(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService RemoveFavoriteFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		httpRes, err := apiClient.FeaturesAPI.RemoveFavoriteFeature(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService RemoveFavoriteProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		httpRes, err := apiClient.FeaturesAPI.RemoveFavoriteProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService RemoveTag", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var featureName string
		var type_ string
		var value string

		httpRes, err := apiClient.FeaturesAPI.RemoveTag(context.Background(), featureName, type_, value).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService SetStrategySortOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		httpRes, err := apiClient.FeaturesAPI.SetStrategySortOrder(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService StaleFeatures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		httpRes, err := apiClient.FeaturesAPI.StaleFeatures(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService ToggleFeatureEnvironmentOff", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesAPI.ToggleFeatureEnvironmentOff(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService ToggleFeatureEnvironmentOn", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string

		resp, httpRes, err := apiClient.FeaturesAPI.ToggleFeatureEnvironmentOn(context.Background(), projectId, featureName, environment).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService UpdateFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string

		resp, httpRes, err := apiClient.FeaturesAPI.UpdateFeature(context.Background(), projectId, featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService UpdateFeatureStrategy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var featureName string
		var environment string
		var strategyId string

		resp, httpRes, err := apiClient.FeaturesAPI.UpdateFeatureStrategy(context.Background(), projectId, featureName, environment, strategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService UpdateTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var featureName string

		resp, httpRes, err := apiClient.FeaturesAPI.UpdateTags(context.Background(), featureName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService ValidateConstraint", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.FeaturesAPI.ValidateConstraint(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FeaturesAPIService ValidateFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.FeaturesAPI.ValidateFeature(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
