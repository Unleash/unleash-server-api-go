/*
Unleash API

Testing AddonsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	openapiclient "github.com/Unleash/unleash-server-api-go/client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_client_AddonsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AddonsApiService CreateAddon", func(t *testing.T) {

		resp, httpRes, err := apiClient.AddonsApi.CreateAddon(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AddonsApiService DeleteAddon", func(t *testing.T) {

		var id string

		httpRes, err := apiClient.AddonsApi.DeleteAddon(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AddonsApiService GetAddon", func(t *testing.T) {

		var id string

		resp, httpRes, err := apiClient.AddonsApi.GetAddon(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AddonsApiService GetAddons", func(t *testing.T) {

		resp, httpRes, err := apiClient.AddonsApi.GetAddons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AddonsApiService UpdateAddon", func(t *testing.T) {

		var id string

		resp, httpRes, err := apiClient.AddonsApi.UpdateAddon(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
