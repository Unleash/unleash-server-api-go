/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PasswordAuthSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordAuthSchema{}

// PasswordAuthSchema Does the server allow username/password authentication
type PasswordAuthSchema struct {
	// Is username/password authentication disabled
	Disabled             *bool `json:"disabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PasswordAuthSchema PasswordAuthSchema

// NewPasswordAuthSchema instantiates a new PasswordAuthSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordAuthSchema() *PasswordAuthSchema {
	this := PasswordAuthSchema{}
	return &this
}

// NewPasswordAuthSchemaWithDefaults instantiates a new PasswordAuthSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordAuthSchemaWithDefaults() *PasswordAuthSchema {
	this := PasswordAuthSchema{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *PasswordAuthSchema) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordAuthSchema) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *PasswordAuthSchema) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *PasswordAuthSchema) SetDisabled(v bool) {
	o.Disabled = &v
}

func (o PasswordAuthSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordAuthSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PasswordAuthSchema) UnmarshalJSON(data []byte) (err error) {
	varPasswordAuthSchema := _PasswordAuthSchema{}

	err = json.Unmarshal(data, &varPasswordAuthSchema)

	if err != nil {
		return err
	}

	*o = PasswordAuthSchema(varPasswordAuthSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePasswordAuthSchema struct {
	value *PasswordAuthSchema
	isSet bool
}

func (v NullablePasswordAuthSchema) Get() *PasswordAuthSchema {
	return v.value
}

func (v *NullablePasswordAuthSchema) Set(val *PasswordAuthSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordAuthSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordAuthSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordAuthSchema(val *PasswordAuthSchema) *NullablePasswordAuthSchema {
	return &NullablePasswordAuthSchema{value: val, isSet: true}
}

func (v NullablePasswordAuthSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordAuthSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
