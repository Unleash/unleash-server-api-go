/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the TagTypeSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagTypeSchema{}

// TagTypeSchema struct for TagTypeSchema
type TagTypeSchema struct {
	Name        string         `json:"name"`
	Description *string        `json:"description,omitempty"`
	Icon        NullableString `json:"icon,omitempty"`
}

// NewTagTypeSchema instantiates a new TagTypeSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagTypeSchema(name string) *TagTypeSchema {
	this := TagTypeSchema{}
	this.Name = name
	return &this
}

// NewTagTypeSchemaWithDefaults instantiates a new TagTypeSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagTypeSchemaWithDefaults() *TagTypeSchema {
	this := TagTypeSchema{}
	return &this
}

// GetName returns the Name field value
func (o *TagTypeSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TagTypeSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TagTypeSchema) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TagTypeSchema) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagTypeSchema) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TagTypeSchema) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TagTypeSchema) SetDescription(v string) {
	o.Description = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagTypeSchema) GetIcon() string {
	if o == nil || IsNil(o.Icon.Get()) {
		var ret string
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagTypeSchema) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *TagTypeSchema) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableString and assigns it to the Icon field.
func (o *TagTypeSchema) SetIcon(v string) {
	o.Icon.Set(&v)
}

// SetIconNil sets the value for Icon to be an explicit nil
func (o *TagTypeSchema) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *TagTypeSchema) UnsetIcon() {
	o.Icon.Unset()
}

func (o TagTypeSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagTypeSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.Icon.IsSet() {
		toSerialize["icon"] = o.Icon.Get()
	}
	return toSerialize, nil
}

type NullableTagTypeSchema struct {
	value *TagTypeSchema
	isSet bool
}

func (v NullableTagTypeSchema) Get() *TagTypeSchema {
	return v.value
}

func (v *NullableTagTypeSchema) Set(val *TagTypeSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableTagTypeSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableTagTypeSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagTypeSchema(val *TagTypeSchema) *NullableTagTypeSchema {
	return &NullableTagTypeSchema{value: val, isSet: true}
}

func (v NullableTagTypeSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagTypeSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
