/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the UpdateFeatureSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateFeatureSchema{}

// UpdateFeatureSchema struct for UpdateFeatureSchema
type UpdateFeatureSchema struct {
	Name           string             `json:"name"`
	Description    *string            `json:"description,omitempty"`
	Type           *string            `json:"type,omitempty"`
	Stale          *bool              `json:"stale,omitempty"`
	Archived       *bool              `json:"archived,omitempty"`
	CreatedAt      *time.Time         `json:"createdAt,omitempty"`
	ImpressionData *bool              `json:"impressionData,omitempty"`
	Constraints    []ConstraintSchema `json:"constraints,omitempty"`
}

// NewUpdateFeatureSchema instantiates a new UpdateFeatureSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFeatureSchema(name string) *UpdateFeatureSchema {
	this := UpdateFeatureSchema{}
	this.Name = name
	return &this
}

// NewUpdateFeatureSchemaWithDefaults instantiates a new UpdateFeatureSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFeatureSchemaWithDefaults() *UpdateFeatureSchema {
	this := UpdateFeatureSchema{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateFeatureSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateFeatureSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateFeatureSchema) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateFeatureSchema) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFeatureSchema) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateFeatureSchema) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateFeatureSchema) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateFeatureSchema) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFeatureSchema) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateFeatureSchema) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateFeatureSchema) SetType(v string) {
	o.Type = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *UpdateFeatureSchema) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFeatureSchema) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *UpdateFeatureSchema) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *UpdateFeatureSchema) SetStale(v bool) {
	o.Stale = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *UpdateFeatureSchema) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFeatureSchema) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *UpdateFeatureSchema) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *UpdateFeatureSchema) SetArchived(v bool) {
	o.Archived = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *UpdateFeatureSchema) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFeatureSchema) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *UpdateFeatureSchema) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *UpdateFeatureSchema) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetImpressionData returns the ImpressionData field value if set, zero value otherwise.
func (o *UpdateFeatureSchema) GetImpressionData() bool {
	if o == nil || IsNil(o.ImpressionData) {
		var ret bool
		return ret
	}
	return *o.ImpressionData
}

// GetImpressionDataOk returns a tuple with the ImpressionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFeatureSchema) GetImpressionDataOk() (*bool, bool) {
	if o == nil || IsNil(o.ImpressionData) {
		return nil, false
	}
	return o.ImpressionData, true
}

// HasImpressionData returns a boolean if a field has been set.
func (o *UpdateFeatureSchema) HasImpressionData() bool {
	if o != nil && !IsNil(o.ImpressionData) {
		return true
	}

	return false
}

// SetImpressionData gets a reference to the given bool and assigns it to the ImpressionData field.
func (o *UpdateFeatureSchema) SetImpressionData(v bool) {
	o.ImpressionData = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *UpdateFeatureSchema) GetConstraints() []ConstraintSchema {
	if o == nil || IsNil(o.Constraints) {
		var ret []ConstraintSchema
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFeatureSchema) GetConstraintsOk() ([]ConstraintSchema, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *UpdateFeatureSchema) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []ConstraintSchema and assigns it to the Constraints field.
func (o *UpdateFeatureSchema) SetConstraints(v []ConstraintSchema) {
	o.Constraints = v
}

func (o UpdateFeatureSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateFeatureSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.ImpressionData) {
		toSerialize["impressionData"] = o.ImpressionData
	}
	if !IsNil(o.Constraints) {
		toSerialize["constraints"] = o.Constraints
	}
	return toSerialize, nil
}

type NullableUpdateFeatureSchema struct {
	value *UpdateFeatureSchema
	isSet bool
}

func (v NullableUpdateFeatureSchema) Get() *UpdateFeatureSchema {
	return v.value
}

func (v *NullableUpdateFeatureSchema) Set(val *UpdateFeatureSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFeatureSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFeatureSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFeatureSchema(val *UpdateFeatureSchema) *NullableUpdateFeatureSchema {
	return &NullableUpdateFeatureSchema{value: val, isSet: true}
}

func (v NullableUpdateFeatureSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFeatureSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
