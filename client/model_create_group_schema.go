/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the CreateGroupSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateGroupSchema{}

// CreateGroupSchema A detailed information about a user group
type CreateGroupSchema struct {
	// The name of the group
	Name string `json:"name"`
	// A custom description of the group
	Description NullableString `json:"description,omitempty"`
	// A list of SSO groups that should map to this Unleash group
	MappingsSSO []string `json:"mappingsSSO,omitempty"`
	// A role id that is used as the root role for all users in this group. This can be either the id of the Viewer, Editor or Admin role.
	RootRole NullableFloat32 `json:"rootRole,omitempty"`
	// A list of users belonging to this group
	Users                []CreateGroupSchemaUsersInner `json:"users,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateGroupSchema CreateGroupSchema

// NewCreateGroupSchema instantiates a new CreateGroupSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGroupSchema(name string) *CreateGroupSchema {
	this := CreateGroupSchema{}
	this.Name = name
	return &this
}

// NewCreateGroupSchemaWithDefaults instantiates a new CreateGroupSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGroupSchemaWithDefaults() *CreateGroupSchema {
	this := CreateGroupSchema{}
	return &this
}

// GetName returns the Name field value
func (o *CreateGroupSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateGroupSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateGroupSchema) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateGroupSchema) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateGroupSchema) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateGroupSchema) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CreateGroupSchema) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CreateGroupSchema) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CreateGroupSchema) UnsetDescription() {
	o.Description.Unset()
}

// GetMappingsSSO returns the MappingsSSO field value if set, zero value otherwise.
func (o *CreateGroupSchema) GetMappingsSSO() []string {
	if o == nil || IsNil(o.MappingsSSO) {
		var ret []string
		return ret
	}
	return o.MappingsSSO
}

// GetMappingsSSOOk returns a tuple with the MappingsSSO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupSchema) GetMappingsSSOOk() ([]string, bool) {
	if o == nil || IsNil(o.MappingsSSO) {
		return nil, false
	}
	return o.MappingsSSO, true
}

// HasMappingsSSO returns a boolean if a field has been set.
func (o *CreateGroupSchema) HasMappingsSSO() bool {
	if o != nil && !IsNil(o.MappingsSSO) {
		return true
	}

	return false
}

// SetMappingsSSO gets a reference to the given []string and assigns it to the MappingsSSO field.
func (o *CreateGroupSchema) SetMappingsSSO(v []string) {
	o.MappingsSSO = v
}

// GetRootRole returns the RootRole field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateGroupSchema) GetRootRole() float32 {
	if o == nil || IsNil(o.RootRole.Get()) {
		var ret float32
		return ret
	}
	return *o.RootRole.Get()
}

// GetRootRoleOk returns a tuple with the RootRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateGroupSchema) GetRootRoleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootRole.Get(), o.RootRole.IsSet()
}

// HasRootRole returns a boolean if a field has been set.
func (o *CreateGroupSchema) HasRootRole() bool {
	if o != nil && o.RootRole.IsSet() {
		return true
	}

	return false
}

// SetRootRole gets a reference to the given NullableFloat32 and assigns it to the RootRole field.
func (o *CreateGroupSchema) SetRootRole(v float32) {
	o.RootRole.Set(&v)
}

// SetRootRoleNil sets the value for RootRole to be an explicit nil
func (o *CreateGroupSchema) SetRootRoleNil() {
	o.RootRole.Set(nil)
}

// UnsetRootRole ensures that no value is present for RootRole, not even an explicit nil
func (o *CreateGroupSchema) UnsetRootRole() {
	o.RootRole.Unset()
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *CreateGroupSchema) GetUsers() []CreateGroupSchemaUsersInner {
	if o == nil || IsNil(o.Users) {
		var ret []CreateGroupSchemaUsersInner
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupSchema) GetUsersOk() ([]CreateGroupSchemaUsersInner, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *CreateGroupSchema) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []CreateGroupSchemaUsersInner and assigns it to the Users field.
func (o *CreateGroupSchema) SetUsers(v []CreateGroupSchemaUsersInner) {
	o.Users = v
}

func (o CreateGroupSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateGroupSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.MappingsSSO) {
		toSerialize["mappingsSSO"] = o.MappingsSSO
	}
	if o.RootRole.IsSet() {
		toSerialize["rootRole"] = o.RootRole.Get()
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateGroupSchema) UnmarshalJSON(bytes []byte) (err error) {
	varCreateGroupSchema := _CreateGroupSchema{}

	if err = json.Unmarshal(bytes, &varCreateGroupSchema); err == nil {
		*o = CreateGroupSchema(varCreateGroupSchema)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "mappingsSSO")
		delete(additionalProperties, "rootRole")
		delete(additionalProperties, "users")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateGroupSchema struct {
	value *CreateGroupSchema
	isSet bool
}

func (v NullableCreateGroupSchema) Get() *CreateGroupSchema {
	return v.value
}

func (v *NullableCreateGroupSchema) Set(val *CreateGroupSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGroupSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGroupSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGroupSchema(val *CreateGroupSchema) *NullableCreateGroupSchema {
	return &NullableCreateGroupSchema{value: val, isSet: true}
}

func (v NullableCreateGroupSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGroupSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
