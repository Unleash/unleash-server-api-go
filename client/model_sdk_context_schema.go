/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the SdkContextSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SdkContextSchema{}

// SdkContextSchema The Unleash context as modeled in client SDKs
type SdkContextSchema struct {
	// The name of the application.
	AppName string `json:"appName"`
	// A DateTime (or similar) data class instance or a string in an RFC3339-compatible format. Defaults to the current time if not set by the user.
	CurrentTime *time.Time `json:"currentTime,omitempty"`
	// The environment the app is running in.
	// Deprecated
	Environment *string `json:"environment,omitempty"`
	Properties *map[string]string `json:"properties,omitempty"`
	// The app's IP address
	RemoteAddress *string `json:"remoteAddress,omitempty"`
	// An identifier for the current session
	SessionId *string `json:"sessionId,omitempty"`
	// An identifier for the current user
	UserId *string `json:"userId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SdkContextSchema SdkContextSchema

// NewSdkContextSchema instantiates a new SdkContextSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSdkContextSchema(appName string) *SdkContextSchema {
	this := SdkContextSchema{}
	this.AppName = appName
	return &this
}

// NewSdkContextSchemaWithDefaults instantiates a new SdkContextSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSdkContextSchemaWithDefaults() *SdkContextSchema {
	this := SdkContextSchema{}
	return &this
}

// GetAppName returns the AppName field value
func (o *SdkContextSchema) GetAppName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value
// and a boolean to check if the value has been set.
func (o *SdkContextSchema) GetAppNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppName, true
}

// SetAppName sets field value
func (o *SdkContextSchema) SetAppName(v string) {
	o.AppName = v
}

// GetCurrentTime returns the CurrentTime field value if set, zero value otherwise.
func (o *SdkContextSchema) GetCurrentTime() time.Time {
	if o == nil || IsNil(o.CurrentTime) {
		var ret time.Time
		return ret
	}
	return *o.CurrentTime
}

// GetCurrentTimeOk returns a tuple with the CurrentTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdkContextSchema) GetCurrentTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CurrentTime) {
		return nil, false
	}
	return o.CurrentTime, true
}

// HasCurrentTime returns a boolean if a field has been set.
func (o *SdkContextSchema) HasCurrentTime() bool {
	if o != nil && !IsNil(o.CurrentTime) {
		return true
	}

	return false
}

// SetCurrentTime gets a reference to the given time.Time and assigns it to the CurrentTime field.
func (o *SdkContextSchema) SetCurrentTime(v time.Time) {
	o.CurrentTime = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
// Deprecated
func (o *SdkContextSchema) GetEnvironment() string {
	if o == nil || IsNil(o.Environment) {
		var ret string
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SdkContextSchema) GetEnvironmentOk() (*string, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *SdkContextSchema) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given string and assigns it to the Environment field.
// Deprecated
func (o *SdkContextSchema) SetEnvironment(v string) {
	o.Environment = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *SdkContextSchema) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdkContextSchema) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *SdkContextSchema) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *SdkContextSchema) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetRemoteAddress returns the RemoteAddress field value if set, zero value otherwise.
func (o *SdkContextSchema) GetRemoteAddress() string {
	if o == nil || IsNil(o.RemoteAddress) {
		var ret string
		return ret
	}
	return *o.RemoteAddress
}

// GetRemoteAddressOk returns a tuple with the RemoteAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdkContextSchema) GetRemoteAddressOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteAddress) {
		return nil, false
	}
	return o.RemoteAddress, true
}

// HasRemoteAddress returns a boolean if a field has been set.
func (o *SdkContextSchema) HasRemoteAddress() bool {
	if o != nil && !IsNil(o.RemoteAddress) {
		return true
	}

	return false
}

// SetRemoteAddress gets a reference to the given string and assigns it to the RemoteAddress field.
func (o *SdkContextSchema) SetRemoteAddress(v string) {
	o.RemoteAddress = &v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *SdkContextSchema) GetSessionId() string {
	if o == nil || IsNil(o.SessionId) {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdkContextSchema) GetSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SessionId) {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *SdkContextSchema) HasSessionId() bool {
	if o != nil && !IsNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *SdkContextSchema) SetSessionId(v string) {
	o.SessionId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *SdkContextSchema) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdkContextSchema) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *SdkContextSchema) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *SdkContextSchema) SetUserId(v string) {
	o.UserId = &v
}

func (o SdkContextSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SdkContextSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appName"] = o.AppName
	if !IsNil(o.CurrentTime) {
		toSerialize["currentTime"] = o.CurrentTime
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.RemoteAddress) {
		toSerialize["remoteAddress"] = o.RemoteAddress
	}
	if !IsNil(o.SessionId) {
		toSerialize["sessionId"] = o.SessionId
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SdkContextSchema) UnmarshalJSON(bytes []byte) (err error) {
	varSdkContextSchema := _SdkContextSchema{}

	if err = json.Unmarshal(bytes, &varSdkContextSchema); err == nil {
		*o = SdkContextSchema(varSdkContextSchema)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "appName")
		delete(additionalProperties, "currentTime")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "properties")
		delete(additionalProperties, "remoteAddress")
		delete(additionalProperties, "sessionId")
		delete(additionalProperties, "userId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSdkContextSchema struct {
	value *SdkContextSchema
	isSet bool
}

func (v NullableSdkContextSchema) Get() *SdkContextSchema {
	return v.value
}

func (v *NullableSdkContextSchema) Set(val *SdkContextSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableSdkContextSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSdkContextSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSdkContextSchema(val *SdkContextSchema) *NullableSdkContextSchema {
	return &NullableSdkContextSchema{value: val, isSet: true}
}

func (v NullableSdkContextSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSdkContextSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


