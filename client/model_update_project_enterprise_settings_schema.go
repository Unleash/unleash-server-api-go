/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the UpdateProjectEnterpriseSettingsSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProjectEnterpriseSettingsSchema{}

// UpdateProjectEnterpriseSettingsSchema Data used to update a [project](https://docs.getunleash.io/reference/projects) settings
type UpdateProjectEnterpriseSettingsSchema struct {
	// A mode of the project affecting what actions are possible in this project
	Mode                 *string                           `json:"mode,omitempty"`
	FeatureNaming        *CreateFeatureNamingPatternSchema `json:"featureNaming,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateProjectEnterpriseSettingsSchema UpdateProjectEnterpriseSettingsSchema

// NewUpdateProjectEnterpriseSettingsSchema instantiates a new UpdateProjectEnterpriseSettingsSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProjectEnterpriseSettingsSchema() *UpdateProjectEnterpriseSettingsSchema {
	this := UpdateProjectEnterpriseSettingsSchema{}
	return &this
}

// NewUpdateProjectEnterpriseSettingsSchemaWithDefaults instantiates a new UpdateProjectEnterpriseSettingsSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProjectEnterpriseSettingsSchemaWithDefaults() *UpdateProjectEnterpriseSettingsSchema {
	this := UpdateProjectEnterpriseSettingsSchema{}
	return &this
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *UpdateProjectEnterpriseSettingsSchema) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProjectEnterpriseSettingsSchema) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *UpdateProjectEnterpriseSettingsSchema) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *UpdateProjectEnterpriseSettingsSchema) SetMode(v string) {
	o.Mode = &v
}

// GetFeatureNaming returns the FeatureNaming field value if set, zero value otherwise.
func (o *UpdateProjectEnterpriseSettingsSchema) GetFeatureNaming() CreateFeatureNamingPatternSchema {
	if o == nil || IsNil(o.FeatureNaming) {
		var ret CreateFeatureNamingPatternSchema
		return ret
	}
	return *o.FeatureNaming
}

// GetFeatureNamingOk returns a tuple with the FeatureNaming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProjectEnterpriseSettingsSchema) GetFeatureNamingOk() (*CreateFeatureNamingPatternSchema, bool) {
	if o == nil || IsNil(o.FeatureNaming) {
		return nil, false
	}
	return o.FeatureNaming, true
}

// HasFeatureNaming returns a boolean if a field has been set.
func (o *UpdateProjectEnterpriseSettingsSchema) HasFeatureNaming() bool {
	if o != nil && !IsNil(o.FeatureNaming) {
		return true
	}

	return false
}

// SetFeatureNaming gets a reference to the given CreateFeatureNamingPatternSchema and assigns it to the FeatureNaming field.
func (o *UpdateProjectEnterpriseSettingsSchema) SetFeatureNaming(v CreateFeatureNamingPatternSchema) {
	o.FeatureNaming = &v
}

func (o UpdateProjectEnterpriseSettingsSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProjectEnterpriseSettingsSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.FeatureNaming) {
		toSerialize["featureNaming"] = o.FeatureNaming
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateProjectEnterpriseSettingsSchema) UnmarshalJSON(data []byte) (err error) {
	varUpdateProjectEnterpriseSettingsSchema := _UpdateProjectEnterpriseSettingsSchema{}

	err = json.Unmarshal(data, &varUpdateProjectEnterpriseSettingsSchema)

	if err != nil {
		return err
	}

	*o = UpdateProjectEnterpriseSettingsSchema(varUpdateProjectEnterpriseSettingsSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mode")
		delete(additionalProperties, "featureNaming")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateProjectEnterpriseSettingsSchema struct {
	value *UpdateProjectEnterpriseSettingsSchema
	isSet bool
}

func (v NullableUpdateProjectEnterpriseSettingsSchema) Get() *UpdateProjectEnterpriseSettingsSchema {
	return v.value
}

func (v *NullableUpdateProjectEnterpriseSettingsSchema) Set(val *UpdateProjectEnterpriseSettingsSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProjectEnterpriseSettingsSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProjectEnterpriseSettingsSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProjectEnterpriseSettingsSchema(val *UpdateProjectEnterpriseSettingsSchema) *NullableUpdateProjectEnterpriseSettingsSchema {
	return &NullableUpdateProjectEnterpriseSettingsSchema{value: val, isSet: true}
}

func (v NullableUpdateProjectEnterpriseSettingsSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProjectEnterpriseSettingsSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
