/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ExportQuerySchema - Available query parameters for  the [deprecated export/import](https://docs.getunleash.io/reference/deploy/import-export) functionality.
type ExportQuerySchema struct {
	ExportQuerySchemaOneOf *ExportQuerySchemaOneOf
	ExportQuerySchemaOneOf1 *ExportQuerySchemaOneOf1
}

// ExportQuerySchemaOneOfAsExportQuerySchema is a convenience function that returns ExportQuerySchemaOneOf wrapped in ExportQuerySchema
func ExportQuerySchemaOneOfAsExportQuerySchema(v *ExportQuerySchemaOneOf) ExportQuerySchema {
	return ExportQuerySchema{
		ExportQuerySchemaOneOf: v,
	}
}

// ExportQuerySchemaOneOf1AsExportQuerySchema is a convenience function that returns ExportQuerySchemaOneOf1 wrapped in ExportQuerySchema
func ExportQuerySchemaOneOf1AsExportQuerySchema(v *ExportQuerySchemaOneOf1) ExportQuerySchema {
	return ExportQuerySchema{
		ExportQuerySchemaOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ExportQuerySchema) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ExportQuerySchemaOneOf
	err = newStrictDecoder(data).Decode(&dst.ExportQuerySchemaOneOf)
	if err == nil {
		jsonExportQuerySchemaOneOf, _ := json.Marshal(dst.ExportQuerySchemaOneOf)
		if string(jsonExportQuerySchemaOneOf) == "{}" { // empty struct
			dst.ExportQuerySchemaOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ExportQuerySchemaOneOf = nil
	}

	// try to unmarshal data into ExportQuerySchemaOneOf1
	err = newStrictDecoder(data).Decode(&dst.ExportQuerySchemaOneOf1)
	if err == nil {
		jsonExportQuerySchemaOneOf1, _ := json.Marshal(dst.ExportQuerySchemaOneOf1)
		if string(jsonExportQuerySchemaOneOf1) == "{}" { // empty struct
			dst.ExportQuerySchemaOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.ExportQuerySchemaOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ExportQuerySchemaOneOf = nil
		dst.ExportQuerySchemaOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ExportQuerySchema)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ExportQuerySchema)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ExportQuerySchema) MarshalJSON() ([]byte, error) {
	if src.ExportQuerySchemaOneOf != nil {
		return json.Marshal(&src.ExportQuerySchemaOneOf)
	}

	if src.ExportQuerySchemaOneOf1 != nil {
		return json.Marshal(&src.ExportQuerySchemaOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ExportQuerySchema) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ExportQuerySchemaOneOf != nil {
		return obj.ExportQuerySchemaOneOf
	}

	if obj.ExportQuerySchemaOneOf1 != nil {
		return obj.ExportQuerySchemaOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableExportQuerySchema struct {
	value *ExportQuerySchema
	isSet bool
}

func (v NullableExportQuerySchema) Get() *ExportQuerySchema {
	return v.value
}

func (v *NullableExportQuerySchema) Set(val *ExportQuerySchema) {
	v.value = val
	v.isSet = true
}

func (v NullableExportQuerySchema) IsSet() bool {
	return v.isSet
}

func (v *NullableExportQuerySchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportQuerySchema(val *ExportQuerySchema) *NullableExportQuerySchema {
	return &NullableExportQuerySchema{value: val, isSet: true}
}

func (v NullableExportQuerySchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportQuerySchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


