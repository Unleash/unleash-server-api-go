/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the ProjectSchemaOwnersOneOfInnerAnyOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectSchemaOwnersOneOfInnerAnyOf1{}

// ProjectSchemaOwnersOneOfInnerAnyOf1 struct for ProjectSchemaOwnersOneOfInnerAnyOf1
type ProjectSchemaOwnersOneOfInnerAnyOf1 struct {
	OwnerType            string `json:"ownerType"`
	Name                 string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _ProjectSchemaOwnersOneOfInnerAnyOf1 ProjectSchemaOwnersOneOfInnerAnyOf1

// NewProjectSchemaOwnersOneOfInnerAnyOf1 instantiates a new ProjectSchemaOwnersOneOfInnerAnyOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectSchemaOwnersOneOfInnerAnyOf1(ownerType string, name string) *ProjectSchemaOwnersOneOfInnerAnyOf1 {
	this := ProjectSchemaOwnersOneOfInnerAnyOf1{}
	this.OwnerType = ownerType
	this.Name = name
	return &this
}

// NewProjectSchemaOwnersOneOfInnerAnyOf1WithDefaults instantiates a new ProjectSchemaOwnersOneOfInnerAnyOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectSchemaOwnersOneOfInnerAnyOf1WithDefaults() *ProjectSchemaOwnersOneOfInnerAnyOf1 {
	this := ProjectSchemaOwnersOneOfInnerAnyOf1{}
	return &this
}

// GetOwnerType returns the OwnerType field value
func (o *ProjectSchemaOwnersOneOfInnerAnyOf1) GetOwnerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerType
}

// GetOwnerTypeOk returns a tuple with the OwnerType field value
// and a boolean to check if the value has been set.
func (o *ProjectSchemaOwnersOneOfInnerAnyOf1) GetOwnerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerType, true
}

// SetOwnerType sets field value
func (o *ProjectSchemaOwnersOneOfInnerAnyOf1) SetOwnerType(v string) {
	o.OwnerType = v
}

// GetName returns the Name field value
func (o *ProjectSchemaOwnersOneOfInnerAnyOf1) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectSchemaOwnersOneOfInnerAnyOf1) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectSchemaOwnersOneOfInnerAnyOf1) SetName(v string) {
	o.Name = v
}

func (o ProjectSchemaOwnersOneOfInnerAnyOf1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectSchemaOwnersOneOfInnerAnyOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ownerType"] = o.OwnerType
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProjectSchemaOwnersOneOfInnerAnyOf1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ownerType",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectSchemaOwnersOneOfInnerAnyOf1 := _ProjectSchemaOwnersOneOfInnerAnyOf1{}

	err = json.Unmarshal(data, &varProjectSchemaOwnersOneOfInnerAnyOf1)

	if err != nil {
		return err
	}

	*o = ProjectSchemaOwnersOneOfInnerAnyOf1(varProjectSchemaOwnersOneOfInnerAnyOf1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ownerType")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProjectSchemaOwnersOneOfInnerAnyOf1 struct {
	value *ProjectSchemaOwnersOneOfInnerAnyOf1
	isSet bool
}

func (v NullableProjectSchemaOwnersOneOfInnerAnyOf1) Get() *ProjectSchemaOwnersOneOfInnerAnyOf1 {
	return v.value
}

func (v *NullableProjectSchemaOwnersOneOfInnerAnyOf1) Set(val *ProjectSchemaOwnersOneOfInnerAnyOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectSchemaOwnersOneOfInnerAnyOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectSchemaOwnersOneOfInnerAnyOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectSchemaOwnersOneOfInnerAnyOf1(val *ProjectSchemaOwnersOneOfInnerAnyOf1) *NullableProjectSchemaOwnersOneOfInnerAnyOf1 {
	return &NullableProjectSchemaOwnersOneOfInnerAnyOf1{value: val, isSet: true}
}

func (v NullableProjectSchemaOwnersOneOfInnerAnyOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectSchemaOwnersOneOfInnerAnyOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
