/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the SplashResponseSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SplashResponseSchema{}

// SplashResponseSchema Data related to a user having seen a splash screen.
type SplashResponseSchema struct {
	// The ID of the user that was shown the splash screen.
	UserId int32 `json:"userId"`
	// The ID of the splash screen that was shown.
	SplashId string `json:"splashId"`
	// Indicates whether the user has seen the splash screen or not.
	Seen bool `json:"seen"`
}

// NewSplashResponseSchema instantiates a new SplashResponseSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSplashResponseSchema(userId int32, splashId string, seen bool) *SplashResponseSchema {
	this := SplashResponseSchema{}
	this.UserId = userId
	this.SplashId = splashId
	this.Seen = seen
	return &this
}

// NewSplashResponseSchemaWithDefaults instantiates a new SplashResponseSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSplashResponseSchemaWithDefaults() *SplashResponseSchema {
	this := SplashResponseSchema{}
	return &this
}

// GetUserId returns the UserId field value
func (o *SplashResponseSchema) GetUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *SplashResponseSchema) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *SplashResponseSchema) SetUserId(v int32) {
	o.UserId = v
}

// GetSplashId returns the SplashId field value
func (o *SplashResponseSchema) GetSplashId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SplashId
}

// GetSplashIdOk returns a tuple with the SplashId field value
// and a boolean to check if the value has been set.
func (o *SplashResponseSchema) GetSplashIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SplashId, true
}

// SetSplashId sets field value
func (o *SplashResponseSchema) SetSplashId(v string) {
	o.SplashId = v
}

// GetSeen returns the Seen field value
func (o *SplashResponseSchema) GetSeen() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Seen
}

// GetSeenOk returns a tuple with the Seen field value
// and a boolean to check if the value has been set.
func (o *SplashResponseSchema) GetSeenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seen, true
}

// SetSeen sets field value
func (o *SplashResponseSchema) SetSeen(v bool) {
	o.Seen = v
}

func (o SplashResponseSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SplashResponseSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	toSerialize["splashId"] = o.SplashId
	toSerialize["seen"] = o.Seen
	return toSerialize, nil
}

type NullableSplashResponseSchema struct {
	value *SplashResponseSchema
	isSet bool
}

func (v NullableSplashResponseSchema) Get() *SplashResponseSchema {
	return v.value
}

func (v *NullableSplashResponseSchema) Set(val *SplashResponseSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableSplashResponseSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSplashResponseSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSplashResponseSchema(val *SplashResponseSchema) *NullableSplashResponseSchema {
	return &NullableSplashResponseSchema{value: val, isSet: true}
}

func (v NullableSplashResponseSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSplashResponseSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
