/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the UpsertContextFieldSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpsertContextFieldSchema{}

// UpsertContextFieldSchema struct for UpsertContextFieldSchema
type UpsertContextFieldSchema struct {
	Name        string             `json:"name"`
	Description *string            `json:"description,omitempty"`
	Stickiness  *bool              `json:"stickiness,omitempty"`
	SortOrder   *float32           `json:"sortOrder,omitempty"`
	LegalValues []LegalValueSchema `json:"legalValues,omitempty"`
}

// NewUpsertContextFieldSchema instantiates a new UpsertContextFieldSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpsertContextFieldSchema(name string) *UpsertContextFieldSchema {
	this := UpsertContextFieldSchema{}
	this.Name = name
	return &this
}

// NewUpsertContextFieldSchemaWithDefaults instantiates a new UpsertContextFieldSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpsertContextFieldSchemaWithDefaults() *UpsertContextFieldSchema {
	this := UpsertContextFieldSchema{}
	return &this
}

// GetName returns the Name field value
func (o *UpsertContextFieldSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpsertContextFieldSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpsertContextFieldSchema) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpsertContextFieldSchema) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertContextFieldSchema) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpsertContextFieldSchema) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpsertContextFieldSchema) SetDescription(v string) {
	o.Description = &v
}

// GetStickiness returns the Stickiness field value if set, zero value otherwise.
func (o *UpsertContextFieldSchema) GetStickiness() bool {
	if o == nil || IsNil(o.Stickiness) {
		var ret bool
		return ret
	}
	return *o.Stickiness
}

// GetStickinessOk returns a tuple with the Stickiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertContextFieldSchema) GetStickinessOk() (*bool, bool) {
	if o == nil || IsNil(o.Stickiness) {
		return nil, false
	}
	return o.Stickiness, true
}

// HasStickiness returns a boolean if a field has been set.
func (o *UpsertContextFieldSchema) HasStickiness() bool {
	if o != nil && !IsNil(o.Stickiness) {
		return true
	}

	return false
}

// SetStickiness gets a reference to the given bool and assigns it to the Stickiness field.
func (o *UpsertContextFieldSchema) SetStickiness(v bool) {
	o.Stickiness = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *UpsertContextFieldSchema) GetSortOrder() float32 {
	if o == nil || IsNil(o.SortOrder) {
		var ret float32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertContextFieldSchema) GetSortOrderOk() (*float32, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *UpsertContextFieldSchema) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given float32 and assigns it to the SortOrder field.
func (o *UpsertContextFieldSchema) SetSortOrder(v float32) {
	o.SortOrder = &v
}

// GetLegalValues returns the LegalValues field value if set, zero value otherwise.
func (o *UpsertContextFieldSchema) GetLegalValues() []LegalValueSchema {
	if o == nil || IsNil(o.LegalValues) {
		var ret []LegalValueSchema
		return ret
	}
	return o.LegalValues
}

// GetLegalValuesOk returns a tuple with the LegalValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertContextFieldSchema) GetLegalValuesOk() ([]LegalValueSchema, bool) {
	if o == nil || IsNil(o.LegalValues) {
		return nil, false
	}
	return o.LegalValues, true
}

// HasLegalValues returns a boolean if a field has been set.
func (o *UpsertContextFieldSchema) HasLegalValues() bool {
	if o != nil && !IsNil(o.LegalValues) {
		return true
	}

	return false
}

// SetLegalValues gets a reference to the given []LegalValueSchema and assigns it to the LegalValues field.
func (o *UpsertContextFieldSchema) SetLegalValues(v []LegalValueSchema) {
	o.LegalValues = v
}

func (o UpsertContextFieldSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpsertContextFieldSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Stickiness) {
		toSerialize["stickiness"] = o.Stickiness
	}
	if !IsNil(o.SortOrder) {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if !IsNil(o.LegalValues) {
		toSerialize["legalValues"] = o.LegalValues
	}
	return toSerialize, nil
}

type NullableUpsertContextFieldSchema struct {
	value *UpsertContextFieldSchema
	isSet bool
}

func (v NullableUpsertContextFieldSchema) Get() *UpsertContextFieldSchema {
	return v.value
}

func (v *NullableUpsertContextFieldSchema) Set(val *UpsertContextFieldSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsertContextFieldSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsertContextFieldSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsertContextFieldSchema(val *UpsertContextFieldSchema) *NullableUpsertContextFieldSchema {
	return &NullableUpsertContextFieldSchema{value: val, isSet: true}
}

func (v NullableUpsertContextFieldSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsertContextFieldSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
