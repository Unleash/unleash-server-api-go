/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FeatureUsageSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureUsageSchema{}

// FeatureUsageSchema How many applications have seen this feature toggle, as well as how this feature was evaluated the last hour
type FeatureUsageSchema struct {
	// The version of this schema
	Version int32 `json:"version"`
	// The maturity level of this API (alpha, beta, stable, deprecated)
	Maturity string `json:"maturity"`
	// The name of the feature
	FeatureName string `json:"featureName"`
	// Last hour statistics. Accumulated per feature per environment. Contains counts for evaluations to true (yes) and to false (no)
	LastHourUsage []FeatureEnvironmentMetricsSchema `json:"lastHourUsage"`
	// A list of applications seen using this feature
	SeenApplications []string `json:"seenApplications"`
}

// NewFeatureUsageSchema instantiates a new FeatureUsageSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureUsageSchema(version int32, maturity string, featureName string, lastHourUsage []FeatureEnvironmentMetricsSchema, seenApplications []string) *FeatureUsageSchema {
	this := FeatureUsageSchema{}
	this.Version = version
	this.Maturity = maturity
	this.FeatureName = featureName
	this.LastHourUsage = lastHourUsage
	this.SeenApplications = seenApplications
	return &this
}

// NewFeatureUsageSchemaWithDefaults instantiates a new FeatureUsageSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureUsageSchemaWithDefaults() *FeatureUsageSchema {
	this := FeatureUsageSchema{}
	return &this
}

// GetVersion returns the Version field value
func (o *FeatureUsageSchema) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *FeatureUsageSchema) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *FeatureUsageSchema) SetVersion(v int32) {
	o.Version = v
}

// GetMaturity returns the Maturity field value
func (o *FeatureUsageSchema) GetMaturity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Maturity
}

// GetMaturityOk returns a tuple with the Maturity field value
// and a boolean to check if the value has been set.
func (o *FeatureUsageSchema) GetMaturityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Maturity, true
}

// SetMaturity sets field value
func (o *FeatureUsageSchema) SetMaturity(v string) {
	o.Maturity = v
}

// GetFeatureName returns the FeatureName field value
func (o *FeatureUsageSchema) GetFeatureName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeatureName
}

// GetFeatureNameOk returns a tuple with the FeatureName field value
// and a boolean to check if the value has been set.
func (o *FeatureUsageSchema) GetFeatureNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeatureName, true
}

// SetFeatureName sets field value
func (o *FeatureUsageSchema) SetFeatureName(v string) {
	o.FeatureName = v
}

// GetLastHourUsage returns the LastHourUsage field value
func (o *FeatureUsageSchema) GetLastHourUsage() []FeatureEnvironmentMetricsSchema {
	if o == nil {
		var ret []FeatureEnvironmentMetricsSchema
		return ret
	}

	return o.LastHourUsage
}

// GetLastHourUsageOk returns a tuple with the LastHourUsage field value
// and a boolean to check if the value has been set.
func (o *FeatureUsageSchema) GetLastHourUsageOk() ([]FeatureEnvironmentMetricsSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastHourUsage, true
}

// SetLastHourUsage sets field value
func (o *FeatureUsageSchema) SetLastHourUsage(v []FeatureEnvironmentMetricsSchema) {
	o.LastHourUsage = v
}

// GetSeenApplications returns the SeenApplications field value
func (o *FeatureUsageSchema) GetSeenApplications() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SeenApplications
}

// GetSeenApplicationsOk returns a tuple with the SeenApplications field value
// and a boolean to check if the value has been set.
func (o *FeatureUsageSchema) GetSeenApplicationsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeenApplications, true
}

// SetSeenApplications sets field value
func (o *FeatureUsageSchema) SetSeenApplications(v []string) {
	o.SeenApplications = v
}

func (o FeatureUsageSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureUsageSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["maturity"] = o.Maturity
	toSerialize["featureName"] = o.FeatureName
	toSerialize["lastHourUsage"] = o.LastHourUsage
	toSerialize["seenApplications"] = o.SeenApplications
	return toSerialize, nil
}

type NullableFeatureUsageSchema struct {
	value *FeatureUsageSchema
	isSet bool
}

func (v NullableFeatureUsageSchema) Get() *FeatureUsageSchema {
	return v.value
}

func (v *NullableFeatureUsageSchema) Set(val *FeatureUsageSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureUsageSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureUsageSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureUsageSchema(val *FeatureUsageSchema) *NullableFeatureUsageSchema {
	return &NullableFeatureUsageSchema{value: val, isSet: true}
}

func (v NullableFeatureUsageSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureUsageSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


