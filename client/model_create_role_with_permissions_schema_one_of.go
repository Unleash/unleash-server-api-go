/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.4.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the CreateRoleWithPermissionsSchemaOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRoleWithPermissionsSchemaOneOf{}

// CreateRoleWithPermissionsSchemaOneOf struct for CreateRoleWithPermissionsSchemaOneOf
type CreateRoleWithPermissionsSchemaOneOf struct {
	// The name of the custom role
	Name string `json:"name"`
	// A more detailed description of the custom role and what use it's intended for
	Description *string `json:"description,omitempty"`
	// [Custom root roles](https://docs.getunleash.io/reference/rbac#custom-root-roles) are root roles with a custom set of permissions.
	Type string `json:"type"`
	// A list of permissions assigned to this role
	Permissions []CreateRoleWithPermissionsSchemaOneOfPermissionsInner `json:"permissions,omitempty"`
}

// NewCreateRoleWithPermissionsSchemaOneOf instantiates a new CreateRoleWithPermissionsSchemaOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRoleWithPermissionsSchemaOneOf(name string, type_ string) *CreateRoleWithPermissionsSchemaOneOf {
	this := CreateRoleWithPermissionsSchemaOneOf{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewCreateRoleWithPermissionsSchemaOneOfWithDefaults instantiates a new CreateRoleWithPermissionsSchemaOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRoleWithPermissionsSchemaOneOfWithDefaults() *CreateRoleWithPermissionsSchemaOneOf {
	this := CreateRoleWithPermissionsSchemaOneOf{}
	return &this
}

// GetName returns the Name field value
func (o *CreateRoleWithPermissionsSchemaOneOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateRoleWithPermissionsSchemaOneOf) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateRoleWithPermissionsSchemaOneOf) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateRoleWithPermissionsSchemaOneOf) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRoleWithPermissionsSchemaOneOf) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateRoleWithPermissionsSchemaOneOf) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateRoleWithPermissionsSchemaOneOf) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value
func (o *CreateRoleWithPermissionsSchemaOneOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateRoleWithPermissionsSchemaOneOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateRoleWithPermissionsSchemaOneOf) SetType(v string) {
	o.Type = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *CreateRoleWithPermissionsSchemaOneOf) GetPermissions() []CreateRoleWithPermissionsSchemaOneOfPermissionsInner {
	if o == nil || IsNil(o.Permissions) {
		var ret []CreateRoleWithPermissionsSchemaOneOfPermissionsInner
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRoleWithPermissionsSchemaOneOf) GetPermissionsOk() ([]CreateRoleWithPermissionsSchemaOneOfPermissionsInner, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *CreateRoleWithPermissionsSchemaOneOf) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []CreateRoleWithPermissionsSchemaOneOfPermissionsInner and assigns it to the Permissions field.
func (o *CreateRoleWithPermissionsSchemaOneOf) SetPermissions(v []CreateRoleWithPermissionsSchemaOneOfPermissionsInner) {
	o.Permissions = v
}

func (o CreateRoleWithPermissionsSchemaOneOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRoleWithPermissionsSchemaOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

type NullableCreateRoleWithPermissionsSchemaOneOf struct {
	value *CreateRoleWithPermissionsSchemaOneOf
	isSet bool
}

func (v NullableCreateRoleWithPermissionsSchemaOneOf) Get() *CreateRoleWithPermissionsSchemaOneOf {
	return v.value
}

func (v *NullableCreateRoleWithPermissionsSchemaOneOf) Set(val *CreateRoleWithPermissionsSchemaOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRoleWithPermissionsSchemaOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRoleWithPermissionsSchemaOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRoleWithPermissionsSchemaOneOf(val *CreateRoleWithPermissionsSchemaOneOf) *NullableCreateRoleWithPermissionsSchemaOneOf {
	return &NullableCreateRoleWithPermissionsSchemaOneOf{value: val, isSet: true}
}

func (v NullableCreateRoleWithPermissionsSchemaOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRoleWithPermissionsSchemaOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
