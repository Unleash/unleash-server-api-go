/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the StateSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StateSchema{}

// StateSchema The state of the application used by export/import APIs which are deprecated in favor of the more fine grained /api/admin/export and /api/admin/import APIs
type StateSchema struct {
	Version                 int32                          `json:"version"`
	Features                []FeatureSchema                `json:"features,omitempty"`
	Strategies              []StrategySchema               `json:"strategies,omitempty"`
	Tags                    []TagSchema                    `json:"tags,omitempty"`
	TagTypes                []TagTypeSchema                `json:"tagTypes,omitempty"`
	FeatureTags             []FeatureTagSchema             `json:"featureTags,omitempty"`
	Projects                []ProjectSchema                `json:"projects,omitempty"`
	FeatureStrategies       []FeatureStrategySchema        `json:"featureStrategies,omitempty"`
	FeatureEnvironments     []FeatureEnvironmentSchema     `json:"featureEnvironments,omitempty"`
	Environments            []EnvironmentSchema            `json:"environments,omitempty"`
	Segments                []SegmentSchema                `json:"segments,omitempty"`
	FeatureStrategySegments []FeatureStrategySegmentSchema `json:"featureStrategySegments,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _StateSchema StateSchema

// NewStateSchema instantiates a new StateSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStateSchema(version int32) *StateSchema {
	this := StateSchema{}
	this.Version = version
	return &this
}

// NewStateSchemaWithDefaults instantiates a new StateSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStateSchemaWithDefaults() *StateSchema {
	this := StateSchema{}
	return &this
}

// GetVersion returns the Version field value
func (o *StateSchema) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *StateSchema) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *StateSchema) SetVersion(v int32) {
	o.Version = v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *StateSchema) GetFeatures() []FeatureSchema {
	if o == nil || IsNil(o.Features) {
		var ret []FeatureSchema
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateSchema) GetFeaturesOk() ([]FeatureSchema, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *StateSchema) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []FeatureSchema and assigns it to the Features field.
func (o *StateSchema) SetFeatures(v []FeatureSchema) {
	o.Features = v
}

// GetStrategies returns the Strategies field value if set, zero value otherwise.
func (o *StateSchema) GetStrategies() []StrategySchema {
	if o == nil || IsNil(o.Strategies) {
		var ret []StrategySchema
		return ret
	}
	return o.Strategies
}

// GetStrategiesOk returns a tuple with the Strategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateSchema) GetStrategiesOk() ([]StrategySchema, bool) {
	if o == nil || IsNil(o.Strategies) {
		return nil, false
	}
	return o.Strategies, true
}

// HasStrategies returns a boolean if a field has been set.
func (o *StateSchema) HasStrategies() bool {
	if o != nil && !IsNil(o.Strategies) {
		return true
	}

	return false
}

// SetStrategies gets a reference to the given []StrategySchema and assigns it to the Strategies field.
func (o *StateSchema) SetStrategies(v []StrategySchema) {
	o.Strategies = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *StateSchema) GetTags() []TagSchema {
	if o == nil || IsNil(o.Tags) {
		var ret []TagSchema
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateSchema) GetTagsOk() ([]TagSchema, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *StateSchema) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagSchema and assigns it to the Tags field.
func (o *StateSchema) SetTags(v []TagSchema) {
	o.Tags = v
}

// GetTagTypes returns the TagTypes field value if set, zero value otherwise.
func (o *StateSchema) GetTagTypes() []TagTypeSchema {
	if o == nil || IsNil(o.TagTypes) {
		var ret []TagTypeSchema
		return ret
	}
	return o.TagTypes
}

// GetTagTypesOk returns a tuple with the TagTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateSchema) GetTagTypesOk() ([]TagTypeSchema, bool) {
	if o == nil || IsNil(o.TagTypes) {
		return nil, false
	}
	return o.TagTypes, true
}

// HasTagTypes returns a boolean if a field has been set.
func (o *StateSchema) HasTagTypes() bool {
	if o != nil && !IsNil(o.TagTypes) {
		return true
	}

	return false
}

// SetTagTypes gets a reference to the given []TagTypeSchema and assigns it to the TagTypes field.
func (o *StateSchema) SetTagTypes(v []TagTypeSchema) {
	o.TagTypes = v
}

// GetFeatureTags returns the FeatureTags field value if set, zero value otherwise.
func (o *StateSchema) GetFeatureTags() []FeatureTagSchema {
	if o == nil || IsNil(o.FeatureTags) {
		var ret []FeatureTagSchema
		return ret
	}
	return o.FeatureTags
}

// GetFeatureTagsOk returns a tuple with the FeatureTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateSchema) GetFeatureTagsOk() ([]FeatureTagSchema, bool) {
	if o == nil || IsNil(o.FeatureTags) {
		return nil, false
	}
	return o.FeatureTags, true
}

// HasFeatureTags returns a boolean if a field has been set.
func (o *StateSchema) HasFeatureTags() bool {
	if o != nil && !IsNil(o.FeatureTags) {
		return true
	}

	return false
}

// SetFeatureTags gets a reference to the given []FeatureTagSchema and assigns it to the FeatureTags field.
func (o *StateSchema) SetFeatureTags(v []FeatureTagSchema) {
	o.FeatureTags = v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *StateSchema) GetProjects() []ProjectSchema {
	if o == nil || IsNil(o.Projects) {
		var ret []ProjectSchema
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateSchema) GetProjectsOk() ([]ProjectSchema, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *StateSchema) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []ProjectSchema and assigns it to the Projects field.
func (o *StateSchema) SetProjects(v []ProjectSchema) {
	o.Projects = v
}

// GetFeatureStrategies returns the FeatureStrategies field value if set, zero value otherwise.
func (o *StateSchema) GetFeatureStrategies() []FeatureStrategySchema {
	if o == nil || IsNil(o.FeatureStrategies) {
		var ret []FeatureStrategySchema
		return ret
	}
	return o.FeatureStrategies
}

// GetFeatureStrategiesOk returns a tuple with the FeatureStrategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateSchema) GetFeatureStrategiesOk() ([]FeatureStrategySchema, bool) {
	if o == nil || IsNil(o.FeatureStrategies) {
		return nil, false
	}
	return o.FeatureStrategies, true
}

// HasFeatureStrategies returns a boolean if a field has been set.
func (o *StateSchema) HasFeatureStrategies() bool {
	if o != nil && !IsNil(o.FeatureStrategies) {
		return true
	}

	return false
}

// SetFeatureStrategies gets a reference to the given []FeatureStrategySchema and assigns it to the FeatureStrategies field.
func (o *StateSchema) SetFeatureStrategies(v []FeatureStrategySchema) {
	o.FeatureStrategies = v
}

// GetFeatureEnvironments returns the FeatureEnvironments field value if set, zero value otherwise.
func (o *StateSchema) GetFeatureEnvironments() []FeatureEnvironmentSchema {
	if o == nil || IsNil(o.FeatureEnvironments) {
		var ret []FeatureEnvironmentSchema
		return ret
	}
	return o.FeatureEnvironments
}

// GetFeatureEnvironmentsOk returns a tuple with the FeatureEnvironments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateSchema) GetFeatureEnvironmentsOk() ([]FeatureEnvironmentSchema, bool) {
	if o == nil || IsNil(o.FeatureEnvironments) {
		return nil, false
	}
	return o.FeatureEnvironments, true
}

// HasFeatureEnvironments returns a boolean if a field has been set.
func (o *StateSchema) HasFeatureEnvironments() bool {
	if o != nil && !IsNil(o.FeatureEnvironments) {
		return true
	}

	return false
}

// SetFeatureEnvironments gets a reference to the given []FeatureEnvironmentSchema and assigns it to the FeatureEnvironments field.
func (o *StateSchema) SetFeatureEnvironments(v []FeatureEnvironmentSchema) {
	o.FeatureEnvironments = v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *StateSchema) GetEnvironments() []EnvironmentSchema {
	if o == nil || IsNil(o.Environments) {
		var ret []EnvironmentSchema
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateSchema) GetEnvironmentsOk() ([]EnvironmentSchema, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *StateSchema) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []EnvironmentSchema and assigns it to the Environments field.
func (o *StateSchema) SetEnvironments(v []EnvironmentSchema) {
	o.Environments = v
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *StateSchema) GetSegments() []SegmentSchema {
	if o == nil || IsNil(o.Segments) {
		var ret []SegmentSchema
		return ret
	}
	return o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateSchema) GetSegmentsOk() ([]SegmentSchema, bool) {
	if o == nil || IsNil(o.Segments) {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *StateSchema) HasSegments() bool {
	if o != nil && !IsNil(o.Segments) {
		return true
	}

	return false
}

// SetSegments gets a reference to the given []SegmentSchema and assigns it to the Segments field.
func (o *StateSchema) SetSegments(v []SegmentSchema) {
	o.Segments = v
}

// GetFeatureStrategySegments returns the FeatureStrategySegments field value if set, zero value otherwise.
func (o *StateSchema) GetFeatureStrategySegments() []FeatureStrategySegmentSchema {
	if o == nil || IsNil(o.FeatureStrategySegments) {
		var ret []FeatureStrategySegmentSchema
		return ret
	}
	return o.FeatureStrategySegments
}

// GetFeatureStrategySegmentsOk returns a tuple with the FeatureStrategySegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateSchema) GetFeatureStrategySegmentsOk() ([]FeatureStrategySegmentSchema, bool) {
	if o == nil || IsNil(o.FeatureStrategySegments) {
		return nil, false
	}
	return o.FeatureStrategySegments, true
}

// HasFeatureStrategySegments returns a boolean if a field has been set.
func (o *StateSchema) HasFeatureStrategySegments() bool {
	if o != nil && !IsNil(o.FeatureStrategySegments) {
		return true
	}

	return false
}

// SetFeatureStrategySegments gets a reference to the given []FeatureStrategySegmentSchema and assigns it to the FeatureStrategySegments field.
func (o *StateSchema) SetFeatureStrategySegments(v []FeatureStrategySegmentSchema) {
	o.FeatureStrategySegments = v
}

func (o StateSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StateSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.Strategies) {
		toSerialize["strategies"] = o.Strategies
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.TagTypes) {
		toSerialize["tagTypes"] = o.TagTypes
	}
	if !IsNil(o.FeatureTags) {
		toSerialize["featureTags"] = o.FeatureTags
	}
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	if !IsNil(o.FeatureStrategies) {
		toSerialize["featureStrategies"] = o.FeatureStrategies
	}
	if !IsNil(o.FeatureEnvironments) {
		toSerialize["featureEnvironments"] = o.FeatureEnvironments
	}
	if !IsNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	if !IsNil(o.Segments) {
		toSerialize["segments"] = o.Segments
	}
	if !IsNil(o.FeatureStrategySegments) {
		toSerialize["featureStrategySegments"] = o.FeatureStrategySegments
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StateSchema) UnmarshalJSON(bytes []byte) (err error) {
	varStateSchema := _StateSchema{}

	if err = json.Unmarshal(bytes, &varStateSchema); err == nil {
		*o = StateSchema(varStateSchema)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "version")
		delete(additionalProperties, "features")
		delete(additionalProperties, "strategies")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "tagTypes")
		delete(additionalProperties, "featureTags")
		delete(additionalProperties, "projects")
		delete(additionalProperties, "featureStrategies")
		delete(additionalProperties, "featureEnvironments")
		delete(additionalProperties, "environments")
		delete(additionalProperties, "segments")
		delete(additionalProperties, "featureStrategySegments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStateSchema struct {
	value *StateSchema
	isSet bool
}

func (v NullableStateSchema) Get() *StateSchema {
	return v.value
}

func (v *NullableStateSchema) Set(val *StateSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableStateSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableStateSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStateSchema(val *StateSchema) *NullableStateSchema {
	return &NullableStateSchema{value: val, isSet: true}
}

func (v NullableStateSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStateSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
