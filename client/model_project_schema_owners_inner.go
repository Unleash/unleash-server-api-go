/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.1.10+main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ProjectSchemaOwnersInner - struct for ProjectSchemaOwnersInner
type ProjectSchemaOwnersInner struct {
	ProjectSchemaOwnersInnerOneOf  *ProjectSchemaOwnersInnerOneOf
	ProjectSchemaOwnersInnerOneOf1 *ProjectSchemaOwnersInnerOneOf1
	ProjectSchemaOwnersInnerOneOf2 *ProjectSchemaOwnersInnerOneOf2
}

// ProjectSchemaOwnersInnerOneOfAsProjectSchemaOwnersInner is a convenience function that returns ProjectSchemaOwnersInnerOneOf wrapped in ProjectSchemaOwnersInner
func ProjectSchemaOwnersInnerOneOfAsProjectSchemaOwnersInner(v *ProjectSchemaOwnersInnerOneOf) ProjectSchemaOwnersInner {
	return ProjectSchemaOwnersInner{
		ProjectSchemaOwnersInnerOneOf: v,
	}
}

// ProjectSchemaOwnersInnerOneOf1AsProjectSchemaOwnersInner is a convenience function that returns ProjectSchemaOwnersInnerOneOf1 wrapped in ProjectSchemaOwnersInner
func ProjectSchemaOwnersInnerOneOf1AsProjectSchemaOwnersInner(v *ProjectSchemaOwnersInnerOneOf1) ProjectSchemaOwnersInner {
	return ProjectSchemaOwnersInner{
		ProjectSchemaOwnersInnerOneOf1: v,
	}
}

// ProjectSchemaOwnersInnerOneOf2AsProjectSchemaOwnersInner is a convenience function that returns ProjectSchemaOwnersInnerOneOf2 wrapped in ProjectSchemaOwnersInner
func ProjectSchemaOwnersInnerOneOf2AsProjectSchemaOwnersInner(v *ProjectSchemaOwnersInnerOneOf2) ProjectSchemaOwnersInner {
	return ProjectSchemaOwnersInner{
		ProjectSchemaOwnersInnerOneOf2: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ProjectSchemaOwnersInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ProjectSchemaOwnersInnerOneOf
	err = newStrictDecoder(data).Decode(&dst.ProjectSchemaOwnersInnerOneOf)
	if err == nil {
		jsonProjectSchemaOwnersInnerOneOf, _ := json.Marshal(dst.ProjectSchemaOwnersInnerOneOf)
		if string(jsonProjectSchemaOwnersInnerOneOf) == "{}" { // empty struct
			dst.ProjectSchemaOwnersInnerOneOf = nil
		} else {
			if err = validator.Validate(dst.ProjectSchemaOwnersInnerOneOf); err != nil {
				dst.ProjectSchemaOwnersInnerOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.ProjectSchemaOwnersInnerOneOf = nil
	}

	// try to unmarshal data into ProjectSchemaOwnersInnerOneOf1
	err = newStrictDecoder(data).Decode(&dst.ProjectSchemaOwnersInnerOneOf1)
	if err == nil {
		jsonProjectSchemaOwnersInnerOneOf1, _ := json.Marshal(dst.ProjectSchemaOwnersInnerOneOf1)
		if string(jsonProjectSchemaOwnersInnerOneOf1) == "{}" { // empty struct
			dst.ProjectSchemaOwnersInnerOneOf1 = nil
		} else {
			if err = validator.Validate(dst.ProjectSchemaOwnersInnerOneOf1); err != nil {
				dst.ProjectSchemaOwnersInnerOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ProjectSchemaOwnersInnerOneOf1 = nil
	}

	// try to unmarshal data into ProjectSchemaOwnersInnerOneOf2
	err = newStrictDecoder(data).Decode(&dst.ProjectSchemaOwnersInnerOneOf2)
	if err == nil {
		jsonProjectSchemaOwnersInnerOneOf2, _ := json.Marshal(dst.ProjectSchemaOwnersInnerOneOf2)
		if string(jsonProjectSchemaOwnersInnerOneOf2) == "{}" { // empty struct
			dst.ProjectSchemaOwnersInnerOneOf2 = nil
		} else {
			if err = validator.Validate(dst.ProjectSchemaOwnersInnerOneOf2); err != nil {
				dst.ProjectSchemaOwnersInnerOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ProjectSchemaOwnersInnerOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ProjectSchemaOwnersInnerOneOf = nil
		dst.ProjectSchemaOwnersInnerOneOf1 = nil
		dst.ProjectSchemaOwnersInnerOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ProjectSchemaOwnersInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ProjectSchemaOwnersInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ProjectSchemaOwnersInner) MarshalJSON() ([]byte, error) {
	if src.ProjectSchemaOwnersInnerOneOf != nil {
		return json.Marshal(&src.ProjectSchemaOwnersInnerOneOf)
	}

	if src.ProjectSchemaOwnersInnerOneOf1 != nil {
		return json.Marshal(&src.ProjectSchemaOwnersInnerOneOf1)
	}

	if src.ProjectSchemaOwnersInnerOneOf2 != nil {
		return json.Marshal(&src.ProjectSchemaOwnersInnerOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ProjectSchemaOwnersInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ProjectSchemaOwnersInnerOneOf != nil {
		return obj.ProjectSchemaOwnersInnerOneOf
	}

	if obj.ProjectSchemaOwnersInnerOneOf1 != nil {
		return obj.ProjectSchemaOwnersInnerOneOf1
	}

	if obj.ProjectSchemaOwnersInnerOneOf2 != nil {
		return obj.ProjectSchemaOwnersInnerOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableProjectSchemaOwnersInner struct {
	value *ProjectSchemaOwnersInner
	isSet bool
}

func (v NullableProjectSchemaOwnersInner) Get() *ProjectSchemaOwnersInner {
	return v.value
}

func (v *NullableProjectSchemaOwnersInner) Set(val *ProjectSchemaOwnersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectSchemaOwnersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectSchemaOwnersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectSchemaOwnersInner(val *ProjectSchemaOwnersInner) *NullableProjectSchemaOwnersInner {
	return &NullableProjectSchemaOwnersInner{value: val, isSet: true}
}

func (v NullableProjectSchemaOwnersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectSchemaOwnersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
