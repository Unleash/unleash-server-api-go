/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the UpdateFeatureTypeLifetimeSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateFeatureTypeLifetimeSchema{}

// UpdateFeatureTypeLifetimeSchema Data used when updating the lifetime of a [feature toggle type](https://docs.getunleash.io/reference/feature-toggle-types).
type UpdateFeatureTypeLifetimeSchema struct {
	// The new lifetime (in days) that you want to assign to the feature toggle type. If the value is `null` or `0`, then the feature toggles of that type will never be marked as potentially stale. Otherwise, they will be considered potentially stale after the number of days indicated by this property.
	LifetimeDays NullableInt32 `json:"lifetimeDays"`
}

// NewUpdateFeatureTypeLifetimeSchema instantiates a new UpdateFeatureTypeLifetimeSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFeatureTypeLifetimeSchema(lifetimeDays NullableInt32) *UpdateFeatureTypeLifetimeSchema {
	this := UpdateFeatureTypeLifetimeSchema{}
	this.LifetimeDays = lifetimeDays
	return &this
}

// NewUpdateFeatureTypeLifetimeSchemaWithDefaults instantiates a new UpdateFeatureTypeLifetimeSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFeatureTypeLifetimeSchemaWithDefaults() *UpdateFeatureTypeLifetimeSchema {
	this := UpdateFeatureTypeLifetimeSchema{}
	return &this
}

// GetLifetimeDays returns the LifetimeDays field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *UpdateFeatureTypeLifetimeSchema) GetLifetimeDays() int32 {
	if o == nil || o.LifetimeDays.Get() == nil {
		var ret int32
		return ret
	}

	return *o.LifetimeDays.Get()
}

// GetLifetimeDaysOk returns a tuple with the LifetimeDays field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateFeatureTypeLifetimeSchema) GetLifetimeDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LifetimeDays.Get(), o.LifetimeDays.IsSet()
}

// SetLifetimeDays sets field value
func (o *UpdateFeatureTypeLifetimeSchema) SetLifetimeDays(v int32) {
	o.LifetimeDays.Set(&v)
}

func (o UpdateFeatureTypeLifetimeSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateFeatureTypeLifetimeSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lifetimeDays"] = o.LifetimeDays.Get()
	return toSerialize, nil
}

type NullableUpdateFeatureTypeLifetimeSchema struct {
	value *UpdateFeatureTypeLifetimeSchema
	isSet bool
}

func (v NullableUpdateFeatureTypeLifetimeSchema) Get() *UpdateFeatureTypeLifetimeSchema {
	return v.value
}

func (v *NullableUpdateFeatureTypeLifetimeSchema) Set(val *UpdateFeatureTypeLifetimeSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFeatureTypeLifetimeSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFeatureTypeLifetimeSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFeatureTypeLifetimeSchema(val *UpdateFeatureTypeLifetimeSchema) *NullableUpdateFeatureTypeLifetimeSchema {
	return &NullableUpdateFeatureTypeLifetimeSchema{value: val, isSet: true}
}

func (v NullableUpdateFeatureTypeLifetimeSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFeatureTypeLifetimeSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
