/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the FeatureSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureSchema{}

// FeatureSchema A feature toggle definition
type FeatureSchema struct {
	// Unique feature name
	Name string `json:"name"`
	// Type of the toggle e.g. experiment, kill-switch, release, operational, permission
	Type *string `json:"type,omitempty"`
	// Detailed description of the feature
	Description NullableString `json:"description,omitempty"`
	// `true` if the feature is archived
	Archived *bool `json:"archived,omitempty"`
	// Name of the project the feature belongs to
	Project *string `json:"project,omitempty"`
	// `true` if the feature is enabled, otherwise `false`.
	Enabled *bool `json:"enabled,omitempty"`
	// `true` if the feature is stale based on the age and feature type, otherwise `false`.
	Stale *bool `json:"stale,omitempty"`
	// `true` if the feature was favorited, otherwise `false`.
	Favorite *bool `json:"favorite,omitempty"`
	// `true` if the impression data collection is enabled for the feature, otherwise `false`.
	ImpressionData *bool `json:"impressionData,omitempty"`
	// The date the feature was created
	CreatedAt NullableTime `json:"createdAt,omitempty"`
	// The date the feature was archived
	ArchivedAt NullableTime `json:"archivedAt,omitempty"`
	// The date when metrics where last collected for the feature
	LastSeenAt NullableTime `json:"lastSeenAt,omitempty"`
	// The list of environments where the feature can be used
	Environments []FeatureEnvironmentSchema `json:"environments,omitempty"`
	// The list of feature variants
	// Deprecated
	Variants []VariantSchema `json:"variants,omitempty"`
	// This is a legacy field that will be deprecated
	// Deprecated
	Strategies []map[string]interface{} `json:"strategies,omitempty"`
	// The list of feature tags
	Tags []TagSchema `json:"tags,omitempty"`
}

// NewFeatureSchema instantiates a new FeatureSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureSchema(name string) *FeatureSchema {
	this := FeatureSchema{}
	this.Name = name
	return &this
}

// NewFeatureSchemaWithDefaults instantiates a new FeatureSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureSchemaWithDefaults() *FeatureSchema {
	this := FeatureSchema{}
	return &this
}

// GetName returns the Name field value
func (o *FeatureSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FeatureSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FeatureSchema) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FeatureSchema) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSchema) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FeatureSchema) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FeatureSchema) SetType(v string) {
	o.Type = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureSchema) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureSchema) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *FeatureSchema) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *FeatureSchema) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *FeatureSchema) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *FeatureSchema) UnsetDescription() {
	o.Description.Unset()
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *FeatureSchema) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSchema) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *FeatureSchema) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *FeatureSchema) SetArchived(v bool) {
	o.Archived = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *FeatureSchema) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSchema) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *FeatureSchema) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *FeatureSchema) SetProject(v string) {
	o.Project = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FeatureSchema) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSchema) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FeatureSchema) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FeatureSchema) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *FeatureSchema) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSchema) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *FeatureSchema) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *FeatureSchema) SetStale(v bool) {
	o.Stale = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *FeatureSchema) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSchema) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *FeatureSchema) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *FeatureSchema) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetImpressionData returns the ImpressionData field value if set, zero value otherwise.
func (o *FeatureSchema) GetImpressionData() bool {
	if o == nil || IsNil(o.ImpressionData) {
		var ret bool
		return ret
	}
	return *o.ImpressionData
}

// GetImpressionDataOk returns a tuple with the ImpressionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSchema) GetImpressionDataOk() (*bool, bool) {
	if o == nil || IsNil(o.ImpressionData) {
		return nil, false
	}
	return o.ImpressionData, true
}

// HasImpressionData returns a boolean if a field has been set.
func (o *FeatureSchema) HasImpressionData() bool {
	if o != nil && !IsNil(o.ImpressionData) {
		return true
	}

	return false
}

// SetImpressionData gets a reference to the given bool and assigns it to the ImpressionData field.
func (o *FeatureSchema) SetImpressionData(v bool) {
	o.ImpressionData = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureSchema) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureSchema) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *FeatureSchema) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableTime and assigns it to the CreatedAt field.
func (o *FeatureSchema) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *FeatureSchema) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *FeatureSchema) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureSchema) GetArchivedAt() time.Time {
	if o == nil || IsNil(o.ArchivedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ArchivedAt.Get()
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureSchema) GetArchivedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArchivedAt.Get(), o.ArchivedAt.IsSet()
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *FeatureSchema) HasArchivedAt() bool {
	if o != nil && o.ArchivedAt.IsSet() {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given NullableTime and assigns it to the ArchivedAt field.
func (o *FeatureSchema) SetArchivedAt(v time.Time) {
	o.ArchivedAt.Set(&v)
}

// SetArchivedAtNil sets the value for ArchivedAt to be an explicit nil
func (o *FeatureSchema) SetArchivedAtNil() {
	o.ArchivedAt.Set(nil)
}

// UnsetArchivedAt ensures that no value is present for ArchivedAt, not even an explicit nil
func (o *FeatureSchema) UnsetArchivedAt() {
	o.ArchivedAt.Unset()
}

// GetLastSeenAt returns the LastSeenAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureSchema) GetLastSeenAt() time.Time {
	if o == nil || IsNil(o.LastSeenAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastSeenAt.Get()
}

// GetLastSeenAtOk returns a tuple with the LastSeenAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureSchema) GetLastSeenAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastSeenAt.Get(), o.LastSeenAt.IsSet()
}

// HasLastSeenAt returns a boolean if a field has been set.
func (o *FeatureSchema) HasLastSeenAt() bool {
	if o != nil && o.LastSeenAt.IsSet() {
		return true
	}

	return false
}

// SetLastSeenAt gets a reference to the given NullableTime and assigns it to the LastSeenAt field.
func (o *FeatureSchema) SetLastSeenAt(v time.Time) {
	o.LastSeenAt.Set(&v)
}

// SetLastSeenAtNil sets the value for LastSeenAt to be an explicit nil
func (o *FeatureSchema) SetLastSeenAtNil() {
	o.LastSeenAt.Set(nil)
}

// UnsetLastSeenAt ensures that no value is present for LastSeenAt, not even an explicit nil
func (o *FeatureSchema) UnsetLastSeenAt() {
	o.LastSeenAt.Unset()
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *FeatureSchema) GetEnvironments() []FeatureEnvironmentSchema {
	if o == nil || IsNil(o.Environments) {
		var ret []FeatureEnvironmentSchema
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureSchema) GetEnvironmentsOk() ([]FeatureEnvironmentSchema, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *FeatureSchema) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []FeatureEnvironmentSchema and assigns it to the Environments field.
func (o *FeatureSchema) SetEnvironments(v []FeatureEnvironmentSchema) {
	o.Environments = v
}

// GetVariants returns the Variants field value if set, zero value otherwise.
// Deprecated
func (o *FeatureSchema) GetVariants() []VariantSchema {
	if o == nil || IsNil(o.Variants) {
		var ret []VariantSchema
		return ret
	}
	return o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *FeatureSchema) GetVariantsOk() ([]VariantSchema, bool) {
	if o == nil || IsNil(o.Variants) {
		return nil, false
	}
	return o.Variants, true
}

// HasVariants returns a boolean if a field has been set.
func (o *FeatureSchema) HasVariants() bool {
	if o != nil && !IsNil(o.Variants) {
		return true
	}

	return false
}

// SetVariants gets a reference to the given []VariantSchema and assigns it to the Variants field.
// Deprecated
func (o *FeatureSchema) SetVariants(v []VariantSchema) {
	o.Variants = v
}

// GetStrategies returns the Strategies field value if set, zero value otherwise.
// Deprecated
func (o *FeatureSchema) GetStrategies() []map[string]interface{} {
	if o == nil || IsNil(o.Strategies) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Strategies
}

// GetStrategiesOk returns a tuple with the Strategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *FeatureSchema) GetStrategiesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Strategies) {
		return nil, false
	}
	return o.Strategies, true
}

// HasStrategies returns a boolean if a field has been set.
func (o *FeatureSchema) HasStrategies() bool {
	if o != nil && !IsNil(o.Strategies) {
		return true
	}

	return false
}

// SetStrategies gets a reference to the given []map[string]interface{} and assigns it to the Strategies field.
// Deprecated
func (o *FeatureSchema) SetStrategies(v []map[string]interface{}) {
	o.Strategies = v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureSchema) GetTags() []TagSchema {
	if o == nil {
		var ret []TagSchema
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureSchema) GetTagsOk() ([]TagSchema, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *FeatureSchema) HasTags() bool {
	if o != nil && IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagSchema and assigns it to the Tags field.
func (o *FeatureSchema) SetTags(v []TagSchema) {
	o.Tags = v
}

func (o FeatureSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.ImpressionData) {
		toSerialize["impressionData"] = o.ImpressionData
	}
	if o.CreatedAt.IsSet() {
		toSerialize["createdAt"] = o.CreatedAt.Get()
	}
	if o.ArchivedAt.IsSet() {
		toSerialize["archivedAt"] = o.ArchivedAt.Get()
	}
	if o.LastSeenAt.IsSet() {
		toSerialize["lastSeenAt"] = o.LastSeenAt.Get()
	}
	if !IsNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	if !IsNil(o.Variants) {
		toSerialize["variants"] = o.Variants
	}
	if !IsNil(o.Strategies) {
		toSerialize["strategies"] = o.Strategies
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableFeatureSchema struct {
	value *FeatureSchema
	isSet bool
}

func (v NullableFeatureSchema) Get() *FeatureSchema {
	return v.value
}

func (v *NullableFeatureSchema) Set(val *FeatureSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureSchema(val *FeatureSchema) *NullableFeatureSchema {
	return &NullableFeatureSchema{value: val, isSet: true}
}

func (v NullableFeatureSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
