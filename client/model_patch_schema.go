/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PatchSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchSchema{}

// PatchSchema struct for PatchSchema
type PatchSchema struct {
	Path  string      `json:"path"`
	Op    string      `json:"op"`
	From  *string     `json:"from,omitempty"`
	Value interface{} `json:"value,omitempty"`
}

// NewPatchSchema instantiates a new PatchSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchSchema(path string, op string) *PatchSchema {
	this := PatchSchema{}
	this.Path = path
	this.Op = op
	return &this
}

// NewPatchSchemaWithDefaults instantiates a new PatchSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchSchemaWithDefaults() *PatchSchema {
	this := PatchSchema{}
	return &this
}

// GetPath returns the Path field value
func (o *PatchSchema) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *PatchSchema) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *PatchSchema) SetPath(v string) {
	o.Path = v
}

// GetOp returns the Op field value
func (o *PatchSchema) GetOp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *PatchSchema) GetOpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Op, true
}

// SetOp sets field value
func (o *PatchSchema) SetOp(v string) {
	o.Op = v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *PatchSchema) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchSchema) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *PatchSchema) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *PatchSchema) SetFrom(v string) {
	o.From = &v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchSchema) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchSchema) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PatchSchema) HasValue() bool {
	if o != nil && IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *PatchSchema) SetValue(v interface{}) {
	o.Value = v
}

func (o PatchSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["path"] = o.Path
	toSerialize["op"] = o.Op
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullablePatchSchema struct {
	value *PatchSchema
	isSet bool
}

func (v NullablePatchSchema) Get() *PatchSchema {
	return v.value
}

func (v *NullablePatchSchema) Set(val *PatchSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchSchema(val *PatchSchema) *NullablePatchSchema {
	return &NullablePatchSchema{value: val, isSet: true}
}

func (v NullablePatchSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
