/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the FeatureEnvironmentSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureEnvironmentSchema{}

// FeatureEnvironmentSchema A detailed description of the feature environment
type FeatureEnvironmentSchema struct {
	// The name of the environment
	Name string `json:"name"`
	// The name of the feature
	FeatureName *string `json:"featureName,omitempty"`
	// The name of the environment
	Environment *string `json:"environment,omitempty"`
	// The type of the environment
	Type *string `json:"type,omitempty"`
	// `true` if the feature is enabled for the environment, otherwise `false`.
	Enabled bool `json:"enabled"`
	// The sort order of the feature environment in the feature environments list
	SortOrder *float32 `json:"sortOrder,omitempty"`
	// The number of defined variants
	VariantCount *float32 `json:"variantCount,omitempty"`
	// A list of activation strategies for the feature environment
	Strategies []FeatureStrategySchema `json:"strategies,omitempty"`
	// A list of variants for the feature environment
	Variants []VariantSchema `json:"variants,omitempty"`
}

// NewFeatureEnvironmentSchema instantiates a new FeatureEnvironmentSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureEnvironmentSchema(name string, enabled bool) *FeatureEnvironmentSchema {
	this := FeatureEnvironmentSchema{}
	this.Name = name
	this.Enabled = enabled
	return &this
}

// NewFeatureEnvironmentSchemaWithDefaults instantiates a new FeatureEnvironmentSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureEnvironmentSchemaWithDefaults() *FeatureEnvironmentSchema {
	this := FeatureEnvironmentSchema{}
	return &this
}

// GetName returns the Name field value
func (o *FeatureEnvironmentSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FeatureEnvironmentSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FeatureEnvironmentSchema) SetName(v string) {
	o.Name = v
}

// GetFeatureName returns the FeatureName field value if set, zero value otherwise.
func (o *FeatureEnvironmentSchema) GetFeatureName() string {
	if o == nil || IsNil(o.FeatureName) {
		var ret string
		return ret
	}
	return *o.FeatureName
}

// GetFeatureNameOk returns a tuple with the FeatureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureEnvironmentSchema) GetFeatureNameOk() (*string, bool) {
	if o == nil || IsNil(o.FeatureName) {
		return nil, false
	}
	return o.FeatureName, true
}

// HasFeatureName returns a boolean if a field has been set.
func (o *FeatureEnvironmentSchema) HasFeatureName() bool {
	if o != nil && !IsNil(o.FeatureName) {
		return true
	}

	return false
}

// SetFeatureName gets a reference to the given string and assigns it to the FeatureName field.
func (o *FeatureEnvironmentSchema) SetFeatureName(v string) {
	o.FeatureName = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *FeatureEnvironmentSchema) GetEnvironment() string {
	if o == nil || IsNil(o.Environment) {
		var ret string
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureEnvironmentSchema) GetEnvironmentOk() (*string, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *FeatureEnvironmentSchema) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given string and assigns it to the Environment field.
func (o *FeatureEnvironmentSchema) SetEnvironment(v string) {
	o.Environment = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FeatureEnvironmentSchema) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureEnvironmentSchema) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FeatureEnvironmentSchema) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FeatureEnvironmentSchema) SetType(v string) {
	o.Type = &v
}

// GetEnabled returns the Enabled field value
func (o *FeatureEnvironmentSchema) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *FeatureEnvironmentSchema) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *FeatureEnvironmentSchema) SetEnabled(v bool) {
	o.Enabled = v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *FeatureEnvironmentSchema) GetSortOrder() float32 {
	if o == nil || IsNil(o.SortOrder) {
		var ret float32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureEnvironmentSchema) GetSortOrderOk() (*float32, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *FeatureEnvironmentSchema) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given float32 and assigns it to the SortOrder field.
func (o *FeatureEnvironmentSchema) SetSortOrder(v float32) {
	o.SortOrder = &v
}

// GetVariantCount returns the VariantCount field value if set, zero value otherwise.
func (o *FeatureEnvironmentSchema) GetVariantCount() float32 {
	if o == nil || IsNil(o.VariantCount) {
		var ret float32
		return ret
	}
	return *o.VariantCount
}

// GetVariantCountOk returns a tuple with the VariantCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureEnvironmentSchema) GetVariantCountOk() (*float32, bool) {
	if o == nil || IsNil(o.VariantCount) {
		return nil, false
	}
	return o.VariantCount, true
}

// HasVariantCount returns a boolean if a field has been set.
func (o *FeatureEnvironmentSchema) HasVariantCount() bool {
	if o != nil && !IsNil(o.VariantCount) {
		return true
	}

	return false
}

// SetVariantCount gets a reference to the given float32 and assigns it to the VariantCount field.
func (o *FeatureEnvironmentSchema) SetVariantCount(v float32) {
	o.VariantCount = &v
}

// GetStrategies returns the Strategies field value if set, zero value otherwise.
func (o *FeatureEnvironmentSchema) GetStrategies() []FeatureStrategySchema {
	if o == nil || IsNil(o.Strategies) {
		var ret []FeatureStrategySchema
		return ret
	}
	return o.Strategies
}

// GetStrategiesOk returns a tuple with the Strategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureEnvironmentSchema) GetStrategiesOk() ([]FeatureStrategySchema, bool) {
	if o == nil || IsNil(o.Strategies) {
		return nil, false
	}
	return o.Strategies, true
}

// HasStrategies returns a boolean if a field has been set.
func (o *FeatureEnvironmentSchema) HasStrategies() bool {
	if o != nil && !IsNil(o.Strategies) {
		return true
	}

	return false
}

// SetStrategies gets a reference to the given []FeatureStrategySchema and assigns it to the Strategies field.
func (o *FeatureEnvironmentSchema) SetStrategies(v []FeatureStrategySchema) {
	o.Strategies = v
}

// GetVariants returns the Variants field value if set, zero value otherwise.
func (o *FeatureEnvironmentSchema) GetVariants() []VariantSchema {
	if o == nil || IsNil(o.Variants) {
		var ret []VariantSchema
		return ret
	}
	return o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureEnvironmentSchema) GetVariantsOk() ([]VariantSchema, bool) {
	if o == nil || IsNil(o.Variants) {
		return nil, false
	}
	return o.Variants, true
}

// HasVariants returns a boolean if a field has been set.
func (o *FeatureEnvironmentSchema) HasVariants() bool {
	if o != nil && !IsNil(o.Variants) {
		return true
	}

	return false
}

// SetVariants gets a reference to the given []VariantSchema and assigns it to the Variants field.
func (o *FeatureEnvironmentSchema) SetVariants(v []VariantSchema) {
	o.Variants = v
}

func (o FeatureEnvironmentSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureEnvironmentSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.FeatureName) {
		toSerialize["featureName"] = o.FeatureName
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.SortOrder) {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if !IsNil(o.VariantCount) {
		toSerialize["variantCount"] = o.VariantCount
	}
	if !IsNil(o.Strategies) {
		toSerialize["strategies"] = o.Strategies
	}
	if !IsNil(o.Variants) {
		toSerialize["variants"] = o.Variants
	}
	return toSerialize, nil
}

type NullableFeatureEnvironmentSchema struct {
	value *FeatureEnvironmentSchema
	isSet bool
}

func (v NullableFeatureEnvironmentSchema) Get() *FeatureEnvironmentSchema {
	return v.value
}

func (v *NullableFeatureEnvironmentSchema) Set(val *FeatureEnvironmentSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureEnvironmentSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureEnvironmentSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureEnvironmentSchema(val *FeatureEnvironmentSchema) *NullableFeatureEnvironmentSchema {
	return &NullableFeatureEnvironmentSchema{value: val, isSet: true}
}

func (v NullableFeatureEnvironmentSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureEnvironmentSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
