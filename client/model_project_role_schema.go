/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.4.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ProjectRoleSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectRoleSchema{}

// ProjectRoleSchema An overview of how many users and groups are mapped to the specified project with the specified role.
type ProjectRoleSchema struct {
	// The id of the project user and group count are counted for.
	Project string `json:"project"`
	// Id of the role the user and group count are counted for.
	Role *int32 `json:"role,omitempty"`
	// Number of users mapped to this project.
	UserCount *int32 `json:"userCount,omitempty"`
	// Number of service accounts mapped to this project.
	ServiceAccountCount *int32 `json:"serviceAccountCount,omitempty"`
	// Number of groups mapped to this project.
	GroupCount *int32 `json:"groupCount,omitempty"`
}

// NewProjectRoleSchema instantiates a new ProjectRoleSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectRoleSchema(project string) *ProjectRoleSchema {
	this := ProjectRoleSchema{}
	this.Project = project
	return &this
}

// NewProjectRoleSchemaWithDefaults instantiates a new ProjectRoleSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectRoleSchemaWithDefaults() *ProjectRoleSchema {
	this := ProjectRoleSchema{}
	return &this
}

// GetProject returns the Project field value
func (o *ProjectRoleSchema) GetProject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *ProjectRoleSchema) GetProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *ProjectRoleSchema) SetProject(v string) {
	o.Project = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ProjectRoleSchema) GetRole() int32 {
	if o == nil || IsNil(o.Role) {
		var ret int32
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRoleSchema) GetRoleOk() (*int32, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ProjectRoleSchema) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given int32 and assigns it to the Role field.
func (o *ProjectRoleSchema) SetRole(v int32) {
	o.Role = &v
}

// GetUserCount returns the UserCount field value if set, zero value otherwise.
func (o *ProjectRoleSchema) GetUserCount() int32 {
	if o == nil || IsNil(o.UserCount) {
		var ret int32
		return ret
	}
	return *o.UserCount
}

// GetUserCountOk returns a tuple with the UserCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRoleSchema) GetUserCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UserCount) {
		return nil, false
	}
	return o.UserCount, true
}

// HasUserCount returns a boolean if a field has been set.
func (o *ProjectRoleSchema) HasUserCount() bool {
	if o != nil && !IsNil(o.UserCount) {
		return true
	}

	return false
}

// SetUserCount gets a reference to the given int32 and assigns it to the UserCount field.
func (o *ProjectRoleSchema) SetUserCount(v int32) {
	o.UserCount = &v
}

// GetServiceAccountCount returns the ServiceAccountCount field value if set, zero value otherwise.
func (o *ProjectRoleSchema) GetServiceAccountCount() int32 {
	if o == nil || IsNil(o.ServiceAccountCount) {
		var ret int32
		return ret
	}
	return *o.ServiceAccountCount
}

// GetServiceAccountCountOk returns a tuple with the ServiceAccountCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRoleSchema) GetServiceAccountCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ServiceAccountCount) {
		return nil, false
	}
	return o.ServiceAccountCount, true
}

// HasServiceAccountCount returns a boolean if a field has been set.
func (o *ProjectRoleSchema) HasServiceAccountCount() bool {
	if o != nil && !IsNil(o.ServiceAccountCount) {
		return true
	}

	return false
}

// SetServiceAccountCount gets a reference to the given int32 and assigns it to the ServiceAccountCount field.
func (o *ProjectRoleSchema) SetServiceAccountCount(v int32) {
	o.ServiceAccountCount = &v
}

// GetGroupCount returns the GroupCount field value if set, zero value otherwise.
func (o *ProjectRoleSchema) GetGroupCount() int32 {
	if o == nil || IsNil(o.GroupCount) {
		var ret int32
		return ret
	}
	return *o.GroupCount
}

// GetGroupCountOk returns a tuple with the GroupCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRoleSchema) GetGroupCountOk() (*int32, bool) {
	if o == nil || IsNil(o.GroupCount) {
		return nil, false
	}
	return o.GroupCount, true
}

// HasGroupCount returns a boolean if a field has been set.
func (o *ProjectRoleSchema) HasGroupCount() bool {
	if o != nil && !IsNil(o.GroupCount) {
		return true
	}

	return false
}

// SetGroupCount gets a reference to the given int32 and assigns it to the GroupCount field.
func (o *ProjectRoleSchema) SetGroupCount(v int32) {
	o.GroupCount = &v
}

func (o ProjectRoleSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectRoleSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["project"] = o.Project
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.UserCount) {
		toSerialize["userCount"] = o.UserCount
	}
	if !IsNil(o.ServiceAccountCount) {
		toSerialize["serviceAccountCount"] = o.ServiceAccountCount
	}
	if !IsNil(o.GroupCount) {
		toSerialize["groupCount"] = o.GroupCount
	}
	return toSerialize, nil
}

type NullableProjectRoleSchema struct {
	value *ProjectRoleSchema
	isSet bool
}

func (v NullableProjectRoleSchema) Get() *ProjectRoleSchema {
	return v.value
}

func (v *NullableProjectRoleSchema) Set(val *ProjectRoleSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectRoleSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectRoleSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectRoleSchema(val *ProjectRoleSchema) *NullableProjectRoleSchema {
	return &NullableProjectRoleSchema{value: val, isSet: true}
}

func (v NullableProjectRoleSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectRoleSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
