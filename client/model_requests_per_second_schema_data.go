/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the RequestsPerSecondSchemaData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestsPerSecondSchemaData{}

// RequestsPerSecondSchemaData The query result from prometheus
type RequestsPerSecondSchemaData struct {
	// Prometheus compatible result type.
	ResultType *string `json:"resultType,omitempty"`
	// An array of values per metric. Each one represents a line in the graph labeled by its metric name
	Result []RequestsPerSecondSchemaDataResultInner `json:"result,omitempty"`
}

// NewRequestsPerSecondSchemaData instantiates a new RequestsPerSecondSchemaData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestsPerSecondSchemaData() *RequestsPerSecondSchemaData {
	this := RequestsPerSecondSchemaData{}
	return &this
}

// NewRequestsPerSecondSchemaDataWithDefaults instantiates a new RequestsPerSecondSchemaData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestsPerSecondSchemaDataWithDefaults() *RequestsPerSecondSchemaData {
	this := RequestsPerSecondSchemaData{}
	return &this
}

// GetResultType returns the ResultType field value if set, zero value otherwise.
func (o *RequestsPerSecondSchemaData) GetResultType() string {
	if o == nil || IsNil(o.ResultType) {
		var ret string
		return ret
	}
	return *o.ResultType
}

// GetResultTypeOk returns a tuple with the ResultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestsPerSecondSchemaData) GetResultTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResultType) {
		return nil, false
	}
	return o.ResultType, true
}

// HasResultType returns a boolean if a field has been set.
func (o *RequestsPerSecondSchemaData) HasResultType() bool {
	if o != nil && !IsNil(o.ResultType) {
		return true
	}

	return false
}

// SetResultType gets a reference to the given string and assigns it to the ResultType field.
func (o *RequestsPerSecondSchemaData) SetResultType(v string) {
	o.ResultType = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *RequestsPerSecondSchemaData) GetResult() []RequestsPerSecondSchemaDataResultInner {
	if o == nil || IsNil(o.Result) {
		var ret []RequestsPerSecondSchemaDataResultInner
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestsPerSecondSchemaData) GetResultOk() ([]RequestsPerSecondSchemaDataResultInner, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *RequestsPerSecondSchemaData) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given []RequestsPerSecondSchemaDataResultInner and assigns it to the Result field.
func (o *RequestsPerSecondSchemaData) SetResult(v []RequestsPerSecondSchemaDataResultInner) {
	o.Result = v
}

func (o RequestsPerSecondSchemaData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestsPerSecondSchemaData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResultType) {
		toSerialize["resultType"] = o.ResultType
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableRequestsPerSecondSchemaData struct {
	value *RequestsPerSecondSchemaData
	isSet bool
}

func (v NullableRequestsPerSecondSchemaData) Get() *RequestsPerSecondSchemaData {
	return v.value
}

func (v *NullableRequestsPerSecondSchemaData) Set(val *RequestsPerSecondSchemaData) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestsPerSecondSchemaData) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestsPerSecondSchemaData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestsPerSecondSchemaData(val *RequestsPerSecondSchemaData) *NullableRequestsPerSecondSchemaData {
	return &NullableRequestsPerSecondSchemaData{value: val, isSet: true}
}

func (v NullableRequestsPerSecondSchemaData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestsPerSecondSchemaData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
