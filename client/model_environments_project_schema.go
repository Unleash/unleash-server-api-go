/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EnvironmentsProjectSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentsProjectSchema{}

// EnvironmentsProjectSchema Environments defined for a given project
type EnvironmentsProjectSchema struct {
	Version int32 `json:"version"`
	Environments []EnvironmentProjectSchema `json:"environments"`
}

// NewEnvironmentsProjectSchema instantiates a new EnvironmentsProjectSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentsProjectSchema(version int32, environments []EnvironmentProjectSchema) *EnvironmentsProjectSchema {
	this := EnvironmentsProjectSchema{}
	this.Version = version
	this.Environments = environments
	return &this
}

// NewEnvironmentsProjectSchemaWithDefaults instantiates a new EnvironmentsProjectSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentsProjectSchemaWithDefaults() *EnvironmentsProjectSchema {
	this := EnvironmentsProjectSchema{}
	return &this
}

// GetVersion returns the Version field value
func (o *EnvironmentsProjectSchema) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *EnvironmentsProjectSchema) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *EnvironmentsProjectSchema) SetVersion(v int32) {
	o.Version = v
}

// GetEnvironments returns the Environments field value
func (o *EnvironmentsProjectSchema) GetEnvironments() []EnvironmentProjectSchema {
	if o == nil {
		var ret []EnvironmentProjectSchema
		return ret
	}

	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value
// and a boolean to check if the value has been set.
func (o *EnvironmentsProjectSchema) GetEnvironmentsOk() ([]EnvironmentProjectSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Environments, true
}

// SetEnvironments sets field value
func (o *EnvironmentsProjectSchema) SetEnvironments(v []EnvironmentProjectSchema) {
	o.Environments = v
}

func (o EnvironmentsProjectSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentsProjectSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["environments"] = o.Environments
	return toSerialize, nil
}

type NullableEnvironmentsProjectSchema struct {
	value *EnvironmentsProjectSchema
	isSet bool
}

func (v NullableEnvironmentsProjectSchema) Get() *EnvironmentsProjectSchema {
	return v.value
}

func (v *NullableEnvironmentsProjectSchema) Set(val *EnvironmentsProjectSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentsProjectSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentsProjectSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentsProjectSchema(val *EnvironmentsProjectSchema) *NullableEnvironmentsProjectSchema {
	return &NullableEnvironmentsProjectSchema{value: val, isSet: true}
}

func (v NullableEnvironmentsProjectSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentsProjectSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


