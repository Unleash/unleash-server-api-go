/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.7.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ProjectOverviewSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectOverviewSchema{}

// ProjectOverviewSchema A high-level overview of a project. It contains information such as project statistics, the name of the project, what members and what features it contains, etc.
type ProjectOverviewSchema struct {
	Stats *ProjectStatsSchema `json:"stats,omitempty"`
	// The schema version used to describe the project overview
	Version int32 `json:"version"`
	// The name of this project
	Name string `json:"name"`
	// Additional information about the project
	Description NullableString `json:"description,omitempty"`
	// A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
	DefaultStickiness *string `json:"defaultStickiness,omitempty"`
	// The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
	Mode *string `json:"mode,omitempty"`
	// A limit on the number of features allowed in the project. Null if no limit.
	FeatureLimit  NullableFloat32                   `json:"featureLimit,omitempty"`
	FeatureNaming *CreateFeatureNamingPatternSchema `json:"featureNaming,omitempty"`
	// The number of members this project has
	Members *float32 `json:"members,omitempty"`
	// An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#project-status) on a scale from 0 to 100
	Health *float32 `json:"health,omitempty"`
	// The environments that are enabled for this project
	Environments []ProjectEnvironmentSchema `json:"environments,omitempty"`
	// The number of features of each type that are in this project
	FeatureTypeCounts []FeatureTypeCountSchema `json:"featureTypeCounts,omitempty"`
	// When the project was last updated.
	UpdatedAt NullableTime `json:"updatedAt,omitempty"`
	// When the project was archived.
	ArchivedAt NullableTime `json:"archivedAt,omitempty"`
	// When the project was created.
	CreatedAt NullableTime `json:"createdAt,omitempty"`
	// `true` if the project was favorited, otherwise `false`.
	Favorite             *bool                                 `json:"favorite,omitempty"`
	OnboardingStatus     ProjectOverviewSchemaOnboardingStatus `json:"onboardingStatus"`
	AdditionalProperties map[string]interface{}
}

type _ProjectOverviewSchema ProjectOverviewSchema

// NewProjectOverviewSchema instantiates a new ProjectOverviewSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectOverviewSchema(version int32, name string, onboardingStatus ProjectOverviewSchemaOnboardingStatus) *ProjectOverviewSchema {
	this := ProjectOverviewSchema{}
	this.Version = version
	this.Name = name
	this.OnboardingStatus = onboardingStatus
	return &this
}

// NewProjectOverviewSchemaWithDefaults instantiates a new ProjectOverviewSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectOverviewSchemaWithDefaults() *ProjectOverviewSchema {
	this := ProjectOverviewSchema{}
	return &this
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *ProjectOverviewSchema) GetStats() ProjectStatsSchema {
	if o == nil || IsNil(o.Stats) {
		var ret ProjectStatsSchema
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectOverviewSchema) GetStatsOk() (*ProjectStatsSchema, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *ProjectOverviewSchema) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given ProjectStatsSchema and assigns it to the Stats field.
func (o *ProjectOverviewSchema) SetStats(v ProjectStatsSchema) {
	o.Stats = &v
}

// GetVersion returns the Version field value
func (o *ProjectOverviewSchema) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ProjectOverviewSchema) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ProjectOverviewSchema) SetVersion(v int32) {
	o.Version = v
}

// GetName returns the Name field value
func (o *ProjectOverviewSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectOverviewSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectOverviewSchema) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectOverviewSchema) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectOverviewSchema) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ProjectOverviewSchema) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ProjectOverviewSchema) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ProjectOverviewSchema) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ProjectOverviewSchema) UnsetDescription() {
	o.Description.Unset()
}

// GetDefaultStickiness returns the DefaultStickiness field value if set, zero value otherwise.
func (o *ProjectOverviewSchema) GetDefaultStickiness() string {
	if o == nil || IsNil(o.DefaultStickiness) {
		var ret string
		return ret
	}
	return *o.DefaultStickiness
}

// GetDefaultStickinessOk returns a tuple with the DefaultStickiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectOverviewSchema) GetDefaultStickinessOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultStickiness) {
		return nil, false
	}
	return o.DefaultStickiness, true
}

// HasDefaultStickiness returns a boolean if a field has been set.
func (o *ProjectOverviewSchema) HasDefaultStickiness() bool {
	if o != nil && !IsNil(o.DefaultStickiness) {
		return true
	}

	return false
}

// SetDefaultStickiness gets a reference to the given string and assigns it to the DefaultStickiness field.
func (o *ProjectOverviewSchema) SetDefaultStickiness(v string) {
	o.DefaultStickiness = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *ProjectOverviewSchema) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectOverviewSchema) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *ProjectOverviewSchema) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *ProjectOverviewSchema) SetMode(v string) {
	o.Mode = &v
}

// GetFeatureLimit returns the FeatureLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectOverviewSchema) GetFeatureLimit() float32 {
	if o == nil || IsNil(o.FeatureLimit.Get()) {
		var ret float32
		return ret
	}
	return *o.FeatureLimit.Get()
}

// GetFeatureLimitOk returns a tuple with the FeatureLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectOverviewSchema) GetFeatureLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FeatureLimit.Get(), o.FeatureLimit.IsSet()
}

// HasFeatureLimit returns a boolean if a field has been set.
func (o *ProjectOverviewSchema) HasFeatureLimit() bool {
	if o != nil && o.FeatureLimit.IsSet() {
		return true
	}

	return false
}

// SetFeatureLimit gets a reference to the given NullableFloat32 and assigns it to the FeatureLimit field.
func (o *ProjectOverviewSchema) SetFeatureLimit(v float32) {
	o.FeatureLimit.Set(&v)
}

// SetFeatureLimitNil sets the value for FeatureLimit to be an explicit nil
func (o *ProjectOverviewSchema) SetFeatureLimitNil() {
	o.FeatureLimit.Set(nil)
}

// UnsetFeatureLimit ensures that no value is present for FeatureLimit, not even an explicit nil
func (o *ProjectOverviewSchema) UnsetFeatureLimit() {
	o.FeatureLimit.Unset()
}

// GetFeatureNaming returns the FeatureNaming field value if set, zero value otherwise.
func (o *ProjectOverviewSchema) GetFeatureNaming() CreateFeatureNamingPatternSchema {
	if o == nil || IsNil(o.FeatureNaming) {
		var ret CreateFeatureNamingPatternSchema
		return ret
	}
	return *o.FeatureNaming
}

// GetFeatureNamingOk returns a tuple with the FeatureNaming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectOverviewSchema) GetFeatureNamingOk() (*CreateFeatureNamingPatternSchema, bool) {
	if o == nil || IsNil(o.FeatureNaming) {
		return nil, false
	}
	return o.FeatureNaming, true
}

// HasFeatureNaming returns a boolean if a field has been set.
func (o *ProjectOverviewSchema) HasFeatureNaming() bool {
	if o != nil && !IsNil(o.FeatureNaming) {
		return true
	}

	return false
}

// SetFeatureNaming gets a reference to the given CreateFeatureNamingPatternSchema and assigns it to the FeatureNaming field.
func (o *ProjectOverviewSchema) SetFeatureNaming(v CreateFeatureNamingPatternSchema) {
	o.FeatureNaming = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *ProjectOverviewSchema) GetMembers() float32 {
	if o == nil || IsNil(o.Members) {
		var ret float32
		return ret
	}
	return *o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectOverviewSchema) GetMembersOk() (*float32, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *ProjectOverviewSchema) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given float32 and assigns it to the Members field.
func (o *ProjectOverviewSchema) SetMembers(v float32) {
	o.Members = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *ProjectOverviewSchema) GetHealth() float32 {
	if o == nil || IsNil(o.Health) {
		var ret float32
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectOverviewSchema) GetHealthOk() (*float32, bool) {
	if o == nil || IsNil(o.Health) {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *ProjectOverviewSchema) HasHealth() bool {
	if o != nil && !IsNil(o.Health) {
		return true
	}

	return false
}

// SetHealth gets a reference to the given float32 and assigns it to the Health field.
func (o *ProjectOverviewSchema) SetHealth(v float32) {
	o.Health = &v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *ProjectOverviewSchema) GetEnvironments() []ProjectEnvironmentSchema {
	if o == nil || IsNil(o.Environments) {
		var ret []ProjectEnvironmentSchema
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectOverviewSchema) GetEnvironmentsOk() ([]ProjectEnvironmentSchema, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *ProjectOverviewSchema) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []ProjectEnvironmentSchema and assigns it to the Environments field.
func (o *ProjectOverviewSchema) SetEnvironments(v []ProjectEnvironmentSchema) {
	o.Environments = v
}

// GetFeatureTypeCounts returns the FeatureTypeCounts field value if set, zero value otherwise.
func (o *ProjectOverviewSchema) GetFeatureTypeCounts() []FeatureTypeCountSchema {
	if o == nil || IsNil(o.FeatureTypeCounts) {
		var ret []FeatureTypeCountSchema
		return ret
	}
	return o.FeatureTypeCounts
}

// GetFeatureTypeCountsOk returns a tuple with the FeatureTypeCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectOverviewSchema) GetFeatureTypeCountsOk() ([]FeatureTypeCountSchema, bool) {
	if o == nil || IsNil(o.FeatureTypeCounts) {
		return nil, false
	}
	return o.FeatureTypeCounts, true
}

// HasFeatureTypeCounts returns a boolean if a field has been set.
func (o *ProjectOverviewSchema) HasFeatureTypeCounts() bool {
	if o != nil && !IsNil(o.FeatureTypeCounts) {
		return true
	}

	return false
}

// SetFeatureTypeCounts gets a reference to the given []FeatureTypeCountSchema and assigns it to the FeatureTypeCounts field.
func (o *ProjectOverviewSchema) SetFeatureTypeCounts(v []FeatureTypeCountSchema) {
	o.FeatureTypeCounts = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectOverviewSchema) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectOverviewSchema) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ProjectOverviewSchema) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableTime and assigns it to the UpdatedAt field.
func (o *ProjectOverviewSchema) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}

// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *ProjectOverviewSchema) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *ProjectOverviewSchema) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectOverviewSchema) GetArchivedAt() time.Time {
	if o == nil || IsNil(o.ArchivedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ArchivedAt.Get()
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectOverviewSchema) GetArchivedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArchivedAt.Get(), o.ArchivedAt.IsSet()
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *ProjectOverviewSchema) HasArchivedAt() bool {
	if o != nil && o.ArchivedAt.IsSet() {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given NullableTime and assigns it to the ArchivedAt field.
func (o *ProjectOverviewSchema) SetArchivedAt(v time.Time) {
	o.ArchivedAt.Set(&v)
}

// SetArchivedAtNil sets the value for ArchivedAt to be an explicit nil
func (o *ProjectOverviewSchema) SetArchivedAtNil() {
	o.ArchivedAt.Set(nil)
}

// UnsetArchivedAt ensures that no value is present for ArchivedAt, not even an explicit nil
func (o *ProjectOverviewSchema) UnsetArchivedAt() {
	o.ArchivedAt.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectOverviewSchema) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectOverviewSchema) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ProjectOverviewSchema) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableTime and assigns it to the CreatedAt field.
func (o *ProjectOverviewSchema) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *ProjectOverviewSchema) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *ProjectOverviewSchema) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *ProjectOverviewSchema) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectOverviewSchema) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *ProjectOverviewSchema) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *ProjectOverviewSchema) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetOnboardingStatus returns the OnboardingStatus field value
func (o *ProjectOverviewSchema) GetOnboardingStatus() ProjectOverviewSchemaOnboardingStatus {
	if o == nil {
		var ret ProjectOverviewSchemaOnboardingStatus
		return ret
	}

	return o.OnboardingStatus
}

// GetOnboardingStatusOk returns a tuple with the OnboardingStatus field value
// and a boolean to check if the value has been set.
func (o *ProjectOverviewSchema) GetOnboardingStatusOk() (*ProjectOverviewSchemaOnboardingStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OnboardingStatus, true
}

// SetOnboardingStatus sets field value
func (o *ProjectOverviewSchema) SetOnboardingStatus(v ProjectOverviewSchemaOnboardingStatus) {
	o.OnboardingStatus = v
}

func (o ProjectOverviewSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectOverviewSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	toSerialize["version"] = o.Version
	toSerialize["name"] = o.Name
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.DefaultStickiness) {
		toSerialize["defaultStickiness"] = o.DefaultStickiness
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if o.FeatureLimit.IsSet() {
		toSerialize["featureLimit"] = o.FeatureLimit.Get()
	}
	if !IsNil(o.FeatureNaming) {
		toSerialize["featureNaming"] = o.FeatureNaming
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Health) {
		toSerialize["health"] = o.Health
	}
	if !IsNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	if !IsNil(o.FeatureTypeCounts) {
		toSerialize["featureTypeCounts"] = o.FeatureTypeCounts
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["updatedAt"] = o.UpdatedAt.Get()
	}
	if o.ArchivedAt.IsSet() {
		toSerialize["archivedAt"] = o.ArchivedAt.Get()
	}
	if o.CreatedAt.IsSet() {
		toSerialize["createdAt"] = o.CreatedAt.Get()
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	toSerialize["onboardingStatus"] = o.OnboardingStatus

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProjectOverviewSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"name",
		"onboardingStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectOverviewSchema := _ProjectOverviewSchema{}

	err = json.Unmarshal(data, &varProjectOverviewSchema)

	if err != nil {
		return err
	}

	*o = ProjectOverviewSchema(varProjectOverviewSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "stats")
		delete(additionalProperties, "version")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "defaultStickiness")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "featureLimit")
		delete(additionalProperties, "featureNaming")
		delete(additionalProperties, "members")
		delete(additionalProperties, "health")
		delete(additionalProperties, "environments")
		delete(additionalProperties, "featureTypeCounts")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "archivedAt")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "favorite")
		delete(additionalProperties, "onboardingStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProjectOverviewSchema struct {
	value *ProjectOverviewSchema
	isSet bool
}

func (v NullableProjectOverviewSchema) Get() *ProjectOverviewSchema {
	return v.value
}

func (v *NullableProjectOverviewSchema) Set(val *ProjectOverviewSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectOverviewSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectOverviewSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectOverviewSchema(val *ProjectOverviewSchema) *NullableProjectOverviewSchema {
	return &NullableProjectOverviewSchema{value: val, isSet: true}
}

func (v NullableProjectOverviewSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectOverviewSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
