/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the EventsSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsSchema{}

// EventsSchema A list of events that has happened in the system
type EventsSchema struct {
	// The api version of this response. A natural increasing number. Only increases if format changes
	Version int32 `json:"version"`
	// The list of events
	Events []EventSchema `json:"events"`
	// The total count of events
	TotalEvents *int32 `json:"totalEvents,omitempty"`
}

// NewEventsSchema instantiates a new EventsSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsSchema(version int32, events []EventSchema) *EventsSchema {
	this := EventsSchema{}
	this.Version = version
	this.Events = events
	return &this
}

// NewEventsSchemaWithDefaults instantiates a new EventsSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsSchemaWithDefaults() *EventsSchema {
	this := EventsSchema{}
	return &this
}

// GetVersion returns the Version field value
func (o *EventsSchema) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *EventsSchema) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *EventsSchema) SetVersion(v int32) {
	o.Version = v
}

// GetEvents returns the Events field value
func (o *EventsSchema) GetEvents() []EventSchema {
	if o == nil {
		var ret []EventSchema
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *EventsSchema) GetEventsOk() ([]EventSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *EventsSchema) SetEvents(v []EventSchema) {
	o.Events = v
}

// GetTotalEvents returns the TotalEvents field value if set, zero value otherwise.
func (o *EventsSchema) GetTotalEvents() int32 {
	if o == nil || IsNil(o.TotalEvents) {
		var ret int32
		return ret
	}
	return *o.TotalEvents
}

// GetTotalEventsOk returns a tuple with the TotalEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsSchema) GetTotalEventsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalEvents) {
		return nil, false
	}
	return o.TotalEvents, true
}

// HasTotalEvents returns a boolean if a field has been set.
func (o *EventsSchema) HasTotalEvents() bool {
	if o != nil && !IsNil(o.TotalEvents) {
		return true
	}

	return false
}

// SetTotalEvents gets a reference to the given int32 and assigns it to the TotalEvents field.
func (o *EventsSchema) SetTotalEvents(v int32) {
	o.TotalEvents = &v
}

func (o EventsSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["events"] = o.Events
	if !IsNil(o.TotalEvents) {
		toSerialize["totalEvents"] = o.TotalEvents
	}
	return toSerialize, nil
}

type NullableEventsSchema struct {
	value *EventsSchema
	isSet bool
}

func (v NullableEventsSchema) Get() *EventsSchema {
	return v.value
}

func (v *NullableEventsSchema) Set(val *EventsSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsSchema(val *EventsSchema) *NullableEventsSchema {
	return &NullableEventsSchema{value: val, isSet: true}
}

func (v NullableEventsSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
