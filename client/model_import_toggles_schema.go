/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.4.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ImportTogglesSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportTogglesSchema{}

// ImportTogglesSchema The result of the export operation for a project and environment, used at import
type ImportTogglesSchema struct {
	// The exported [project](https://docs.getunleash.io/reference/projects)
	Project string `json:"project"`
	// The exported [environment](https://docs.getunleash.io/reference/environments)
	Environment string             `json:"environment"`
	Data        ExportResultSchema `json:"data"`
}

// NewImportTogglesSchema instantiates a new ImportTogglesSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportTogglesSchema(project string, environment string, data ExportResultSchema) *ImportTogglesSchema {
	this := ImportTogglesSchema{}
	this.Project = project
	this.Environment = environment
	this.Data = data
	return &this
}

// NewImportTogglesSchemaWithDefaults instantiates a new ImportTogglesSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportTogglesSchemaWithDefaults() *ImportTogglesSchema {
	this := ImportTogglesSchema{}
	return &this
}

// GetProject returns the Project field value
func (o *ImportTogglesSchema) GetProject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *ImportTogglesSchema) GetProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *ImportTogglesSchema) SetProject(v string) {
	o.Project = v
}

// GetEnvironment returns the Environment field value
func (o *ImportTogglesSchema) GetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *ImportTogglesSchema) GetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *ImportTogglesSchema) SetEnvironment(v string) {
	o.Environment = v
}

// GetData returns the Data field value
func (o *ImportTogglesSchema) GetData() ExportResultSchema {
	if o == nil {
		var ret ExportResultSchema
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ImportTogglesSchema) GetDataOk() (*ExportResultSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ImportTogglesSchema) SetData(v ExportResultSchema) {
	o.Data = v
}

func (o ImportTogglesSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportTogglesSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["project"] = o.Project
	toSerialize["environment"] = o.Environment
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

type NullableImportTogglesSchema struct {
	value *ImportTogglesSchema
	isSet bool
}

func (v NullableImportTogglesSchema) Get() *ImportTogglesSchema {
	return v.value
}

func (v *NullableImportTogglesSchema) Set(val *ImportTogglesSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableImportTogglesSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableImportTogglesSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportTogglesSchema(val *ImportTogglesSchema) *NullableImportTogglesSchema {
	return &NullableImportTogglesSchema{value: val, isSet: true}
}

func (v NullableImportTogglesSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportTogglesSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
