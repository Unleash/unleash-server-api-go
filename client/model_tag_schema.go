/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the TagSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagSchema{}

// TagSchema Representation of a [tag](https://docs.getunleash.io/reference/tags)
type TagSchema struct {
	// The value of the tag
	Value string `json:"value"`
	// The [type](https://docs.getunleash.io/reference/tags#tag-types) of the tag
	Type string `json:"type"`
}

// NewTagSchema instantiates a new TagSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagSchema(value string, type_ string) *TagSchema {
	this := TagSchema{}
	this.Value = value
	this.Type = type_
	return &this
}

// NewTagSchemaWithDefaults instantiates a new TagSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagSchemaWithDefaults() *TagSchema {
	this := TagSchema{}
	var type_ string = "simple"
	this.Type = type_
	return &this
}

// GetValue returns the Value field value
func (o *TagSchema) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TagSchema) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TagSchema) SetValue(v string) {
	o.Value = v
}

// GetType returns the Type field value
func (o *TagSchema) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TagSchema) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TagSchema) SetType(v string) {
	o.Type = v
}

func (o TagSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableTagSchema struct {
	value *TagSchema
	isSet bool
}

func (v NullableTagSchema) Get() *TagSchema {
	return v.value
}

func (v *NullableTagSchema) Set(val *TagSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableTagSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableTagSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagSchema(val *TagSchema) *NullableTagSchema {
	return &NullableTagSchema{value: val, isSet: true}
}

func (v NullableTagSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
