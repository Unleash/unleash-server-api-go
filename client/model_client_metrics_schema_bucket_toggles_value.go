/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ClientMetricsSchemaBucketTogglesValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientMetricsSchemaBucketTogglesValue{}

// ClientMetricsSchemaBucketTogglesValue struct for ClientMetricsSchemaBucketTogglesValue
type ClientMetricsSchemaBucketTogglesValue struct {
	// How many times the toggle evaluated to true
	Yes *float32 `json:"yes,omitempty"`
	// How many times the toggle evaluated to false
	No *int32 `json:"no,omitempty"`
	// An object describing how many times each variant was returned. Variant names are used as properties, and the number of times they were exposed is the corresponding value (i.e. `{ [variantName]: number }`).
	Variants *map[string]int32 `json:"variants,omitempty"`
}

// NewClientMetricsSchemaBucketTogglesValue instantiates a new ClientMetricsSchemaBucketTogglesValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientMetricsSchemaBucketTogglesValue() *ClientMetricsSchemaBucketTogglesValue {
	this := ClientMetricsSchemaBucketTogglesValue{}
	return &this
}

// NewClientMetricsSchemaBucketTogglesValueWithDefaults instantiates a new ClientMetricsSchemaBucketTogglesValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientMetricsSchemaBucketTogglesValueWithDefaults() *ClientMetricsSchemaBucketTogglesValue {
	this := ClientMetricsSchemaBucketTogglesValue{}
	return &this
}

// GetYes returns the Yes field value if set, zero value otherwise.
func (o *ClientMetricsSchemaBucketTogglesValue) GetYes() float32 {
	if o == nil || IsNil(o.Yes) {
		var ret float32
		return ret
	}
	return *o.Yes
}

// GetYesOk returns a tuple with the Yes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientMetricsSchemaBucketTogglesValue) GetYesOk() (*float32, bool) {
	if o == nil || IsNil(o.Yes) {
		return nil, false
	}
	return o.Yes, true
}

// HasYes returns a boolean if a field has been set.
func (o *ClientMetricsSchemaBucketTogglesValue) HasYes() bool {
	if o != nil && !IsNil(o.Yes) {
		return true
	}

	return false
}

// SetYes gets a reference to the given float32 and assigns it to the Yes field.
func (o *ClientMetricsSchemaBucketTogglesValue) SetYes(v float32) {
	o.Yes = &v
}

// GetNo returns the No field value if set, zero value otherwise.
func (o *ClientMetricsSchemaBucketTogglesValue) GetNo() int32 {
	if o == nil || IsNil(o.No) {
		var ret int32
		return ret
	}
	return *o.No
}

// GetNoOk returns a tuple with the No field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientMetricsSchemaBucketTogglesValue) GetNoOk() (*int32, bool) {
	if o == nil || IsNil(o.No) {
		return nil, false
	}
	return o.No, true
}

// HasNo returns a boolean if a field has been set.
func (o *ClientMetricsSchemaBucketTogglesValue) HasNo() bool {
	if o != nil && !IsNil(o.No) {
		return true
	}

	return false
}

// SetNo gets a reference to the given int32 and assigns it to the No field.
func (o *ClientMetricsSchemaBucketTogglesValue) SetNo(v int32) {
	o.No = &v
}

// GetVariants returns the Variants field value if set, zero value otherwise.
func (o *ClientMetricsSchemaBucketTogglesValue) GetVariants() map[string]int32 {
	if o == nil || IsNil(o.Variants) {
		var ret map[string]int32
		return ret
	}
	return *o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientMetricsSchemaBucketTogglesValue) GetVariantsOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.Variants) {
		return nil, false
	}
	return o.Variants, true
}

// HasVariants returns a boolean if a field has been set.
func (o *ClientMetricsSchemaBucketTogglesValue) HasVariants() bool {
	if o != nil && !IsNil(o.Variants) {
		return true
	}

	return false
}

// SetVariants gets a reference to the given map[string]int32 and assigns it to the Variants field.
func (o *ClientMetricsSchemaBucketTogglesValue) SetVariants(v map[string]int32) {
	o.Variants = &v
}

func (o ClientMetricsSchemaBucketTogglesValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientMetricsSchemaBucketTogglesValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Yes) {
		toSerialize["yes"] = o.Yes
	}
	if !IsNil(o.No) {
		toSerialize["no"] = o.No
	}
	if !IsNil(o.Variants) {
		toSerialize["variants"] = o.Variants
	}
	return toSerialize, nil
}

type NullableClientMetricsSchemaBucketTogglesValue struct {
	value *ClientMetricsSchemaBucketTogglesValue
	isSet bool
}

func (v NullableClientMetricsSchemaBucketTogglesValue) Get() *ClientMetricsSchemaBucketTogglesValue {
	return v.value
}

func (v *NullableClientMetricsSchemaBucketTogglesValue) Set(val *ClientMetricsSchemaBucketTogglesValue) {
	v.value = val
	v.isSet = true
}

func (v NullableClientMetricsSchemaBucketTogglesValue) IsSet() bool {
	return v.isSet
}

func (v *NullableClientMetricsSchemaBucketTogglesValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientMetricsSchemaBucketTogglesValue(val *ClientMetricsSchemaBucketTogglesValue) *NullableClientMetricsSchemaBucketTogglesValue {
	return &NullableClientMetricsSchemaBucketTogglesValue{value: val, isSet: true}
}

func (v NullableClientMetricsSchemaBucketTogglesValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientMetricsSchemaBucketTogglesValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
