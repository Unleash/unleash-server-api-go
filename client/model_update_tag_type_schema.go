/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateTagTypeSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTagTypeSchema{}

// UpdateTagTypeSchema The request body for updating a tag type.
type UpdateTagTypeSchema struct {
	// The description of the tag type.
	Description *string `json:"description,omitempty"`
	// The icon of the tag type.
	Icon *string `json:"icon,omitempty"`
}

// NewUpdateTagTypeSchema instantiates a new UpdateTagTypeSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTagTypeSchema() *UpdateTagTypeSchema {
	this := UpdateTagTypeSchema{}
	return &this
}

// NewUpdateTagTypeSchemaWithDefaults instantiates a new UpdateTagTypeSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTagTypeSchemaWithDefaults() *UpdateTagTypeSchema {
	this := UpdateTagTypeSchema{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateTagTypeSchema) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTagTypeSchema) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateTagTypeSchema) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateTagTypeSchema) SetDescription(v string) {
	o.Description = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *UpdateTagTypeSchema) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTagTypeSchema) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *UpdateTagTypeSchema) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *UpdateTagTypeSchema) SetIcon(v string) {
	o.Icon = &v
}

func (o UpdateTagTypeSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTagTypeSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	return toSerialize, nil
}

type NullableUpdateTagTypeSchema struct {
	value *UpdateTagTypeSchema
	isSet bool
}

func (v NullableUpdateTagTypeSchema) Get() *UpdateTagTypeSchema {
	return v.value
}

func (v *NullableUpdateTagTypeSchema) Set(val *UpdateTagTypeSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTagTypeSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTagTypeSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTagTypeSchema(val *UpdateTagTypeSchema) *NullableUpdateTagTypeSchema {
	return &NullableUpdateTagTypeSchema{value: val, isSet: true}
}

func (v NullableUpdateTagTypeSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTagTypeSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


