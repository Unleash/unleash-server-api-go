/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.4.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ProjectRoleUsageSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectRoleUsageSchema{}

// ProjectRoleUsageSchema A collection of projects with counts of users and groups mapped to them with specified roles.
type ProjectRoleUsageSchema struct {
	// A collection of projects with counts of users and groups mapped to them with specified roles.
	Projects []ProjectRoleSchema `json:"projects,omitempty"`
}

// NewProjectRoleUsageSchema instantiates a new ProjectRoleUsageSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectRoleUsageSchema() *ProjectRoleUsageSchema {
	this := ProjectRoleUsageSchema{}
	return &this
}

// NewProjectRoleUsageSchemaWithDefaults instantiates a new ProjectRoleUsageSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectRoleUsageSchemaWithDefaults() *ProjectRoleUsageSchema {
	this := ProjectRoleUsageSchema{}
	return &this
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *ProjectRoleUsageSchema) GetProjects() []ProjectRoleSchema {
	if o == nil || IsNil(o.Projects) {
		var ret []ProjectRoleSchema
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRoleUsageSchema) GetProjectsOk() ([]ProjectRoleSchema, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *ProjectRoleUsageSchema) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []ProjectRoleSchema and assigns it to the Projects field.
func (o *ProjectRoleUsageSchema) SetProjects(v []ProjectRoleSchema) {
	o.Projects = v
}

func (o ProjectRoleUsageSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectRoleUsageSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	return toSerialize, nil
}

type NullableProjectRoleUsageSchema struct {
	value *ProjectRoleUsageSchema
	isSet bool
}

func (v NullableProjectRoleUsageSchema) Get() *ProjectRoleUsageSchema {
	return v.value
}

func (v *NullableProjectRoleUsageSchema) Set(val *ProjectRoleUsageSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectRoleUsageSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectRoleUsageSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectRoleUsageSchema(val *ProjectRoleUsageSchema) *NullableProjectRoleUsageSchema {
	return &NullableProjectRoleUsageSchema{value: val, isSet: true}
}

func (v NullableProjectRoleUsageSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectRoleUsageSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
