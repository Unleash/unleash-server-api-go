/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.4.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ApplicationUsageSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationUsageSchema{}

// ApplicationUsageSchema Data about an project that have been used by applications.
type ApplicationUsageSchema struct {
	// Name of the project
	Project string `json:"project"`
	// Which environments have been accessed in this project.
	Environments []string `json:"environments"`
}

// NewApplicationUsageSchema instantiates a new ApplicationUsageSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationUsageSchema(project string, environments []string) *ApplicationUsageSchema {
	this := ApplicationUsageSchema{}
	this.Project = project
	this.Environments = environments
	return &this
}

// NewApplicationUsageSchemaWithDefaults instantiates a new ApplicationUsageSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationUsageSchemaWithDefaults() *ApplicationUsageSchema {
	this := ApplicationUsageSchema{}
	return &this
}

// GetProject returns the Project field value
func (o *ApplicationUsageSchema) GetProject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *ApplicationUsageSchema) GetProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *ApplicationUsageSchema) SetProject(v string) {
	o.Project = v
}

// GetEnvironments returns the Environments field value
func (o *ApplicationUsageSchema) GetEnvironments() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value
// and a boolean to check if the value has been set.
func (o *ApplicationUsageSchema) GetEnvironmentsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Environments, true
}

// SetEnvironments sets field value
func (o *ApplicationUsageSchema) SetEnvironments(v []string) {
	o.Environments = v
}

func (o ApplicationUsageSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationUsageSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["project"] = o.Project
	toSerialize["environments"] = o.Environments
	return toSerialize, nil
}

type NullableApplicationUsageSchema struct {
	value *ApplicationUsageSchema
	isSet bool
}

func (v NullableApplicationUsageSchema) Get() *ApplicationUsageSchema {
	return v.value
}

func (v *NullableApplicationUsageSchema) Set(val *ApplicationUsageSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationUsageSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationUsageSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationUsageSchema(val *ApplicationUsageSchema) *NullableApplicationUsageSchema {
	return &NullableApplicationUsageSchema{value: val, isSet: true}
}

func (v NullableApplicationUsageSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationUsageSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
