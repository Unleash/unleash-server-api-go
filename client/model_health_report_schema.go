/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.4.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the HealthReportSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthReportSchema{}

// HealthReportSchema A report of the current health of the requested project, with datapoints like counters of currently active, stale, and potentially stale feature toggles.
type HealthReportSchema struct {
	// The project overview version.
	Version int32 `json:"version"`
	// The project's name
	Name string `json:"name"`
	// The project's description
	Description NullableString `json:"description,omitempty"`
	// A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
	DefaultStickiness string `json:"defaultStickiness"`
	// The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
	Mode string `json:"mode"`
	// A limit on the number of features allowed in the project. Null if no limit.
	FeatureLimit NullableFloat32 `json:"featureLimit,omitempty"`
	// The number of users/members in the project.
	Members int32 `json:"members"`
	// The overall [health rating](https://docs.getunleash.io/reference/technical-debt#health-rating) of the project.
	Health int32 `json:"health"`
	// An array containing the names of all the environments configured for the project.
	Environments []ProjectEnvironmentSchema `json:"environments"`
	// An array containing an overview of all the features of the project and their individual status
	Features []FeatureSchema `json:"features"`
	// When the project was last updated.
	UpdatedAt NullableTime `json:"updatedAt,omitempty"`
	// When the project was last updated.
	CreatedAt NullableTime `json:"createdAt,omitempty"`
	// Indicates if the project has been marked as a favorite by the current user requesting the project health overview.
	Favorite      *bool                             `json:"favorite,omitempty"`
	Stats         *ProjectStatsSchema               `json:"stats,omitempty"`
	FeatureNaming *CreateFeatureNamingPatternSchema `json:"featureNaming,omitempty"`
	// The number of potentially stale feature toggles.
	PotentiallyStaleCount float32 `json:"potentiallyStaleCount"`
	// The number of active feature toggles.
	ActiveCount float32 `json:"activeCount"`
	// The number of stale feature toggles.
	StaleCount float32 `json:"staleCount"`
}

// NewHealthReportSchema instantiates a new HealthReportSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthReportSchema(version int32, name string, defaultStickiness string, mode string, members int32, health int32, environments []ProjectEnvironmentSchema, features []FeatureSchema, potentiallyStaleCount float32, activeCount float32, staleCount float32) *HealthReportSchema {
	this := HealthReportSchema{}
	this.Version = version
	this.Name = name
	this.DefaultStickiness = defaultStickiness
	this.Mode = mode
	this.Members = members
	this.Health = health
	this.Environments = environments
	this.Features = features
	this.PotentiallyStaleCount = potentiallyStaleCount
	this.ActiveCount = activeCount
	this.StaleCount = staleCount
	return &this
}

// NewHealthReportSchemaWithDefaults instantiates a new HealthReportSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthReportSchemaWithDefaults() *HealthReportSchema {
	this := HealthReportSchema{}
	return &this
}

// GetVersion returns the Version field value
func (o *HealthReportSchema) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *HealthReportSchema) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *HealthReportSchema) SetVersion(v int32) {
	o.Version = v
}

// GetName returns the Name field value
func (o *HealthReportSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HealthReportSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *HealthReportSchema) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthReportSchema) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthReportSchema) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *HealthReportSchema) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *HealthReportSchema) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *HealthReportSchema) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *HealthReportSchema) UnsetDescription() {
	o.Description.Unset()
}

// GetDefaultStickiness returns the DefaultStickiness field value
func (o *HealthReportSchema) GetDefaultStickiness() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultStickiness
}

// GetDefaultStickinessOk returns a tuple with the DefaultStickiness field value
// and a boolean to check if the value has been set.
func (o *HealthReportSchema) GetDefaultStickinessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultStickiness, true
}

// SetDefaultStickiness sets field value
func (o *HealthReportSchema) SetDefaultStickiness(v string) {
	o.DefaultStickiness = v
}

// GetMode returns the Mode field value
func (o *HealthReportSchema) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *HealthReportSchema) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *HealthReportSchema) SetMode(v string) {
	o.Mode = v
}

// GetFeatureLimit returns the FeatureLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthReportSchema) GetFeatureLimit() float32 {
	if o == nil || IsNil(o.FeatureLimit.Get()) {
		var ret float32
		return ret
	}
	return *o.FeatureLimit.Get()
}

// GetFeatureLimitOk returns a tuple with the FeatureLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthReportSchema) GetFeatureLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FeatureLimit.Get(), o.FeatureLimit.IsSet()
}

// HasFeatureLimit returns a boolean if a field has been set.
func (o *HealthReportSchema) HasFeatureLimit() bool {
	if o != nil && o.FeatureLimit.IsSet() {
		return true
	}

	return false
}

// SetFeatureLimit gets a reference to the given NullableFloat32 and assigns it to the FeatureLimit field.
func (o *HealthReportSchema) SetFeatureLimit(v float32) {
	o.FeatureLimit.Set(&v)
}

// SetFeatureLimitNil sets the value for FeatureLimit to be an explicit nil
func (o *HealthReportSchema) SetFeatureLimitNil() {
	o.FeatureLimit.Set(nil)
}

// UnsetFeatureLimit ensures that no value is present for FeatureLimit, not even an explicit nil
func (o *HealthReportSchema) UnsetFeatureLimit() {
	o.FeatureLimit.Unset()
}

// GetMembers returns the Members field value
func (o *HealthReportSchema) GetMembers() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *HealthReportSchema) GetMembersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Members, true
}

// SetMembers sets field value
func (o *HealthReportSchema) SetMembers(v int32) {
	o.Members = v
}

// GetHealth returns the Health field value
func (o *HealthReportSchema) GetHealth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Health
}

// GetHealthOk returns a tuple with the Health field value
// and a boolean to check if the value has been set.
func (o *HealthReportSchema) GetHealthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Health, true
}

// SetHealth sets field value
func (o *HealthReportSchema) SetHealth(v int32) {
	o.Health = v
}

// GetEnvironments returns the Environments field value
func (o *HealthReportSchema) GetEnvironments() []ProjectEnvironmentSchema {
	if o == nil {
		var ret []ProjectEnvironmentSchema
		return ret
	}

	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value
// and a boolean to check if the value has been set.
func (o *HealthReportSchema) GetEnvironmentsOk() ([]ProjectEnvironmentSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Environments, true
}

// SetEnvironments sets field value
func (o *HealthReportSchema) SetEnvironments(v []ProjectEnvironmentSchema) {
	o.Environments = v
}

// GetFeatures returns the Features field value
func (o *HealthReportSchema) GetFeatures() []FeatureSchema {
	if o == nil {
		var ret []FeatureSchema
		return ret
	}

	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value
// and a boolean to check if the value has been set.
func (o *HealthReportSchema) GetFeaturesOk() ([]FeatureSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Features, true
}

// SetFeatures sets field value
func (o *HealthReportSchema) SetFeatures(v []FeatureSchema) {
	o.Features = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthReportSchema) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthReportSchema) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *HealthReportSchema) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableTime and assigns it to the UpdatedAt field.
func (o *HealthReportSchema) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}

// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *HealthReportSchema) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *HealthReportSchema) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthReportSchema) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthReportSchema) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *HealthReportSchema) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableTime and assigns it to the CreatedAt field.
func (o *HealthReportSchema) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *HealthReportSchema) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *HealthReportSchema) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *HealthReportSchema) GetFavorite() bool {
	if o == nil || IsNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthReportSchema) GetFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *HealthReportSchema) HasFavorite() bool {
	if o != nil && !IsNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *HealthReportSchema) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *HealthReportSchema) GetStats() ProjectStatsSchema {
	if o == nil || IsNil(o.Stats) {
		var ret ProjectStatsSchema
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthReportSchema) GetStatsOk() (*ProjectStatsSchema, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *HealthReportSchema) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given ProjectStatsSchema and assigns it to the Stats field.
func (o *HealthReportSchema) SetStats(v ProjectStatsSchema) {
	o.Stats = &v
}

// GetFeatureNaming returns the FeatureNaming field value if set, zero value otherwise.
func (o *HealthReportSchema) GetFeatureNaming() CreateFeatureNamingPatternSchema {
	if o == nil || IsNil(o.FeatureNaming) {
		var ret CreateFeatureNamingPatternSchema
		return ret
	}
	return *o.FeatureNaming
}

// GetFeatureNamingOk returns a tuple with the FeatureNaming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthReportSchema) GetFeatureNamingOk() (*CreateFeatureNamingPatternSchema, bool) {
	if o == nil || IsNil(o.FeatureNaming) {
		return nil, false
	}
	return o.FeatureNaming, true
}

// HasFeatureNaming returns a boolean if a field has been set.
func (o *HealthReportSchema) HasFeatureNaming() bool {
	if o != nil && !IsNil(o.FeatureNaming) {
		return true
	}

	return false
}

// SetFeatureNaming gets a reference to the given CreateFeatureNamingPatternSchema and assigns it to the FeatureNaming field.
func (o *HealthReportSchema) SetFeatureNaming(v CreateFeatureNamingPatternSchema) {
	o.FeatureNaming = &v
}

// GetPotentiallyStaleCount returns the PotentiallyStaleCount field value
func (o *HealthReportSchema) GetPotentiallyStaleCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PotentiallyStaleCount
}

// GetPotentiallyStaleCountOk returns a tuple with the PotentiallyStaleCount field value
// and a boolean to check if the value has been set.
func (o *HealthReportSchema) GetPotentiallyStaleCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PotentiallyStaleCount, true
}

// SetPotentiallyStaleCount sets field value
func (o *HealthReportSchema) SetPotentiallyStaleCount(v float32) {
	o.PotentiallyStaleCount = v
}

// GetActiveCount returns the ActiveCount field value
func (o *HealthReportSchema) GetActiveCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ActiveCount
}

// GetActiveCountOk returns a tuple with the ActiveCount field value
// and a boolean to check if the value has been set.
func (o *HealthReportSchema) GetActiveCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveCount, true
}

// SetActiveCount sets field value
func (o *HealthReportSchema) SetActiveCount(v float32) {
	o.ActiveCount = v
}

// GetStaleCount returns the StaleCount field value
func (o *HealthReportSchema) GetStaleCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.StaleCount
}

// GetStaleCountOk returns a tuple with the StaleCount field value
// and a boolean to check if the value has been set.
func (o *HealthReportSchema) GetStaleCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StaleCount, true
}

// SetStaleCount sets field value
func (o *HealthReportSchema) SetStaleCount(v float32) {
	o.StaleCount = v
}

func (o HealthReportSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthReportSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["name"] = o.Name
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["defaultStickiness"] = o.DefaultStickiness
	toSerialize["mode"] = o.Mode
	if o.FeatureLimit.IsSet() {
		toSerialize["featureLimit"] = o.FeatureLimit.Get()
	}
	toSerialize["members"] = o.Members
	toSerialize["health"] = o.Health
	toSerialize["environments"] = o.Environments
	toSerialize["features"] = o.Features
	if o.UpdatedAt.IsSet() {
		toSerialize["updatedAt"] = o.UpdatedAt.Get()
	}
	if o.CreatedAt.IsSet() {
		toSerialize["createdAt"] = o.CreatedAt.Get()
	}
	if !IsNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	if !IsNil(o.FeatureNaming) {
		toSerialize["featureNaming"] = o.FeatureNaming
	}
	toSerialize["potentiallyStaleCount"] = o.PotentiallyStaleCount
	toSerialize["activeCount"] = o.ActiveCount
	toSerialize["staleCount"] = o.StaleCount
	return toSerialize, nil
}

type NullableHealthReportSchema struct {
	value *HealthReportSchema
	isSet bool
}

func (v NullableHealthReportSchema) Get() *HealthReportSchema {
	return v.value
}

func (v *NullableHealthReportSchema) Set(val *HealthReportSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthReportSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthReportSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthReportSchema(val *HealthReportSchema) *NullableHealthReportSchema {
	return &NullableHealthReportSchema{value: val, isSet: true}
}

func (v NullableHealthReportSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthReportSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
