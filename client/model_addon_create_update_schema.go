/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the AddonCreateUpdateSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddonCreateUpdateSchema{}

// AddonCreateUpdateSchema Data required to create or update an [Unleash addon](https://docs.getunleash.io/reference/addons) instance.
type AddonCreateUpdateSchema struct {
	// The addon provider, such as \"webhook\" or \"slack\". This string is **case sensitive** and maps to the provider's `name` property.  The list of all supported providers and their parameters for a specific Unleash instance can be found by making a GET request to the `api/admin/addons` endpoint: the `providers` property of that response will contain all available providers.  The default set of providers can be found in the [addons reference documentation](https://docs.getunleash.io/reference/addons). The default supported options are: - `datadog` for [Datadog](https://docs.getunleash.io/reference/addons/datadog) - `slack` for [Slack](https://docs.getunleash.io/reference/addons/slack) - `teams` for [Microsoft Teams](https://docs.getunleash.io/reference/addons/teams) - `webhook` for [webhooks](https://docs.getunleash.io/reference/addons/webhook)  The provider you choose for your addon dictates what properties the `parameters` object needs. Refer to the documentation for each provider for more information.
	Provider string `json:"provider"`
	// A description of the addon.
	Description *string `json:"description,omitempty"`
	// Whether the addon should be enabled or not.
	Enabled bool `json:"enabled"`
	// Parameters for the addon provider. This object has different required and optional properties depending on the provider you choose. Consult the documentation for details.
	Parameters map[string]interface{} `json:"parameters"`
	// The event types that will trigger this specific addon.
	Events []string `json:"events"`
	// The projects that this addon will listen to events from. An empty list means it will listen to events from **all** projects.
	Projects []string `json:"projects,omitempty"`
	// The list of environments that this addon will listen to events from. An empty list means it will listen to events from **all** environments.
	Environments []string `json:"environments,omitempty"`
}

// NewAddonCreateUpdateSchema instantiates a new AddonCreateUpdateSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonCreateUpdateSchema(provider string, enabled bool, parameters map[string]interface{}, events []string) *AddonCreateUpdateSchema {
	this := AddonCreateUpdateSchema{}
	this.Provider = provider
	this.Enabled = enabled
	this.Parameters = parameters
	this.Events = events
	return &this
}

// NewAddonCreateUpdateSchemaWithDefaults instantiates a new AddonCreateUpdateSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonCreateUpdateSchemaWithDefaults() *AddonCreateUpdateSchema {
	this := AddonCreateUpdateSchema{}
	return &this
}

// GetProvider returns the Provider field value
func (o *AddonCreateUpdateSchema) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *AddonCreateUpdateSchema) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *AddonCreateUpdateSchema) SetProvider(v string) {
	o.Provider = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddonCreateUpdateSchema) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonCreateUpdateSchema) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddonCreateUpdateSchema) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddonCreateUpdateSchema) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *AddonCreateUpdateSchema) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddonCreateUpdateSchema) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddonCreateUpdateSchema) SetEnabled(v bool) {
	o.Enabled = v
}

// GetParameters returns the Parameters field value
func (o *AddonCreateUpdateSchema) GetParameters() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value
// and a boolean to check if the value has been set.
func (o *AddonCreateUpdateSchema) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// SetParameters sets field value
func (o *AddonCreateUpdateSchema) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetEvents returns the Events field value
func (o *AddonCreateUpdateSchema) GetEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *AddonCreateUpdateSchema) GetEventsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *AddonCreateUpdateSchema) SetEvents(v []string) {
	o.Events = v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *AddonCreateUpdateSchema) GetProjects() []string {
	if o == nil || IsNil(o.Projects) {
		var ret []string
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonCreateUpdateSchema) GetProjectsOk() ([]string, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *AddonCreateUpdateSchema) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []string and assigns it to the Projects field.
func (o *AddonCreateUpdateSchema) SetProjects(v []string) {
	o.Projects = v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *AddonCreateUpdateSchema) GetEnvironments() []string {
	if o == nil || IsNil(o.Environments) {
		var ret []string
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonCreateUpdateSchema) GetEnvironmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *AddonCreateUpdateSchema) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *AddonCreateUpdateSchema) SetEnvironments(v []string) {
	o.Environments = v
}

func (o AddonCreateUpdateSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonCreateUpdateSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["provider"] = o.Provider
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["parameters"] = o.Parameters
	toSerialize["events"] = o.Events
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	if !IsNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	return toSerialize, nil
}

type NullableAddonCreateUpdateSchema struct {
	value *AddonCreateUpdateSchema
	isSet bool
}

func (v NullableAddonCreateUpdateSchema) Get() *AddonCreateUpdateSchema {
	return v.value
}

func (v *NullableAddonCreateUpdateSchema) Set(val *AddonCreateUpdateSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonCreateUpdateSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonCreateUpdateSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonCreateUpdateSchema(val *AddonCreateUpdateSchema) *NullableAddonCreateUpdateSchema {
	return &NullableAddonCreateUpdateSchema{value: val, isSet: true}
}

func (v NullableAddonCreateUpdateSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonCreateUpdateSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
