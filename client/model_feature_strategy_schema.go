/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the FeatureStrategySchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureStrategySchema{}

// FeatureStrategySchema A single activation strategy configuration schema for a feature
type FeatureStrategySchema struct {
	// A uuid for the feature strategy
	Id *string `json:"id,omitempty"`
	// The name or type of strategy
	Name string `json:"name"`
	// A descriptive title for the strategy
	Title NullableString `json:"title,omitempty"`
	// A toggle to disable the strategy. defaults to false. Disabled strategies are not evaluated or returned to the SDKs
	Disabled NullableBool `json:"disabled,omitempty"`
	// The name or feature the strategy is attached to
	FeatureName *string `json:"featureName,omitempty"`
	// The order of the strategy in the list
	SortOrder *float32 `json:"sortOrder,omitempty"`
	// A list of segment ids attached to the strategy
	Segments []float32 `json:"segments,omitempty"`
	// A list of the constraints attached to the strategy
	Constraints []ConstraintSchema `json:"constraints,omitempty"`
	Parameters  *map[string]string `json:"parameters,omitempty"`
}

// NewFeatureStrategySchema instantiates a new FeatureStrategySchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureStrategySchema(name string) *FeatureStrategySchema {
	this := FeatureStrategySchema{}
	this.Name = name
	return &this
}

// NewFeatureStrategySchemaWithDefaults instantiates a new FeatureStrategySchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureStrategySchemaWithDefaults() *FeatureStrategySchema {
	this := FeatureStrategySchema{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FeatureStrategySchema) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureStrategySchema) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FeatureStrategySchema) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FeatureStrategySchema) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *FeatureStrategySchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FeatureStrategySchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FeatureStrategySchema) SetName(v string) {
	o.Name = v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureStrategySchema) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureStrategySchema) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *FeatureStrategySchema) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *FeatureStrategySchema) SetTitle(v string) {
	o.Title.Set(&v)
}

// SetTitleNil sets the value for Title to be an explicit nil
func (o *FeatureStrategySchema) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *FeatureStrategySchema) UnsetTitle() {
	o.Title.Unset()
}

// GetDisabled returns the Disabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureStrategySchema) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Disabled.Get()
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureStrategySchema) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Disabled.Get(), o.Disabled.IsSet()
}

// HasDisabled returns a boolean if a field has been set.
func (o *FeatureStrategySchema) HasDisabled() bool {
	if o != nil && o.Disabled.IsSet() {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given NullableBool and assigns it to the Disabled field.
func (o *FeatureStrategySchema) SetDisabled(v bool) {
	o.Disabled.Set(&v)
}

// SetDisabledNil sets the value for Disabled to be an explicit nil
func (o *FeatureStrategySchema) SetDisabledNil() {
	o.Disabled.Set(nil)
}

// UnsetDisabled ensures that no value is present for Disabled, not even an explicit nil
func (o *FeatureStrategySchema) UnsetDisabled() {
	o.Disabled.Unset()
}

// GetFeatureName returns the FeatureName field value if set, zero value otherwise.
func (o *FeatureStrategySchema) GetFeatureName() string {
	if o == nil || IsNil(o.FeatureName) {
		var ret string
		return ret
	}
	return *o.FeatureName
}

// GetFeatureNameOk returns a tuple with the FeatureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureStrategySchema) GetFeatureNameOk() (*string, bool) {
	if o == nil || IsNil(o.FeatureName) {
		return nil, false
	}
	return o.FeatureName, true
}

// HasFeatureName returns a boolean if a field has been set.
func (o *FeatureStrategySchema) HasFeatureName() bool {
	if o != nil && !IsNil(o.FeatureName) {
		return true
	}

	return false
}

// SetFeatureName gets a reference to the given string and assigns it to the FeatureName field.
func (o *FeatureStrategySchema) SetFeatureName(v string) {
	o.FeatureName = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *FeatureStrategySchema) GetSortOrder() float32 {
	if o == nil || IsNil(o.SortOrder) {
		var ret float32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureStrategySchema) GetSortOrderOk() (*float32, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *FeatureStrategySchema) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given float32 and assigns it to the SortOrder field.
func (o *FeatureStrategySchema) SetSortOrder(v float32) {
	o.SortOrder = &v
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *FeatureStrategySchema) GetSegments() []float32 {
	if o == nil || IsNil(o.Segments) {
		var ret []float32
		return ret
	}
	return o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureStrategySchema) GetSegmentsOk() ([]float32, bool) {
	if o == nil || IsNil(o.Segments) {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *FeatureStrategySchema) HasSegments() bool {
	if o != nil && !IsNil(o.Segments) {
		return true
	}

	return false
}

// SetSegments gets a reference to the given []float32 and assigns it to the Segments field.
func (o *FeatureStrategySchema) SetSegments(v []float32) {
	o.Segments = v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *FeatureStrategySchema) GetConstraints() []ConstraintSchema {
	if o == nil || IsNil(o.Constraints) {
		var ret []ConstraintSchema
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureStrategySchema) GetConstraintsOk() ([]ConstraintSchema, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *FeatureStrategySchema) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []ConstraintSchema and assigns it to the Constraints field.
func (o *FeatureStrategySchema) SetConstraints(v []ConstraintSchema) {
	o.Constraints = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *FeatureStrategySchema) GetParameters() map[string]string {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]string
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureStrategySchema) GetParametersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *FeatureStrategySchema) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]string and assigns it to the Parameters field.
func (o *FeatureStrategySchema) SetParameters(v map[string]string) {
	o.Parameters = &v
}

func (o FeatureStrategySchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureStrategySchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Disabled.IsSet() {
		toSerialize["disabled"] = o.Disabled.Get()
	}
	if !IsNil(o.FeatureName) {
		toSerialize["featureName"] = o.FeatureName
	}
	if !IsNil(o.SortOrder) {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if !IsNil(o.Segments) {
		toSerialize["segments"] = o.Segments
	}
	if !IsNil(o.Constraints) {
		toSerialize["constraints"] = o.Constraints
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

type NullableFeatureStrategySchema struct {
	value *FeatureStrategySchema
	isSet bool
}

func (v NullableFeatureStrategySchema) Get() *FeatureStrategySchema {
	return v.value
}

func (v *NullableFeatureStrategySchema) Set(val *FeatureStrategySchema) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureStrategySchema) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureStrategySchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureStrategySchema(val *FeatureStrategySchema) *NullableFeatureStrategySchema {
	return &NullableFeatureStrategySchema{value: val, isSet: true}
}

func (v NullableFeatureStrategySchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureStrategySchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
