/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.4.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// CreateRoleWithPermissionsSchema - A write model for the custom role and permissions to allow Unleash to decide what actions a role holder is allowed to perform
type CreateRoleWithPermissionsSchema struct {
	CreateRoleWithPermissionsSchemaOneOf  *CreateRoleWithPermissionsSchemaOneOf
	CreateRoleWithPermissionsSchemaOneOf1 *CreateRoleWithPermissionsSchemaOneOf1
}

// CreateRoleWithPermissionsSchemaOneOfAsCreateRoleWithPermissionsSchema is a convenience function that returns CreateRoleWithPermissionsSchemaOneOf wrapped in CreateRoleWithPermissionsSchema
func CreateRoleWithPermissionsSchemaOneOfAsCreateRoleWithPermissionsSchema(v *CreateRoleWithPermissionsSchemaOneOf) CreateRoleWithPermissionsSchema {
	return CreateRoleWithPermissionsSchema{
		CreateRoleWithPermissionsSchemaOneOf: v,
	}
}

// CreateRoleWithPermissionsSchemaOneOf1AsCreateRoleWithPermissionsSchema is a convenience function that returns CreateRoleWithPermissionsSchemaOneOf1 wrapped in CreateRoleWithPermissionsSchema
func CreateRoleWithPermissionsSchemaOneOf1AsCreateRoleWithPermissionsSchema(v *CreateRoleWithPermissionsSchemaOneOf1) CreateRoleWithPermissionsSchema {
	return CreateRoleWithPermissionsSchema{
		CreateRoleWithPermissionsSchemaOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateRoleWithPermissionsSchema) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateRoleWithPermissionsSchemaOneOf
	err = newStrictDecoder(data).Decode(&dst.CreateRoleWithPermissionsSchemaOneOf)
	if err == nil {
		jsonCreateRoleWithPermissionsSchemaOneOf, _ := json.Marshal(dst.CreateRoleWithPermissionsSchemaOneOf)
		if string(jsonCreateRoleWithPermissionsSchemaOneOf) == "{}" { // empty struct
			dst.CreateRoleWithPermissionsSchemaOneOf = nil
		} else {
			match++
		}
	} else {
		dst.CreateRoleWithPermissionsSchemaOneOf = nil
	}

	// try to unmarshal data into CreateRoleWithPermissionsSchemaOneOf1
	err = newStrictDecoder(data).Decode(&dst.CreateRoleWithPermissionsSchemaOneOf1)
	if err == nil {
		jsonCreateRoleWithPermissionsSchemaOneOf1, _ := json.Marshal(dst.CreateRoleWithPermissionsSchemaOneOf1)
		if string(jsonCreateRoleWithPermissionsSchemaOneOf1) == "{}" { // empty struct
			dst.CreateRoleWithPermissionsSchemaOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.CreateRoleWithPermissionsSchemaOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateRoleWithPermissionsSchemaOneOf = nil
		dst.CreateRoleWithPermissionsSchemaOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateRoleWithPermissionsSchema)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateRoleWithPermissionsSchema)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateRoleWithPermissionsSchema) MarshalJSON() ([]byte, error) {
	if src.CreateRoleWithPermissionsSchemaOneOf != nil {
		return json.Marshal(&src.CreateRoleWithPermissionsSchemaOneOf)
	}

	if src.CreateRoleWithPermissionsSchemaOneOf1 != nil {
		return json.Marshal(&src.CreateRoleWithPermissionsSchemaOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateRoleWithPermissionsSchema) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateRoleWithPermissionsSchemaOneOf != nil {
		return obj.CreateRoleWithPermissionsSchemaOneOf
	}

	if obj.CreateRoleWithPermissionsSchemaOneOf1 != nil {
		return obj.CreateRoleWithPermissionsSchemaOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableCreateRoleWithPermissionsSchema struct {
	value *CreateRoleWithPermissionsSchema
	isSet bool
}

func (v NullableCreateRoleWithPermissionsSchema) Get() *CreateRoleWithPermissionsSchema {
	return v.value
}

func (v *NullableCreateRoleWithPermissionsSchema) Set(val *CreateRoleWithPermissionsSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRoleWithPermissionsSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRoleWithPermissionsSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRoleWithPermissionsSchema(val *CreateRoleWithPermissionsSchema) *NullableCreateRoleWithPermissionsSchema {
	return &NullableCreateRoleWithPermissionsSchema{value: val, isSet: true}
}

func (v NullableCreateRoleWithPermissionsSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRoleWithPermissionsSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
