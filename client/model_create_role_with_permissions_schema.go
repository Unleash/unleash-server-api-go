/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// CreateRoleWithPermissionsSchema A write model for the custom role and permissions to allow Unleash to decide what actions a role holder is allowed to perform
type CreateRoleWithPermissionsSchema struct {
	CreateRoleWithPermissionsSchemaAnyOf  *CreateRoleWithPermissionsSchemaAnyOf
	CreateRoleWithPermissionsSchemaAnyOf1 *CreateRoleWithPermissionsSchemaAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CreateRoleWithPermissionsSchema) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into CreateRoleWithPermissionsSchemaAnyOf
	err = json.Unmarshal(data, &dst.CreateRoleWithPermissionsSchemaAnyOf)
	if err == nil {
		jsonCreateRoleWithPermissionsSchemaAnyOf, _ := json.Marshal(dst.CreateRoleWithPermissionsSchemaAnyOf)
		if string(jsonCreateRoleWithPermissionsSchemaAnyOf) == "{}" { // empty struct
			dst.CreateRoleWithPermissionsSchemaAnyOf = nil
		} else {
			return nil // data stored in dst.CreateRoleWithPermissionsSchemaAnyOf, return on the first match
		}
	} else {
		dst.CreateRoleWithPermissionsSchemaAnyOf = nil
	}

	// try to unmarshal JSON data into CreateRoleWithPermissionsSchemaAnyOf1
	err = json.Unmarshal(data, &dst.CreateRoleWithPermissionsSchemaAnyOf1)
	if err == nil {
		jsonCreateRoleWithPermissionsSchemaAnyOf1, _ := json.Marshal(dst.CreateRoleWithPermissionsSchemaAnyOf1)
		if string(jsonCreateRoleWithPermissionsSchemaAnyOf1) == "{}" { // empty struct
			dst.CreateRoleWithPermissionsSchemaAnyOf1 = nil
		} else {
			return nil // data stored in dst.CreateRoleWithPermissionsSchemaAnyOf1, return on the first match
		}
	} else {
		dst.CreateRoleWithPermissionsSchemaAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CreateRoleWithPermissionsSchema)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *CreateRoleWithPermissionsSchema) MarshalJSON() ([]byte, error) {
	if src.CreateRoleWithPermissionsSchemaAnyOf != nil {
		return json.Marshal(&src.CreateRoleWithPermissionsSchemaAnyOf)
	}

	if src.CreateRoleWithPermissionsSchemaAnyOf1 != nil {
		return json.Marshal(&src.CreateRoleWithPermissionsSchemaAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableCreateRoleWithPermissionsSchema struct {
	value *CreateRoleWithPermissionsSchema
	isSet bool
}

func (v NullableCreateRoleWithPermissionsSchema) Get() *CreateRoleWithPermissionsSchema {
	return v.value
}

func (v *NullableCreateRoleWithPermissionsSchema) Set(val *CreateRoleWithPermissionsSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRoleWithPermissionsSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRoleWithPermissionsSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRoleWithPermissionsSchema(val *CreateRoleWithPermissionsSchema) *NullableCreateRoleWithPermissionsSchema {
	return &NullableCreateRoleWithPermissionsSchema{value: val, isSet: true}
}

func (v NullableCreateRoleWithPermissionsSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRoleWithPermissionsSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
