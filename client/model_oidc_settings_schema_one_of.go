/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.7.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the OidcSettingsSchemaOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OidcSettingsSchemaOneOf{}

// OidcSettingsSchemaOneOf struct for OidcSettingsSchemaOneOf
type OidcSettingsSchemaOneOf struct {
	// Whether to enable or disable OpenID Connect for this instance
	Enabled bool `json:"enabled"`
	// The [.well-known OpenID discover URL](https://swagger.io/docs/specification/authentication/openid-connect-discovery/)
	DiscoverUrl *string `json:"discoverUrl,omitempty"`
	// The OIDC client ID of this application.
	ClientId string `json:"clientId"`
	// Shared secret from OpenID server. Used to authenticate login requests
	Secret string `json:"secret"`
	// Auto create users based on email addresses from login tokens
	AutoCreate *bool `json:"autoCreate,omitempty"`
	// Support Single sign out when user clicks logout in Unleash. If `true` user is signed out of all OpenID Connect sessions against the clientId they may have active
	EnableSingleSignOut *bool `json:"enableSingleSignOut,omitempty"`
	// [Default role](https://docs.getunleash.io/reference/rbac#standard-roles) granted to users auto-created from email. Only relevant if autoCreate is `true`
	DefaultRootRole *string `json:"defaultRootRole,omitempty"`
	// Assign this root role to auto created users. Should be a role ID and takes precedence over `defaultRootRole`.
	DefaultRootRoleId *float32 `json:"defaultRootRoleId,omitempty"`
	// Comma separated list of email domains that are automatically approved for an account in the server. Only relevant if autoCreate is `true`
	EmailDomains *string `json:"emailDomains,omitempty"`
	// Authentication Context Class Reference, used to request extra values in the acr claim returned from the server. If multiple values are required, they should be space separated.   Consult [the OIDC reference](https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint) for more information
	AcrValues *string `json:"acrValues,omitempty"`
	// The signing algorithm used to sign our token. Refer to the [JWT signatures](https://jwt.io/introduction) documentation for more information.
	IdTokenSigningAlgorithm *string `json:"idTokenSigningAlgorithm,omitempty"`
	// Should we enable group syncing. Refer to the documentation [Group syncing](https://docs.getunleash.io/how-to/how-to-set-up-group-sso-sync)
	EnableGroupSyncing *bool `json:"enableGroupSyncing,omitempty"`
	// Specifies the path in the OIDC token response to read which groups the user belongs to from.
	GroupJsonPath *string `json:"groupJsonPath,omitempty"`
	// When enabled Unleash will also request the 'groups' scope as part of the login request.
	AddGroupsScope       *bool `json:"addGroupsScope,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OidcSettingsSchemaOneOf OidcSettingsSchemaOneOf

// NewOidcSettingsSchemaOneOf instantiates a new OidcSettingsSchemaOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOidcSettingsSchemaOneOf(enabled bool, clientId string, secret string) *OidcSettingsSchemaOneOf {
	this := OidcSettingsSchemaOneOf{}
	this.Enabled = enabled
	this.ClientId = clientId
	this.Secret = secret
	return &this
}

// NewOidcSettingsSchemaOneOfWithDefaults instantiates a new OidcSettingsSchemaOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOidcSettingsSchemaOneOfWithDefaults() *OidcSettingsSchemaOneOf {
	this := OidcSettingsSchemaOneOf{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *OidcSettingsSchemaOneOf) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *OidcSettingsSchemaOneOf) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *OidcSettingsSchemaOneOf) SetEnabled(v bool) {
	o.Enabled = v
}

// GetDiscoverUrl returns the DiscoverUrl field value if set, zero value otherwise.
func (o *OidcSettingsSchemaOneOf) GetDiscoverUrl() string {
	if o == nil || IsNil(o.DiscoverUrl) {
		var ret string
		return ret
	}
	return *o.DiscoverUrl
}

// GetDiscoverUrlOk returns a tuple with the DiscoverUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcSettingsSchemaOneOf) GetDiscoverUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoverUrl) {
		return nil, false
	}
	return o.DiscoverUrl, true
}

// HasDiscoverUrl returns a boolean if a field has been set.
func (o *OidcSettingsSchemaOneOf) HasDiscoverUrl() bool {
	if o != nil && !IsNil(o.DiscoverUrl) {
		return true
	}

	return false
}

// SetDiscoverUrl gets a reference to the given string and assigns it to the DiscoverUrl field.
func (o *OidcSettingsSchemaOneOf) SetDiscoverUrl(v string) {
	o.DiscoverUrl = &v
}

// GetClientId returns the ClientId field value
func (o *OidcSettingsSchemaOneOf) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *OidcSettingsSchemaOneOf) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *OidcSettingsSchemaOneOf) SetClientId(v string) {
	o.ClientId = v
}

// GetSecret returns the Secret field value
func (o *OidcSettingsSchemaOneOf) GetSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *OidcSettingsSchemaOneOf) GetSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *OidcSettingsSchemaOneOf) SetSecret(v string) {
	o.Secret = v
}

// GetAutoCreate returns the AutoCreate field value if set, zero value otherwise.
func (o *OidcSettingsSchemaOneOf) GetAutoCreate() bool {
	if o == nil || IsNil(o.AutoCreate) {
		var ret bool
		return ret
	}
	return *o.AutoCreate
}

// GetAutoCreateOk returns a tuple with the AutoCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcSettingsSchemaOneOf) GetAutoCreateOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCreate) {
		return nil, false
	}
	return o.AutoCreate, true
}

// HasAutoCreate returns a boolean if a field has been set.
func (o *OidcSettingsSchemaOneOf) HasAutoCreate() bool {
	if o != nil && !IsNil(o.AutoCreate) {
		return true
	}

	return false
}

// SetAutoCreate gets a reference to the given bool and assigns it to the AutoCreate field.
func (o *OidcSettingsSchemaOneOf) SetAutoCreate(v bool) {
	o.AutoCreate = &v
}

// GetEnableSingleSignOut returns the EnableSingleSignOut field value if set, zero value otherwise.
func (o *OidcSettingsSchemaOneOf) GetEnableSingleSignOut() bool {
	if o == nil || IsNil(o.EnableSingleSignOut) {
		var ret bool
		return ret
	}
	return *o.EnableSingleSignOut
}

// GetEnableSingleSignOutOk returns a tuple with the EnableSingleSignOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcSettingsSchemaOneOf) GetEnableSingleSignOutOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSingleSignOut) {
		return nil, false
	}
	return o.EnableSingleSignOut, true
}

// HasEnableSingleSignOut returns a boolean if a field has been set.
func (o *OidcSettingsSchemaOneOf) HasEnableSingleSignOut() bool {
	if o != nil && !IsNil(o.EnableSingleSignOut) {
		return true
	}

	return false
}

// SetEnableSingleSignOut gets a reference to the given bool and assigns it to the EnableSingleSignOut field.
func (o *OidcSettingsSchemaOneOf) SetEnableSingleSignOut(v bool) {
	o.EnableSingleSignOut = &v
}

// GetDefaultRootRole returns the DefaultRootRole field value if set, zero value otherwise.
func (o *OidcSettingsSchemaOneOf) GetDefaultRootRole() string {
	if o == nil || IsNil(o.DefaultRootRole) {
		var ret string
		return ret
	}
	return *o.DefaultRootRole
}

// GetDefaultRootRoleOk returns a tuple with the DefaultRootRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcSettingsSchemaOneOf) GetDefaultRootRoleOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultRootRole) {
		return nil, false
	}
	return o.DefaultRootRole, true
}

// HasDefaultRootRole returns a boolean if a field has been set.
func (o *OidcSettingsSchemaOneOf) HasDefaultRootRole() bool {
	if o != nil && !IsNil(o.DefaultRootRole) {
		return true
	}

	return false
}

// SetDefaultRootRole gets a reference to the given string and assigns it to the DefaultRootRole field.
func (o *OidcSettingsSchemaOneOf) SetDefaultRootRole(v string) {
	o.DefaultRootRole = &v
}

// GetDefaultRootRoleId returns the DefaultRootRoleId field value if set, zero value otherwise.
func (o *OidcSettingsSchemaOneOf) GetDefaultRootRoleId() float32 {
	if o == nil || IsNil(o.DefaultRootRoleId) {
		var ret float32
		return ret
	}
	return *o.DefaultRootRoleId
}

// GetDefaultRootRoleIdOk returns a tuple with the DefaultRootRoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcSettingsSchemaOneOf) GetDefaultRootRoleIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultRootRoleId) {
		return nil, false
	}
	return o.DefaultRootRoleId, true
}

// HasDefaultRootRoleId returns a boolean if a field has been set.
func (o *OidcSettingsSchemaOneOf) HasDefaultRootRoleId() bool {
	if o != nil && !IsNil(o.DefaultRootRoleId) {
		return true
	}

	return false
}

// SetDefaultRootRoleId gets a reference to the given float32 and assigns it to the DefaultRootRoleId field.
func (o *OidcSettingsSchemaOneOf) SetDefaultRootRoleId(v float32) {
	o.DefaultRootRoleId = &v
}

// GetEmailDomains returns the EmailDomains field value if set, zero value otherwise.
func (o *OidcSettingsSchemaOneOf) GetEmailDomains() string {
	if o == nil || IsNil(o.EmailDomains) {
		var ret string
		return ret
	}
	return *o.EmailDomains
}

// GetEmailDomainsOk returns a tuple with the EmailDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcSettingsSchemaOneOf) GetEmailDomainsOk() (*string, bool) {
	if o == nil || IsNil(o.EmailDomains) {
		return nil, false
	}
	return o.EmailDomains, true
}

// HasEmailDomains returns a boolean if a field has been set.
func (o *OidcSettingsSchemaOneOf) HasEmailDomains() bool {
	if o != nil && !IsNil(o.EmailDomains) {
		return true
	}

	return false
}

// SetEmailDomains gets a reference to the given string and assigns it to the EmailDomains field.
func (o *OidcSettingsSchemaOneOf) SetEmailDomains(v string) {
	o.EmailDomains = &v
}

// GetAcrValues returns the AcrValues field value if set, zero value otherwise.
func (o *OidcSettingsSchemaOneOf) GetAcrValues() string {
	if o == nil || IsNil(o.AcrValues) {
		var ret string
		return ret
	}
	return *o.AcrValues
}

// GetAcrValuesOk returns a tuple with the AcrValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcSettingsSchemaOneOf) GetAcrValuesOk() (*string, bool) {
	if o == nil || IsNil(o.AcrValues) {
		return nil, false
	}
	return o.AcrValues, true
}

// HasAcrValues returns a boolean if a field has been set.
func (o *OidcSettingsSchemaOneOf) HasAcrValues() bool {
	if o != nil && !IsNil(o.AcrValues) {
		return true
	}

	return false
}

// SetAcrValues gets a reference to the given string and assigns it to the AcrValues field.
func (o *OidcSettingsSchemaOneOf) SetAcrValues(v string) {
	o.AcrValues = &v
}

// GetIdTokenSigningAlgorithm returns the IdTokenSigningAlgorithm field value if set, zero value otherwise.
func (o *OidcSettingsSchemaOneOf) GetIdTokenSigningAlgorithm() string {
	if o == nil || IsNil(o.IdTokenSigningAlgorithm) {
		var ret string
		return ret
	}
	return *o.IdTokenSigningAlgorithm
}

// GetIdTokenSigningAlgorithmOk returns a tuple with the IdTokenSigningAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcSettingsSchemaOneOf) GetIdTokenSigningAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.IdTokenSigningAlgorithm) {
		return nil, false
	}
	return o.IdTokenSigningAlgorithm, true
}

// HasIdTokenSigningAlgorithm returns a boolean if a field has been set.
func (o *OidcSettingsSchemaOneOf) HasIdTokenSigningAlgorithm() bool {
	if o != nil && !IsNil(o.IdTokenSigningAlgorithm) {
		return true
	}

	return false
}

// SetIdTokenSigningAlgorithm gets a reference to the given string and assigns it to the IdTokenSigningAlgorithm field.
func (o *OidcSettingsSchemaOneOf) SetIdTokenSigningAlgorithm(v string) {
	o.IdTokenSigningAlgorithm = &v
}

// GetEnableGroupSyncing returns the EnableGroupSyncing field value if set, zero value otherwise.
func (o *OidcSettingsSchemaOneOf) GetEnableGroupSyncing() bool {
	if o == nil || IsNil(o.EnableGroupSyncing) {
		var ret bool
		return ret
	}
	return *o.EnableGroupSyncing
}

// GetEnableGroupSyncingOk returns a tuple with the EnableGroupSyncing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcSettingsSchemaOneOf) GetEnableGroupSyncingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableGroupSyncing) {
		return nil, false
	}
	return o.EnableGroupSyncing, true
}

// HasEnableGroupSyncing returns a boolean if a field has been set.
func (o *OidcSettingsSchemaOneOf) HasEnableGroupSyncing() bool {
	if o != nil && !IsNil(o.EnableGroupSyncing) {
		return true
	}

	return false
}

// SetEnableGroupSyncing gets a reference to the given bool and assigns it to the EnableGroupSyncing field.
func (o *OidcSettingsSchemaOneOf) SetEnableGroupSyncing(v bool) {
	o.EnableGroupSyncing = &v
}

// GetGroupJsonPath returns the GroupJsonPath field value if set, zero value otherwise.
func (o *OidcSettingsSchemaOneOf) GetGroupJsonPath() string {
	if o == nil || IsNil(o.GroupJsonPath) {
		var ret string
		return ret
	}
	return *o.GroupJsonPath
}

// GetGroupJsonPathOk returns a tuple with the GroupJsonPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcSettingsSchemaOneOf) GetGroupJsonPathOk() (*string, bool) {
	if o == nil || IsNil(o.GroupJsonPath) {
		return nil, false
	}
	return o.GroupJsonPath, true
}

// HasGroupJsonPath returns a boolean if a field has been set.
func (o *OidcSettingsSchemaOneOf) HasGroupJsonPath() bool {
	if o != nil && !IsNil(o.GroupJsonPath) {
		return true
	}

	return false
}

// SetGroupJsonPath gets a reference to the given string and assigns it to the GroupJsonPath field.
func (o *OidcSettingsSchemaOneOf) SetGroupJsonPath(v string) {
	o.GroupJsonPath = &v
}

// GetAddGroupsScope returns the AddGroupsScope field value if set, zero value otherwise.
func (o *OidcSettingsSchemaOneOf) GetAddGroupsScope() bool {
	if o == nil || IsNil(o.AddGroupsScope) {
		var ret bool
		return ret
	}
	return *o.AddGroupsScope
}

// GetAddGroupsScopeOk returns a tuple with the AddGroupsScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcSettingsSchemaOneOf) GetAddGroupsScopeOk() (*bool, bool) {
	if o == nil || IsNil(o.AddGroupsScope) {
		return nil, false
	}
	return o.AddGroupsScope, true
}

// HasAddGroupsScope returns a boolean if a field has been set.
func (o *OidcSettingsSchemaOneOf) HasAddGroupsScope() bool {
	if o != nil && !IsNil(o.AddGroupsScope) {
		return true
	}

	return false
}

// SetAddGroupsScope gets a reference to the given bool and assigns it to the AddGroupsScope field.
func (o *OidcSettingsSchemaOneOf) SetAddGroupsScope(v bool) {
	o.AddGroupsScope = &v
}

func (o OidcSettingsSchemaOneOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OidcSettingsSchemaOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.DiscoverUrl) {
		toSerialize["discoverUrl"] = o.DiscoverUrl
	}
	toSerialize["clientId"] = o.ClientId
	toSerialize["secret"] = o.Secret
	if !IsNil(o.AutoCreate) {
		toSerialize["autoCreate"] = o.AutoCreate
	}
	if !IsNil(o.EnableSingleSignOut) {
		toSerialize["enableSingleSignOut"] = o.EnableSingleSignOut
	}
	if !IsNil(o.DefaultRootRole) {
		toSerialize["defaultRootRole"] = o.DefaultRootRole
	}
	if !IsNil(o.DefaultRootRoleId) {
		toSerialize["defaultRootRoleId"] = o.DefaultRootRoleId
	}
	if !IsNil(o.EmailDomains) {
		toSerialize["emailDomains"] = o.EmailDomains
	}
	if !IsNil(o.AcrValues) {
		toSerialize["acrValues"] = o.AcrValues
	}
	if !IsNil(o.IdTokenSigningAlgorithm) {
		toSerialize["idTokenSigningAlgorithm"] = o.IdTokenSigningAlgorithm
	}
	if !IsNil(o.EnableGroupSyncing) {
		toSerialize["enableGroupSyncing"] = o.EnableGroupSyncing
	}
	if !IsNil(o.GroupJsonPath) {
		toSerialize["groupJsonPath"] = o.GroupJsonPath
	}
	if !IsNil(o.AddGroupsScope) {
		toSerialize["addGroupsScope"] = o.AddGroupsScope
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OidcSettingsSchemaOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"clientId",
		"secret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOidcSettingsSchemaOneOf := _OidcSettingsSchemaOneOf{}

	err = json.Unmarshal(data, &varOidcSettingsSchemaOneOf)

	if err != nil {
		return err
	}

	*o = OidcSettingsSchemaOneOf(varOidcSettingsSchemaOneOf)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "discoverUrl")
		delete(additionalProperties, "clientId")
		delete(additionalProperties, "secret")
		delete(additionalProperties, "autoCreate")
		delete(additionalProperties, "enableSingleSignOut")
		delete(additionalProperties, "defaultRootRole")
		delete(additionalProperties, "defaultRootRoleId")
		delete(additionalProperties, "emailDomains")
		delete(additionalProperties, "acrValues")
		delete(additionalProperties, "idTokenSigningAlgorithm")
		delete(additionalProperties, "enableGroupSyncing")
		delete(additionalProperties, "groupJsonPath")
		delete(additionalProperties, "addGroupsScope")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOidcSettingsSchemaOneOf struct {
	value *OidcSettingsSchemaOneOf
	isSet bool
}

func (v NullableOidcSettingsSchemaOneOf) Get() *OidcSettingsSchemaOneOf {
	return v.value
}

func (v *NullableOidcSettingsSchemaOneOf) Set(val *OidcSettingsSchemaOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableOidcSettingsSchemaOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableOidcSettingsSchemaOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOidcSettingsSchemaOneOf(val *OidcSettingsSchemaOneOf) *NullableOidcSettingsSchemaOneOf {
	return &NullableOidcSettingsSchemaOneOf{value: val, isSet: true}
}

func (v NullableOidcSettingsSchemaOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOidcSettingsSchemaOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
