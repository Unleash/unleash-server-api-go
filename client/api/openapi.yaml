openapi: 3.0.3
info:
  title: Unleash API
  version: 5.4.0-main
servers:
- url: https://us.app.unleash-hosted.com/ushosted
security:
- apiKey: []
tags:
- description: "Create, update, and delete [Unleash addons](https://docs.getunleash.io/addons)."
  name: Addons
- description: Configuration for the Unleash Admin UI. These endpoints should not
    be relied upon and can change at any point without prior notice.
  name: Admin UI
- description: "Create, update, and delete [Unleash API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys)."
  name: API tokens
- description: "Revive or permanently delete [archived feature toggles](https://docs.getunleash.io/advanced/archived_toggles)."
  name: Archive
- description: "Manage logins, passwords, etc."
  name: Auth
- description: "API for managing [change requests](https://docs.getunleash.io/reference/change-requests)."
  name: Change Requests
- description: "Endpoints for [Unleash server-side clients](https://docs.getunleash.io/reference/sdks)."
  name: Client
- description: "Create, update, and delete [context fields](https://docs.getunleash.io/reference/unleash-context)\
    \ that Unleash is aware of."
  name: Context
- description: Endpoints related to Unleash on the Edge.
  name: Edge
- description: "Create, update, delete, enable or disable [environments](https://docs.getunleash.io/reference/environments)\
    \ for this Unleash instance."
  name: Environments
- description: Read events from this Unleash instance.
  name: Events
- description: "Manage [feature toggle types](https://docs.getunleash.io/reference/feature-toggle-types)."
  name: Feature Types
- description: "Create, update, and delete [features toggles](https://docs.getunleash.io/reference/feature-toggles)."
  name: Features
- description: API for connecting client-side (frontend) applications to Unleash.
  name: Frontend API
- description: "[Import and export](https://docs.getunleash.io/deploy/import_export)\
    \ the state of your Unleash instance."
  name: Import/Export
- description: Instance admin endpoints used to manage the Unleash instance itself.
  name: Instance Admin
- description: Enable/disable the maintenance mode of Unleash.
  name: Maintenance
- description: "Register, read, or delete metrics recorded by Unleash."
  name: Metrics
- description: "API for managing [notifications](https://docs.getunleash.io/reference/notifications)."
  name: Notifications
- description: Endpoints related to the operational status of this Unleash instance.
  name: Operational
- description: "Create, update, and delete [Personal access tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens)."
  name: Personal access tokens
- description: Evaluate an Unleash context against your feature toggles.
  name: Playground
- description: "Create, update, and delete [Unleash projects](https://docs.getunleash.io/reference/projects)."
  name: Projects
- description: "Create, update, and delete [Unleash Public Signup tokens](https://docs.getunleash.io/reference/public-signup-tokens)."
  name: Public signup tokens
- description: "Create, update, delete, and manage [segments](https://docs.getunleash.io/reference/segments)."
  name: Segments
- description: "Endpoints for managing [Service Accounts](https://docs.getunleash.io/reference/service-accounts),\
    \ which enable programmatic access to the Unleash API."
  name: Service Accounts
- description: "Create, update, delete, manage [custom strategies](https://docs.getunleash.io/reference/custom-activation-strategies)."
  name: Strategies
- description: "Create, update, and delete [tags and tag types](https://docs.getunleash.io/reference/tags)."
  name: Tags
- description: API for information about telemetry collection
  name: Telemetry
- description: Experimental endpoints that may change or disappear at any time.
  name: Unstable
- description: Manage users and passwords.
  name: Users
paths:
  /api/admin/projects:
    get:
      description: This endpoint returns an list of all the projects in the Unleash
        instance.
      operationId: getProjects
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectsSchema'
          description: projectsSchema
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_401_response'
          description: "Authorization information is missing or invalid. Provide a\
            \ valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_403_response'
          description: "The provided user credentials are valid, but the user does\
            \ not have the necessary permissions to perform this operation"
      summary: Get a list of all projects.
      tags:
      - Projects
    post:
      description: "Create a new [Unleash project](https://docs.getunleash.io/reference/projects)."
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createProjectSchema'
        description: createProjectSchema
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectCreatedSchema'
          description: The resource was successfully created.
          headers:
            location:
              description: The location of the newly created resource.
              explode: false
              schema:
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProject_400_response'
          description: The request data does not match what we expect.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_401_response'
          description: "Authorization information is missing or invalid. Provide a\
            \ valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_403_response'
          description: "The provided user credentials are valid, but the user does\
            \ not have the necessary permissions to perform this operation"
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProject_415_response'
          description: The operation does not support request payloads of the provided
            type. Please ensure that you're using one of the listed payload types
            and that you have specified the right content type in the "content-type"
            header.
      summary: Create project
      tags:
      - Projects
  /api/admin/projects/{projectId}:
    delete:
      description: Permanently delete the provided project. All feature toggles in
        the project must be archived before you can delete it. This permanently deletes
        the project and its archived toggles. It can not be undone.
      operationId: deleteProject
      parameters:
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: This response has no body.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProject_400_response'
          description: The request data does not match what we expect.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_401_response'
          description: "Authorization information is missing or invalid. Provide a\
            \ valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_403_response'
          description: "The provided user credentials are valid, but the user does\
            \ not have the necessary permissions to perform this operation"
      summary: Delete project
      tags:
      - Projects
    put:
      description: Update a project with new configuration. Any fields not provided
        are ignored.
      operationId: updateProject
      parameters:
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateProjectSchema'
        description: updateProjectSchema
        required: true
      responses:
        "200":
          description: This response has no body.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProject_400_response'
          description: The request data does not match what we expect.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_401_response'
          description: "Authorization information is missing or invalid. Provide a\
            \ valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_403_response'
          description: "The provided user credentials are valid, but the user does\
            \ not have the necessary permissions to perform this operation"
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateProject_404_response'
          description: The requested resource was not found.
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProject_415_response'
          description: The operation does not support request payloads of the provided
            type. Please ensure that you're using one of the listed payload types
            and that you have specified the right content type in the "content-type"
            header.
      summary: Update project
      tags:
      - Projects
  /api/admin/api-tokens:
    get:
      description: Retrieves all API tokens that exist in the Unleash instance.
      operationId: getAllApiTokens
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiTokensSchema'
          description: apiTokensSchema
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_401_response'
          description: "Authorization information is missing or invalid. Provide a\
            \ valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_403_response'
          description: "The provided user credentials are valid, but the user does\
            \ not have the necessary permissions to perform this operation"
      summary: Get API tokens
      tags:
      - API tokens
    post:
      description: "Create an API token of a specific type: one of client, admin,\
        \ frontend."
      operationId: createApiToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createApiTokenSchema'
        description: createApiTokenSchema
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiTokenSchema'
          description: The resource was successfully created.
          headers:
            location:
              description: The location of the newly created resource.
              explode: false
              schema:
                format: uri
                type: string
              style: simple
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_401_response'
          description: "Authorization information is missing or invalid. Provide a\
            \ valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_403_response'
          description: "The provided user credentials are valid, but the user does\
            \ not have the necessary permissions to perform this operation"
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProject_415_response'
          description: The operation does not support request payloads of the provided
            type. Please ensure that you're using one of the listed payload types
            and that you have specified the right content type in the "content-type"
            header.
      summary: Create API token
      tags:
      - API tokens
  /api/admin/api-tokens/{name}:
    get:
      description: "Retrieves all API tokens that match a given token name. Because\
        \ token names are not unique, this endpoint will always return a list. If\
        \ no tokens with the provided name exist, the list will be empty. Otherwise,\
        \ it will contain all the tokens with the given name."
      operationId: getApiTokensByName
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiTokensSchema'
          description: apiTokensSchema
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_401_response'
          description: "Authorization information is missing or invalid. Provide a\
            \ valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_403_response'
          description: "The provided user credentials are valid, but the user does\
            \ not have the necessary permissions to perform this operation"
      summary: Get API tokens by name
      tags:
      - API tokens
  /api/admin/api-tokens/{token}:
    delete:
      description: "Deletes an existing API token. The `token` path parameter is the\
        \ token's `secret`. If the token does not exist, this endpoint returns a 200\
        \ OK, but does nothing."
      operationId: deleteApiToken
      parameters:
      - explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: This response has no body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_401_response'
          description: "Authorization information is missing or invalid. Provide a\
            \ valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_403_response'
          description: "The provided user credentials are valid, but the user does\
            \ not have the necessary permissions to perform this operation"
      summary: Delete API token
      tags:
      - API tokens
    put:
      description: "Updates an existing API token with a new expiry date. The `token`\
        \ path parameter is the token's `secret`. If the token does not exist, this\
        \ endpoint returns a 200 OK, but does nothing."
      operationId: updateApiToken
      parameters:
      - explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateApiTokenSchema'
        description: updateApiTokenSchema
        required: true
      responses:
        "200":
          description: This response has no body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_401_response'
          description: "Authorization information is missing or invalid. Provide a\
            \ valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_403_response'
          description: "The provided user credentials are valid, but the user does\
            \ not have the necessary permissions to perform this operation"
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProject_415_response'
          description: The operation does not support request payloads of the provided
            type. Please ensure that you're using one of the listed payload types
            and that you have specified the right content type in the "content-type"
            header.
      summary: Update API token
      tags:
      - API tokens
  /api/admin/user-admin:
    post:
      description: Creates a new user with the given root role.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserSchema'
        description: createUserSchema
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUserResponseSchema'
          description: The resource was successfully created.
          headers:
            location:
              description: The location of the newly created resource.
              explode: false
              schema:
                format: uri
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProject_400_response'
          description: The request data does not match what we expect.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_401_response'
          description: "Authorization information is missing or invalid. Provide a\
            \ valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_403_response'
          description: "The provided user credentials are valid, but the user does\
            \ not have the necessary permissions to perform this operation"
      summary: Create a new user
      tags:
      - Users
  /api/admin/user-admin/{id}:
    delete:
      description: Deletes the user with the given userId
      operationId: deleteUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: This response has no body.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_401_response'
          description: "Authorization information is missing or invalid. Provide a\
            \ valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_403_response'
          description: "The provided user credentials are valid, but the user does\
            \ not have the necessary permissions to perform this operation"
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateProject_404_response'
          description: The requested resource was not found.
      summary: Delete a user
      tags:
      - Users
    get:
      description: Will return a single user by id
      operationId: getUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userSchema'
          description: userSchema
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProject_400_response'
          description: The request data does not match what we expect.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_401_response'
          description: "Authorization information is missing or invalid. Provide a\
            \ valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateProject_404_response'
          description: The requested resource was not found.
      summary: Get user
      tags:
      - Users
    put:
      description: Only the explicitly specified fields get updated.
      operationId: updateUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserSchema'
        description: updateUserSchema
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUserResponseSchema'
          description: createUserResponseSchema
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProject_400_response'
          description: The request data does not match what we expect.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_401_response'
          description: "Authorization information is missing or invalid. Provide a\
            \ valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_403_response'
          description: "The provided user credentials are valid, but the user does\
            \ not have the necessary permissions to perform this operation"
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateProject_404_response'
          description: The requested resource was not found.
      summary: Update a user
      tags:
      - Users
components:
  schemas:
    apiTokenSchema:
      additionalProperties: false
      description: "An overview of an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys)."
      example:
        createdAt: 2023-04-19T08:15:14Z
        environment: development
        seenAt: 2023-04-19T08:15:14Z
        projects:
        - developerexperience
        - enterprisegrowth
        tokenName: some-user
        project: developerexperience
        alias: randomid-or-some-alias
        secret: project:environment.xyzrandomstring
        type: client
        expiresAt: 2023-04-19T08:15:14Z
        username: a-name
      properties:
        secret:
          description: The token used for authentication.
          example: project:environment.xyzrandomstring
          type: string
        username:
          deprecated: true
          description: This property was deprecated in Unleash v5. Prefer the `tokenName`
            property instead.
          example: a-name
          type: string
        tokenName:
          description: A unique name for this particular token
          example: some-user
          type: string
        type:
          description: The type of API token
          enum:
          - client
          - admin
          - frontend
          example: client
          type: string
        environment:
          description: The environment the token has access to. `*` if it has access
            to all environments.
          example: development
          type: string
        project:
          description: The project this token belongs to.
          example: developerexperience
          type: string
        projects:
          description: "The list of projects this token has access to. If the token\
            \ has access to specific projects they will be listed here. If the token\
            \ has access to all projects it will be represented as `[*]`"
          example:
          - developerexperience
          - enterprisegrowth
          items:
            type: string
          type: array
        expiresAt:
          description: The token's expiration date. NULL if the token doesn't have
            an expiration set.
          example: 2023-04-19T08:15:14Z
          format: date-time
          nullable: true
          type: string
        createdAt:
          description: When the token was created.
          example: 2023-04-19T08:15:14Z
          format: date-time
          type: string
        seenAt:
          description: When the token was last seen/used to authenticate with. NULL
            if the token has not yet been used for authentication.
          example: 2023-04-19T08:15:14Z
          format: date-time
          nullable: true
          type: string
        alias:
          description: Alias is no longer in active use and will often be NULL. It's
            kept around as a way of allowing old proxy tokens created with the old
            metadata format to keep working.
          example: randomid-or-some-alias
          nullable: true
          type: string
      required:
      - createdAt
      - project
      - projects
      - secret
      - tokenName
      - type
      type: object
    apiTokensSchema:
      additionalProperties: false
      description: "An object with [Unleash API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys)"
      example:
        tokens:
        - createdAt: 2023-04-19T08:15:14Z
          environment: development
          seenAt: 2023-04-19T08:15:14Z
          projects:
          - developerexperience
          - enterprisegrowth
          tokenName: some-user
          project: developerexperience
          alias: randomid-or-some-alias
          secret: project:environment.xyzrandomstring
          type: client
          expiresAt: 2023-04-19T08:15:14Z
          username: a-name
        - createdAt: 2023-04-19T08:15:14Z
          environment: development
          seenAt: 2023-04-19T08:15:14Z
          projects:
          - developerexperience
          - enterprisegrowth
          tokenName: some-user
          project: developerexperience
          alias: randomid-or-some-alias
          secret: project:environment.xyzrandomstring
          type: client
          expiresAt: 2023-04-19T08:15:14Z
          username: a-name
      properties:
        tokens:
          description: A list of Unleash API tokens.
          items:
            $ref: '#/components/schemas/apiTokenSchema'
          type: array
      required:
      - tokens
      type: object
    createApiTokenSchema:
      description: "The data required to create an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys)."
      oneOf:
      - $ref: '#/components/schemas/createApiTokenSchema_oneOf'
      - $ref: '#/components/schemas/createApiTokenSchema_oneOf_1'
      - $ref: '#/components/schemas/createApiTokenSchema_oneOf_2'
      - $ref: '#/components/schemas/createApiTokenSchema_oneOf_3'
      type: object
    createUserSchema:
      additionalProperties: false
      description: "The payload must contain at least one of the name and email properties,\
        \ though which one is up to you. For the user to be able to log in to the\
        \ system, the user must have an email."
      properties:
        username:
          description: The user's username. Must be provided if email is not provided.
          example: hunter
          type: string
        email:
          description: The user's email address. Must be provided if username is not
            provided.
          example: user@example.com
          type: string
        name:
          description: The user's name (not the user's username).
          example: Sam Seawright
          type: string
        password:
          description: Password for the user
          example: k!5As3HquUrQ
          type: string
        rootRole:
          $ref: '#/components/schemas/createUserSchema_rootRole'
        sendEmail:
          description: Whether to send a welcome email with a login link to the user
            or not. Defaults to `true`.
          example: false
          type: boolean
      required:
      - rootRole
      type: object
    projectSchema:
      additionalProperties: false
      description: A definition of the project used for projects listing purposes
      example:
        mode: open
        createdAt: 2023-07-27T12:12:28Z
        memberCount: 4
        name: DX-Squad
        defaultStickiness: userId
        description: DX squad feature release
        health: 50
        id: dx-squad
        favorite: true
        featureCount: 10
        updatedAt: 2023-07-28T12:12:28Z
      properties:
        id:
          description: The id of this project
          example: dx-squad
          type: string
        name:
          description: The name of this project
          example: DX-Squad
          type: string
        description:
          description: Additional information about the project
          example: DX squad feature release
          nullable: true
          type: string
        health:
          description: "An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating)\
            \ on a scale from 0 to 100"
          example: 50
          type: number
        featureCount:
          description: The number of features this project has
          example: 10
          type: number
        memberCount:
          description: The number of members this project has
          example: 4
          type: number
        createdAt:
          description: When this project was created.
          example: 2023-07-27T12:12:28Z
          format: date-time
          type: string
        updatedAt:
          description: When this project was last updated.
          example: 2023-07-28T12:12:28Z
          format: date-time
          nullable: true
          type: string
        favorite:
          description: "`true` if the project was favorited, otherwise `false`."
          example: true
          type: boolean
        mode:
          description: "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode).\
            \ Determines whether non-project members can submit change requests or\
            \ not."
          enum:
          - open
          - protected
          example: open
          type: string
        defaultStickiness:
          description: A default stickiness for the project affecting the default
            stickiness value for variants and Gradual Rollout strategy
          example: userId
          type: string
      required:
      - id
      - name
      type: object
    projectsSchema:
      additionalProperties: false
      description: An overview of all the projects in the Unleash instance
      example:
        projects:
        - mode: open
          createdAt: 2023-07-27T12:12:28Z
          memberCount: 4
          name: DX-Squad
          defaultStickiness: userId
          description: DX squad feature release
          health: 50
          id: dx-squad
          favorite: true
          featureCount: 10
          updatedAt: 2023-07-28T12:12:28Z
        - mode: open
          createdAt: 2023-07-27T12:12:28Z
          memberCount: 4
          name: DX-Squad
          defaultStickiness: userId
          description: DX squad feature release
          health: 50
          id: dx-squad
          favorite: true
          featureCount: 10
          updatedAt: 2023-07-28T12:12:28Z
        version: 1
      properties:
        version:
          description: The schema version used to represent the project data.
          example: 1
          type: integer
        projects:
          description: A list of projects in the Unleash instance
          items:
            $ref: '#/components/schemas/projectSchema'
          type: array
      required:
      - projects
      - version
      type: object
    updateApiTokenSchema:
      description: An object with fields to updated for a given API token.
      properties:
        expiresAt:
          description: The new time when this token should expire.
          example: 2023-09-04T11:26:24+02:00
          format: date-time
          type: string
      required:
      - expiresAt
      type: object
    updateUserSchema:
      description: All fields that can be directly changed for the user
      properties:
        email:
          description: The user's email address. Must be provided if username is not
            provided.
          example: user@example.com
          type: string
        name:
          description: The user's name (not the user's username).
          example: Sam Seawright
          type: string
        rootRole:
          $ref: '#/components/schemas/createUserSchema_rootRole'
      type: object
    userSchema:
      additionalProperties: false
      description: An Unleash user
      example:
        loginAttempts: 3
        inviteLink: http://localhost:4242/invite-link/some-secret
        accountType: User
        isAPI: true
        createdAt: 2023-06-30T11:41:00.123Z
        seenAt: 2023-06-30T11:42:00.345Z
        rootRole: 1
        emailSent: false
        permissions:
        - permissions
        - permissions
        imageUrl: https://example.com/242x200.png
        name: User
        id: 123
        email: user@example.com
        username: hunter
      properties:
        id:
          description: The user id
          example: 123
          minimum: 0
          type: integer
        isAPI:
          deprecated: true
          description: "(Deprecated): Used internally to know which operations the\
            \ user should be allowed to perform"
          example: true
          type: boolean
        name:
          description: Name of the user
          example: User
          nullable: true
          type: string
        email:
          description: Email of the user
          example: user@example.com
          type: string
        username:
          description: A unique username for the user
          example: hunter
          type: string
        imageUrl:
          description: URL used for the userprofile image
          example: https://example.com/242x200.png
          type: string
        inviteLink:
          description: "If the user is actively inviting other users, this is the\
            \ link that can be shared with other users"
          example: http://localhost:4242/invite-link/some-secret
          type: string
        loginAttempts:
          description: How many unsuccessful attempts at logging in has the user made
          example: 3
          minimum: 0
          type: integer
        emailSent:
          description: Is the welcome email sent to the user or not
          example: false
          type: boolean
        rootRole:
          description: "Which [root role](https://docs.getunleash.io/reference/rbac#predefined-roles)\
            \ this user is assigned"
          example: 1
          minimum: 0
          type: integer
        seenAt:
          description: The last time this user logged in
          example: 2023-06-30T11:42:00.345Z
          format: date-time
          nullable: true
          type: string
        createdAt:
          description: The user was created at this time
          example: 2023-06-30T11:41:00.123Z
          format: date-time
          type: string
        accountType:
          description: A user is either an actual User or a Service Account
          example: User
          type: string
        permissions:
          description: Deprecated
          items:
            type: string
          type: array
      required:
      - id
      type: object
    createUserResponseSchema:
      additionalProperties: false
      description: An Unleash user after creation
      example:
        loginAttempts: 3
        inviteLink: http://localhost:4242/invite-link/some-secret
        accountType: User
        isAPI: true
        createdAt: 2023-06-30T11:41:00.123Z
        seenAt: 2023-06-30T11:42:00.345Z
        rootRole: null
        emailSent: false
        permissions:
        - permissions
        - permissions
        imageUrl: https://example.com/242x200.png
        name: User
        id: 123
        email: user@example.com
        username: hunter
      properties:
        id:
          description: The user id
          example: 123
          minimum: 0
          type: integer
        isAPI:
          deprecated: true
          description: "(Deprecated): Used internally to know which operations the\
            \ user should be allowed to perform"
          example: true
          type: boolean
        name:
          description: Name of the user
          example: User
          nullable: true
          type: string
        email:
          description: Email of the user
          example: user@example.com
          type: string
        username:
          description: A unique username for the user
          example: hunter
          type: string
        imageUrl:
          description: URL used for the userprofile image
          example: https://example.com/242x200.png
          type: string
        inviteLink:
          description: "If the user is actively inviting other users, this is the\
            \ link that can be shared with other users"
          example: http://localhost:4242/invite-link/some-secret
          type: string
        loginAttempts:
          description: How many unsuccessful attempts at logging in has the user made
          example: 3
          minimum: 0
          type: integer
        emailSent:
          description: Is the welcome email sent to the user or not
          example: false
          type: boolean
        rootRole:
          $ref: '#/components/schemas/createUserResponseSchema_rootRole'
        seenAt:
          description: The last time this user logged in
          example: 2023-06-30T11:42:00.345Z
          format: date-time
          nullable: true
          type: string
        createdAt:
          description: The user was created at this time
          example: 2023-06-30T11:41:00.123Z
          format: date-time
          type: string
        accountType:
          description: A user is either an actual User or a Service Account
          example: User
          type: string
        permissions:
          description: Deprecated
          items:
            type: string
          type: array
      required:
      - id
      type: object
    createProjectSchema:
      description: "Data used to create a new [project](https://docs.getunleash.io/reference/projects)."
      properties:
        id:
          description: The project's identifier.
          example: pet-shop
          pattern: "[A-Za-z0-9_~.-]+"
          type: string
        name:
          description: The project's name.
          example: Pet shop
          minLength: 1
          type: string
        description:
          description: The project's description.
          example: This project contains features related to the new pet shop.
          nullable: true
          type: string
        featureLimit:
          description: A limit on the number of features allowed in the project. `null`
            if no limit.
          example: 100
          nullable: true
          type: integer
        mode:
          description: A mode of the project affecting what actions are possible in
            this project
          enum:
          - open
          - protected
          example: open
          type: string
        defaultStickiness:
          description: A default stickiness for the project affecting the default
            stickiness value for variants and Gradual Rollout strategy
          example: userId
          type: string
      required:
      - id
      - name
      type: object
    projectCreatedSchema:
      additionalProperties: false
      description: Details about the newly created project.
      example:
        mode: open
        featureLimit: 100
        name: Pet shop
        defaultStickiness: userId
        description: This project contains features related to the new pet shop.
        id: pet-shop
      properties:
        id:
          description: The project's identifier.
          example: pet-shop
          pattern: "[A-Za-z0-9_~.-]+"
          type: string
        name:
          description: The project's name.
          example: Pet shop
          minLength: 1
          type: string
        description:
          description: The project's description.
          example: This project contains features related to the new pet shop.
          nullable: true
          type: string
        featureLimit:
          description: A limit on the number of features allowed in the project. `null`
            if no limit.
          example: 100
          nullable: true
          type: integer
        mode:
          description: A mode of the project affecting what actions are possible in
            this project
          enum:
          - open
          - protected
          example: open
          type: string
        defaultStickiness:
          description: A default stickiness for the project affecting the default
            stickiness value for variants and Gradual Rollout strategy
          example: userId
          type: string
      required:
      - id
      - name
      type: object
    updateProjectSchema:
      description: "Data used to update a [project](https://docs.getunleash.io/reference/projects)"
      properties:
        name:
          description: The new name of the project
          example: my-renamed-project
          type: string
        description:
          description: A new description for the project
          example: Anything related to the new UI
          type: string
      required:
      - name
      type: object
    getProjects_401_response:
      properties:
        id:
          description: The ID of the error instance
          example: 9c40958a-daac-400e-98fb-3bb438567008
          type: string
        name:
          description: The name of the error kind
          example: AuthenticationRequired
          type: string
        message:
          description: A description of what went wrong.
          example: "You must log in to use Unleash. Your request had no authorization\
            \ header, so we could not authorize you. Try logging in at /auth/simple/login."
          type: string
      type: object
    getProjects_403_response:
      properties:
        id:
          description: The ID of the error instance
          example: 9c40958a-daac-400e-98fb-3bb438567008
          type: string
        name:
          description: The name of the error kind
          example: NoAccessError
          type: string
        message:
          description: A description of what went wrong.
          example: You need the "UPDATE_ADDON" permission to perform this action in
            the "development" environment.
          type: string
      type: object
    createProject_400_response:
      properties:
        id:
          description: The ID of the error instance
          example: 9c40958a-daac-400e-98fb-3bb438567008
          type: string
        name:
          description: The name of the error kind
          example: ValidationError
          type: string
        message:
          description: A description of what went wrong.
          example: "The request payload you provided doesn't conform to the schema.\
            \ The .parameters property should be object. You sent []."
          type: string
      type: object
    createProject_415_response:
      properties:
        id:
          description: The ID of the error instance
          example: 9c40958a-daac-400e-98fb-3bb438567008
          type: string
        name:
          description: The name of the error kind
          example: ContentTypeerror
          type: string
        message:
          description: A description of what went wrong.
          example: We do not accept the content-type you provided (application/xml).
            Try using one of the content-types we do accept instead (application/json)
            and make sure the body is in the corresponding format.
          type: string
      type: object
    updateProject_404_response:
      properties:
        id:
          description: The ID of the error instance
          example: 9c40958a-daac-400e-98fb-3bb438567008
          type: string
        name:
          description: The name of the error kind
          example: NotFoundError
          type: string
        message:
          description: A description of what went wrong.
          example: Could not find the addon with ID "12345".
          type: string
      type: object
    createApiTokenSchema_oneOf:
      properties:
        expiresAt:
          description: The time when this token should expire.
          example: 2023-07-04T11:26:24+02:00
          format: date-time
          type: string
        type:
          description: An admin token. Must be the string "admin" (not case sensitive).
          example: admin
          pattern: "^[Aa][Dd][Mm][Ii][Nn]$"
          type: string
        tokenName:
          description: The name of the token.
          example: token-64522
          type: string
      required:
      - tokenName
      - type
      type: object
    createApiTokenSchema_oneOf_1:
      properties:
        expiresAt:
          description: The time when this token should expire.
          example: 2023-07-04T11:26:24+02:00
          format: date-time
          type: string
        type:
          description: An admin token. Must be the string "admin" (not case sensitive).
          example: admin
          pattern: "^[Aa][Dd][Mm][Ii][Nn]$"
          type: string
        username:
          deprecated: true
          description: The name of the token. This property is deprecated. Use `tokenName`
            instead.
          example: token-64523
          type: string
      required:
      - type
      - username
      type: object
    createApiTokenSchema_oneOf_2:
      properties:
        expiresAt:
          description: The time when this token should expire.
          example: 2023-07-04T11:26:24+02:00
          format: date-time
          type: string
        type:
          description: A client or frontend token. Must be one of the strings "client"
            or "frontend" (not case sensitive).
          example: frontend
          pattern: "^([Cc][Ll][Ii][Ee][Nn][Tt]|[Ff][Rr][Oo][Nn][Tt][Ee][Nn][Dd])$"
          type: string
        environment:
          description: The environment that the token should be valid for. Defaults
            to "default"
          example: development
          type: string
        project:
          description: "The project that the token should be valid for. Defaults to\
            \ \"*\" meaning every project. This property is mutually incompatible\
            \ with the `projects` property. If you specify one, you cannot specify\
            \ the other."
          example: project-851
          type: string
        projects:
          description: "A list of projects that the token should be valid for. This\
            \ property is mutually incompatible with the `project` property. If you\
            \ specify one, you cannot specify the other."
          example:
          - project-851
          - project-852
          items:
            type: string
          type: array
        tokenName:
          description: The name of the token.
          example: token-64522
          type: string
      required:
      - tokenName
      - type
      type: object
    createApiTokenSchema_oneOf_3:
      properties:
        expiresAt:
          description: The time when this token should expire.
          example: 2023-07-04T11:26:24+02:00
          format: date-time
          type: string
        type:
          description: A client or frontend token. Must be one of the strings "client"
            or "frontend" (not case sensitive).
          example: frontend
          pattern: "^([Cc][Ll][Ii][Ee][Nn][Tt]|[Ff][Rr][Oo][Nn][Tt][Ee][Nn][Dd])$"
          type: string
        environment:
          description: The environment that the token should be valid for. Defaults
            to "default"
          example: development
          type: string
        project:
          description: "The project that the token should be valid for. Defaults to\
            \ \"*\" meaning every project. This property is mutually incompatible\
            \ with the `projects` property. If you specify one, you cannot specify\
            \ the other."
          example: project-851
          type: string
        projects:
          description: "A list of projects that the token should be valid for. This\
            \ property is mutually incompatible with the `project` property. If you\
            \ specify one, you cannot specify the other."
          example:
          - project-851
          - project-852
          items:
            type: string
          type: array
        username:
          deprecated: true
          description: The name of the token. This property is deprecated. Use `tokenName`
            instead.
          example: token-64523
          type: string
      required:
      - type
      - username
      type: object
    createUserSchema_rootRole:
      description: The role to assign to the user. Can be either the role's ID or
        its unique name.
      oneOf:
      - example: 1
        minimum: 0
        type: integer
      - enum:
        - Admin
        - Editor
        - Viewer
        - Owner
        - Member
        example: Admin
        type: string
    createUserResponseSchema_rootRole:
      description: "Which [root role](https://docs.getunleash.io/reference/rbac#predefined-roles)\
        \ this user is assigned. Usually a numeric role ID, but can be a string when\
        \ returning newly created user with an explicit string role."
      oneOf:
      - example: 1
        minimum: 0
        type: integer
      - enum:
        - Admin
        - Editor
        - Viewer
        - Owner
        - Member
        example: Admin
        type: string
  securitySchemes:
    apiKey:
      in: header
      name: Authorization
      type: apiKey
