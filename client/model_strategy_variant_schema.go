/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.4.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the StrategyVariantSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StrategyVariantSchema{}

// StrategyVariantSchema This is an experimental property. It may change or be removed as we work on it. Please don't depend on it yet. A strategy variant allows you to attach any data to strategies instead of only returning `true`/`false`. Strategy variants take precedence over feature variants.
type StrategyVariantSchema struct {
	// The variant name. Must be unique for this feature toggle
	Name string `json:"name"`
	// The weight is the likelihood of any one user getting this variant. It is an integer between 0 and 1000. See the section on [variant weights](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight) for more information
	Weight int32 `json:"weight"`
	// Set to `fix` if this variant must have exactly the weight allocated to it. If the type is `variable`, the weight will adjust so that the total weight of all variants adds up to 1000. Refer to the [variant weight documentation](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight).
	WeightType string `json:"weightType"`
	// The [stickiness](https://docs.getunleash.io/reference/feature-toggle-variants#variant-stickiness) to use for distribution of this variant. Stickiness is how Unleash guarantees that the same user gets the same variant every time
	Stickiness string                        `json:"stickiness"`
	Payload    *StrategyVariantSchemaPayload `json:"payload,omitempty"`
}

// NewStrategyVariantSchema instantiates a new StrategyVariantSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStrategyVariantSchema(name string, weight int32, weightType string, stickiness string) *StrategyVariantSchema {
	this := StrategyVariantSchema{}
	this.Name = name
	this.Weight = weight
	this.WeightType = weightType
	this.Stickiness = stickiness
	return &this
}

// NewStrategyVariantSchemaWithDefaults instantiates a new StrategyVariantSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStrategyVariantSchemaWithDefaults() *StrategyVariantSchema {
	this := StrategyVariantSchema{}
	return &this
}

// GetName returns the Name field value
func (o *StrategyVariantSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StrategyVariantSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StrategyVariantSchema) SetName(v string) {
	o.Name = v
}

// GetWeight returns the Weight field value
func (o *StrategyVariantSchema) GetWeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Weight
}

// GetWeightOk returns a tuple with the Weight field value
// and a boolean to check if the value has been set.
func (o *StrategyVariantSchema) GetWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Weight, true
}

// SetWeight sets field value
func (o *StrategyVariantSchema) SetWeight(v int32) {
	o.Weight = v
}

// GetWeightType returns the WeightType field value
func (o *StrategyVariantSchema) GetWeightType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WeightType
}

// GetWeightTypeOk returns a tuple with the WeightType field value
// and a boolean to check if the value has been set.
func (o *StrategyVariantSchema) GetWeightTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WeightType, true
}

// SetWeightType sets field value
func (o *StrategyVariantSchema) SetWeightType(v string) {
	o.WeightType = v
}

// GetStickiness returns the Stickiness field value
func (o *StrategyVariantSchema) GetStickiness() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stickiness
}

// GetStickinessOk returns a tuple with the Stickiness field value
// and a boolean to check if the value has been set.
func (o *StrategyVariantSchema) GetStickinessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stickiness, true
}

// SetStickiness sets field value
func (o *StrategyVariantSchema) SetStickiness(v string) {
	o.Stickiness = v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *StrategyVariantSchema) GetPayload() StrategyVariantSchemaPayload {
	if o == nil || IsNil(o.Payload) {
		var ret StrategyVariantSchemaPayload
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyVariantSchema) GetPayloadOk() (*StrategyVariantSchemaPayload, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *StrategyVariantSchema) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given StrategyVariantSchemaPayload and assigns it to the Payload field.
func (o *StrategyVariantSchema) SetPayload(v StrategyVariantSchemaPayload) {
	o.Payload = &v
}

func (o StrategyVariantSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StrategyVariantSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["weight"] = o.Weight
	toSerialize["weightType"] = o.WeightType
	toSerialize["stickiness"] = o.Stickiness
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	return toSerialize, nil
}

type NullableStrategyVariantSchema struct {
	value *StrategyVariantSchema
	isSet bool
}

func (v NullableStrategyVariantSchema) Get() *StrategyVariantSchema {
	return v.value
}

func (v *NullableStrategyVariantSchema) Set(val *StrategyVariantSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableStrategyVariantSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableStrategyVariantSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStrategyVariantSchema(val *StrategyVariantSchema) *NullableStrategyVariantSchema {
	return &NullableStrategyVariantSchema{value: val, isSet: true}
}

func (v NullableStrategyVariantSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStrategyVariantSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
