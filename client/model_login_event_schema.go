/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.4.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the LoginEventSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoginEventSchema{}

// LoginEventSchema A model representing a single login event.
type LoginEventSchema struct {
	// The event's ID. Event IDs are incrementing integers. In other words, a more recent event will always have a higher ID than an older event.
	Id int32 `json:"id"`
	// The username of the user that attempted to log in. Will return \"Incorrectly configured provider\" when attempting to log in using a misconfigured provider.
	Username *string `json:"username,omitempty"`
	// The authentication type used to log in.
	AuthType *string `json:"auth_type,omitempty"`
	// The date and time of when the login was attempted.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Whether the login was successful or not.
	Successful *bool `json:"successful,omitempty"`
	// The IP address of the client that attempted to log in.
	Ip NullableString `json:"ip,omitempty"`
	// The reason for the login failure. This property is only present if the login was unsuccessful.
	FailureReason NullableString `json:"failure_reason,omitempty"`
}

// NewLoginEventSchema instantiates a new LoginEventSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginEventSchema(id int32) *LoginEventSchema {
	this := LoginEventSchema{}
	this.Id = id
	return &this
}

// NewLoginEventSchemaWithDefaults instantiates a new LoginEventSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginEventSchemaWithDefaults() *LoginEventSchema {
	this := LoginEventSchema{}
	return &this
}

// GetId returns the Id field value
func (o *LoginEventSchema) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LoginEventSchema) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LoginEventSchema) SetId(v int32) {
	o.Id = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *LoginEventSchema) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginEventSchema) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *LoginEventSchema) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *LoginEventSchema) SetUsername(v string) {
	o.Username = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *LoginEventSchema) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginEventSchema) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *LoginEventSchema) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *LoginEventSchema) SetAuthType(v string) {
	o.AuthType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *LoginEventSchema) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginEventSchema) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *LoginEventSchema) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *LoginEventSchema) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetSuccessful returns the Successful field value if set, zero value otherwise.
func (o *LoginEventSchema) GetSuccessful() bool {
	if o == nil || IsNil(o.Successful) {
		var ret bool
		return ret
	}
	return *o.Successful
}

// GetSuccessfulOk returns a tuple with the Successful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginEventSchema) GetSuccessfulOk() (*bool, bool) {
	if o == nil || IsNil(o.Successful) {
		return nil, false
	}
	return o.Successful, true
}

// HasSuccessful returns a boolean if a field has been set.
func (o *LoginEventSchema) HasSuccessful() bool {
	if o != nil && !IsNil(o.Successful) {
		return true
	}

	return false
}

// SetSuccessful gets a reference to the given bool and assigns it to the Successful field.
func (o *LoginEventSchema) SetSuccessful(v bool) {
	o.Successful = &v
}

// GetIp returns the Ip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LoginEventSchema) GetIp() string {
	if o == nil || IsNil(o.Ip.Get()) {
		var ret string
		return ret
	}
	return *o.Ip.Get()
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LoginEventSchema) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ip.Get(), o.Ip.IsSet()
}

// HasIp returns a boolean if a field has been set.
func (o *LoginEventSchema) HasIp() bool {
	if o != nil && o.Ip.IsSet() {
		return true
	}

	return false
}

// SetIp gets a reference to the given NullableString and assigns it to the Ip field.
func (o *LoginEventSchema) SetIp(v string) {
	o.Ip.Set(&v)
}

// SetIpNil sets the value for Ip to be an explicit nil
func (o *LoginEventSchema) SetIpNil() {
	o.Ip.Set(nil)
}

// UnsetIp ensures that no value is present for Ip, not even an explicit nil
func (o *LoginEventSchema) UnsetIp() {
	o.Ip.Unset()
}

// GetFailureReason returns the FailureReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LoginEventSchema) GetFailureReason() string {
	if o == nil || IsNil(o.FailureReason.Get()) {
		var ret string
		return ret
	}
	return *o.FailureReason.Get()
}

// GetFailureReasonOk returns a tuple with the FailureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LoginEventSchema) GetFailureReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailureReason.Get(), o.FailureReason.IsSet()
}

// HasFailureReason returns a boolean if a field has been set.
func (o *LoginEventSchema) HasFailureReason() bool {
	if o != nil && o.FailureReason.IsSet() {
		return true
	}

	return false
}

// SetFailureReason gets a reference to the given NullableString and assigns it to the FailureReason field.
func (o *LoginEventSchema) SetFailureReason(v string) {
	o.FailureReason.Set(&v)
}

// SetFailureReasonNil sets the value for FailureReason to be an explicit nil
func (o *LoginEventSchema) SetFailureReasonNil() {
	o.FailureReason.Set(nil)
}

// UnsetFailureReason ensures that no value is present for FailureReason, not even an explicit nil
func (o *LoginEventSchema) UnsetFailureReason() {
	o.FailureReason.Unset()
}

func (o LoginEventSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoginEventSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.AuthType) {
		toSerialize["auth_type"] = o.AuthType
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Successful) {
		toSerialize["successful"] = o.Successful
	}
	if o.Ip.IsSet() {
		toSerialize["ip"] = o.Ip.Get()
	}
	if o.FailureReason.IsSet() {
		toSerialize["failure_reason"] = o.FailureReason.Get()
	}
	return toSerialize, nil
}

type NullableLoginEventSchema struct {
	value *LoginEventSchema
	isSet bool
}

func (v NullableLoginEventSchema) Get() *LoginEventSchema {
	return v.value
}

func (v *NullableLoginEventSchema) Set(val *LoginEventSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginEventSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginEventSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginEventSchema(val *LoginEventSchema) *NullableLoginEventSchema {
	return &NullableLoginEventSchema{value: val, isSet: true}
}

func (v NullableLoginEventSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginEventSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
