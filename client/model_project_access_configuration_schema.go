/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.1.12+main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the ProjectAccessConfigurationSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectAccessConfigurationSchema{}

// ProjectAccessConfigurationSchema An object describing roles for a project and what users and groups are part of that role.
type ProjectAccessConfigurationSchema struct {
	// A list of roles that are available within this project.
	Roles                []ProjectAccessConfigurationSchemaRolesInner `json:"roles"`
	AdditionalProperties map[string]interface{}
}

type _ProjectAccessConfigurationSchema ProjectAccessConfigurationSchema

// NewProjectAccessConfigurationSchema instantiates a new ProjectAccessConfigurationSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectAccessConfigurationSchema(roles []ProjectAccessConfigurationSchemaRolesInner) *ProjectAccessConfigurationSchema {
	this := ProjectAccessConfigurationSchema{}
	this.Roles = roles
	return &this
}

// NewProjectAccessConfigurationSchemaWithDefaults instantiates a new ProjectAccessConfigurationSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectAccessConfigurationSchemaWithDefaults() *ProjectAccessConfigurationSchema {
	this := ProjectAccessConfigurationSchema{}
	return &this
}

// GetRoles returns the Roles field value
func (o *ProjectAccessConfigurationSchema) GetRoles() []ProjectAccessConfigurationSchemaRolesInner {
	if o == nil {
		var ret []ProjectAccessConfigurationSchemaRolesInner
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *ProjectAccessConfigurationSchema) GetRolesOk() ([]ProjectAccessConfigurationSchemaRolesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *ProjectAccessConfigurationSchema) SetRoles(v []ProjectAccessConfigurationSchemaRolesInner) {
	o.Roles = v
}

func (o ProjectAccessConfigurationSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectAccessConfigurationSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["roles"] = o.Roles

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProjectAccessConfigurationSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"roles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectAccessConfigurationSchema := _ProjectAccessConfigurationSchema{}

	err = json.Unmarshal(data, &varProjectAccessConfigurationSchema)

	if err != nil {
		return err
	}

	*o = ProjectAccessConfigurationSchema(varProjectAccessConfigurationSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "roles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProjectAccessConfigurationSchema struct {
	value *ProjectAccessConfigurationSchema
	isSet bool
}

func (v NullableProjectAccessConfigurationSchema) Get() *ProjectAccessConfigurationSchema {
	return v.value
}

func (v *NullableProjectAccessConfigurationSchema) Set(val *ProjectAccessConfigurationSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectAccessConfigurationSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectAccessConfigurationSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectAccessConfigurationSchema(val *ProjectAccessConfigurationSchema) *NullableProjectAccessConfigurationSchema {
	return &NullableProjectAccessConfigurationSchema{value: val, isSet: true}
}

func (v NullableProjectAccessConfigurationSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectAccessConfigurationSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
