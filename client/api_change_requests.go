/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ChangeRequestsAPIService ChangeRequestsAPI service
type ChangeRequestsAPIService service

type ApiGetProjectChangeRequestConfigRequest struct {
	ctx        context.Context
	ApiService *ChangeRequestsAPIService
	projectId  string
}

func (r ApiGetProjectChangeRequestConfigRequest) Execute() ([]ChangeRequestEnvironmentConfigSchema, *http.Response, error) {
	return r.ApiService.GetProjectChangeRequestConfigExecute(r)
}

/*
GetProjectChangeRequestConfig Retrieves change request configuration for a project

Given a projectId, this endpoint will retrieve change request configuration for the project

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId
	@return ApiGetProjectChangeRequestConfigRequest
*/
func (a *ChangeRequestsAPIService) GetProjectChangeRequestConfig(ctx context.Context, projectId string) ApiGetProjectChangeRequestConfigRequest {
	return ApiGetProjectChangeRequestConfigRequest{
		ApiService: a,
		ctx:        ctx,
		projectId:  projectId,
	}
}

// Execute executes the request
//
//	@return []ChangeRequestEnvironmentConfigSchema
func (a *ChangeRequestsAPIService) GetProjectChangeRequestConfigExecute(r ApiGetProjectChangeRequestConfigRequest) ([]ChangeRequestEnvironmentConfigSchema, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ChangeRequestEnvironmentConfigSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChangeRequestsAPIService.GetProjectChangeRequestConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/admin/projects/{projectId}/change-requests/config"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateProjectChangeRequestConfigRequest struct {
	ctx                                        context.Context
	ApiService                                 *ChangeRequestsAPIService
	projectId                                  string
	environment                                string
	updateChangeRequestEnvironmentConfigSchema *UpdateChangeRequestEnvironmentConfigSchema
}

// updateChangeRequestEnvironmentConfigSchema
func (r ApiUpdateProjectChangeRequestConfigRequest) UpdateChangeRequestEnvironmentConfigSchema(updateChangeRequestEnvironmentConfigSchema UpdateChangeRequestEnvironmentConfigSchema) ApiUpdateProjectChangeRequestConfigRequest {
	r.updateChangeRequestEnvironmentConfigSchema = &updateChangeRequestEnvironmentConfigSchema
	return r
}

func (r ApiUpdateProjectChangeRequestConfigRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateProjectChangeRequestConfigExecute(r)
}

/*
UpdateProjectChangeRequestConfig Updates change request configuration for an environment in the project

This endpoint will change the change request configuration for a given environment, set it to either on/off and optionally configure the number of approvals needed. The minimum number of approvals is 1 and the maximum number is 10. If you provide a number higher than 10 or lower than 1, Unleash will clamp it to the allowed range.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId
	@param environment
	@return ApiUpdateProjectChangeRequestConfigRequest
*/
func (a *ChangeRequestsAPIService) UpdateProjectChangeRequestConfig(ctx context.Context, projectId string, environment string) ApiUpdateProjectChangeRequestConfigRequest {
	return ApiUpdateProjectChangeRequestConfigRequest{
		ApiService:  a,
		ctx:         ctx,
		projectId:   projectId,
		environment: environment,
	}
}

// Execute executes the request
func (a *ChangeRequestsAPIService) UpdateProjectChangeRequestConfigExecute(r ApiUpdateProjectChangeRequestConfigRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChangeRequestsAPIService.UpdateProjectChangeRequestConfig")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/admin/projects/{projectId}/environments/{environment}/change-requests/config"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"environment"+"}", url.PathEscape(parameterValueToString(r.environment, "environment")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateChangeRequestEnvironmentConfigSchema == nil {
		return nil, reportError("updateChangeRequestEnvironmentConfigSchema is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateChangeRequestEnvironmentConfigSchema
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
