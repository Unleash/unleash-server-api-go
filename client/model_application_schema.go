/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApplicationSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationSchema{}

// ApplicationSchema struct for ApplicationSchema
type ApplicationSchema struct {
	// Name of the application
	AppName string `json:"appName"`
	// Which SDK and version the application reporting uses. Typically represented as `<identifier>:<version>`
	SdkVersion *string `json:"sdkVersion,omitempty"`
	// Which [strategies](https://docs.getunleash.io/topics/the-anatomy-of-unleash#activation-strategies) the application has loaded. Useful when trying to figure out if your [custom strategy](https://docs.getunleash.io/reference/custom-activation-strategies) has been loaded in the SDK
	Strategies []string `json:"strategies,omitempty"`
	// Extra information added about the application reporting the metrics. Only present if added via the Unleash Admin interface
	Description *string `json:"description,omitempty"`
	// A link to reference the application reporting the metrics. Could for instance be a GitHub link to the repository of the application
	Url *string `json:"url,omitempty"`
	// The CSS color that is used to color the application's entry in the application list
	Color *string `json:"color,omitempty"`
	// An URL to an icon file to be used for the applications's entry in the application list
	Icon *string `json:"icon,omitempty"`
}

// NewApplicationSchema instantiates a new ApplicationSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationSchema(appName string) *ApplicationSchema {
	this := ApplicationSchema{}
	this.AppName = appName
	return &this
}

// NewApplicationSchemaWithDefaults instantiates a new ApplicationSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationSchemaWithDefaults() *ApplicationSchema {
	this := ApplicationSchema{}
	return &this
}

// GetAppName returns the AppName field value
func (o *ApplicationSchema) GetAppName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value
// and a boolean to check if the value has been set.
func (o *ApplicationSchema) GetAppNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppName, true
}

// SetAppName sets field value
func (o *ApplicationSchema) SetAppName(v string) {
	o.AppName = v
}

// GetSdkVersion returns the SdkVersion field value if set, zero value otherwise.
func (o *ApplicationSchema) GetSdkVersion() string {
	if o == nil || IsNil(o.SdkVersion) {
		var ret string
		return ret
	}
	return *o.SdkVersion
}

// GetSdkVersionOk returns a tuple with the SdkVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSchema) GetSdkVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SdkVersion) {
		return nil, false
	}
	return o.SdkVersion, true
}

// HasSdkVersion returns a boolean if a field has been set.
func (o *ApplicationSchema) HasSdkVersion() bool {
	if o != nil && !IsNil(o.SdkVersion) {
		return true
	}

	return false
}

// SetSdkVersion gets a reference to the given string and assigns it to the SdkVersion field.
func (o *ApplicationSchema) SetSdkVersion(v string) {
	o.SdkVersion = &v
}

// GetStrategies returns the Strategies field value if set, zero value otherwise.
func (o *ApplicationSchema) GetStrategies() []string {
	if o == nil || IsNil(o.Strategies) {
		var ret []string
		return ret
	}
	return o.Strategies
}

// GetStrategiesOk returns a tuple with the Strategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSchema) GetStrategiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Strategies) {
		return nil, false
	}
	return o.Strategies, true
}

// HasStrategies returns a boolean if a field has been set.
func (o *ApplicationSchema) HasStrategies() bool {
	if o != nil && !IsNil(o.Strategies) {
		return true
	}

	return false
}

// SetStrategies gets a reference to the given []string and assigns it to the Strategies field.
func (o *ApplicationSchema) SetStrategies(v []string) {
	o.Strategies = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApplicationSchema) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSchema) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApplicationSchema) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApplicationSchema) SetDescription(v string) {
	o.Description = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ApplicationSchema) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSchema) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ApplicationSchema) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ApplicationSchema) SetUrl(v string) {
	o.Url = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *ApplicationSchema) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSchema) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *ApplicationSchema) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *ApplicationSchema) SetColor(v string) {
	o.Color = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *ApplicationSchema) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSchema) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *ApplicationSchema) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *ApplicationSchema) SetIcon(v string) {
	o.Icon = &v
}

func (o ApplicationSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appName"] = o.AppName
	if !IsNil(o.SdkVersion) {
		toSerialize["sdkVersion"] = o.SdkVersion
	}
	if !IsNil(o.Strategies) {
		toSerialize["strategies"] = o.Strategies
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	return toSerialize, nil
}

type NullableApplicationSchema struct {
	value *ApplicationSchema
	isSet bool
}

func (v NullableApplicationSchema) Get() *ApplicationSchema {
	return v.value
}

func (v *NullableApplicationSchema) Set(val *ApplicationSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationSchema(val *ApplicationSchema) *NullableApplicationSchema {
	return &NullableApplicationSchema{value: val, isSet: true}
}

func (v NullableApplicationSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


