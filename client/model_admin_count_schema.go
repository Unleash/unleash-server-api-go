/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the AdminCountSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminCountSchema{}

// AdminCountSchema Contains total admin counts for an Unleash instance.
type AdminCountSchema struct {
	// Total number of admins that have a password set.
	Password float32 `json:"password"`
	// Total number of admins that do not have a password set. May be SSO, but may also be users that did not set a password yet.
	NoPassword float32 `json:"noPassword"`
	// Total number of service accounts that have the admin root role.
	Service float32 `json:"service"`
}

// NewAdminCountSchema instantiates a new AdminCountSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminCountSchema(password float32, noPassword float32, service float32) *AdminCountSchema {
	this := AdminCountSchema{}
	this.Password = password
	this.NoPassword = noPassword
	this.Service = service
	return &this
}

// NewAdminCountSchemaWithDefaults instantiates a new AdminCountSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminCountSchemaWithDefaults() *AdminCountSchema {
	this := AdminCountSchema{}
	return &this
}

// GetPassword returns the Password field value
func (o *AdminCountSchema) GetPassword() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *AdminCountSchema) GetPasswordOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *AdminCountSchema) SetPassword(v float32) {
	o.Password = v
}

// GetNoPassword returns the NoPassword field value
func (o *AdminCountSchema) GetNoPassword() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NoPassword
}

// GetNoPasswordOk returns a tuple with the NoPassword field value
// and a boolean to check if the value has been set.
func (o *AdminCountSchema) GetNoPasswordOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NoPassword, true
}

// SetNoPassword sets field value
func (o *AdminCountSchema) SetNoPassword(v float32) {
	o.NoPassword = v
}

// GetService returns the Service field value
func (o *AdminCountSchema) GetService() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *AdminCountSchema) GetServiceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *AdminCountSchema) SetService(v float32) {
	o.Service = v
}

func (o AdminCountSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminCountSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["password"] = o.Password
	toSerialize["noPassword"] = o.NoPassword
	toSerialize["service"] = o.Service
	return toSerialize, nil
}

type NullableAdminCountSchema struct {
	value *AdminCountSchema
	isSet bool
}

func (v NullableAdminCountSchema) Get() *AdminCountSchema {
	return v.value
}

func (v *NullableAdminCountSchema) Set(val *AdminCountSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminCountSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminCountSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminCountSchema(val *AdminCountSchema) *NullableAdminCountSchema {
	return &NullableAdminCountSchema{value: val, isSet: true}
}

func (v NullableAdminCountSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminCountSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
