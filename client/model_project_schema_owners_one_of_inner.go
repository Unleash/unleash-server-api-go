/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ProjectSchemaOwnersOneOfInner struct for ProjectSchemaOwnersOneOfInner
type ProjectSchemaOwnersOneOfInner struct {
	ProjectSchemaOwnersOneOfInnerAnyOf  *ProjectSchemaOwnersOneOfInnerAnyOf
	ProjectSchemaOwnersOneOfInnerAnyOf1 *ProjectSchemaOwnersOneOfInnerAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ProjectSchemaOwnersOneOfInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ProjectSchemaOwnersOneOfInnerAnyOf
	err = json.Unmarshal(data, &dst.ProjectSchemaOwnersOneOfInnerAnyOf)
	if err == nil {
		jsonProjectSchemaOwnersOneOfInnerAnyOf, _ := json.Marshal(dst.ProjectSchemaOwnersOneOfInnerAnyOf)
		if string(jsonProjectSchemaOwnersOneOfInnerAnyOf) == "{}" { // empty struct
			dst.ProjectSchemaOwnersOneOfInnerAnyOf = nil
		} else {
			return nil // data stored in dst.ProjectSchemaOwnersOneOfInnerAnyOf, return on the first match
		}
	} else {
		dst.ProjectSchemaOwnersOneOfInnerAnyOf = nil
	}

	// try to unmarshal JSON data into ProjectSchemaOwnersOneOfInnerAnyOf1
	err = json.Unmarshal(data, &dst.ProjectSchemaOwnersOneOfInnerAnyOf1)
	if err == nil {
		jsonProjectSchemaOwnersOneOfInnerAnyOf1, _ := json.Marshal(dst.ProjectSchemaOwnersOneOfInnerAnyOf1)
		if string(jsonProjectSchemaOwnersOneOfInnerAnyOf1) == "{}" { // empty struct
			dst.ProjectSchemaOwnersOneOfInnerAnyOf1 = nil
		} else {
			return nil // data stored in dst.ProjectSchemaOwnersOneOfInnerAnyOf1, return on the first match
		}
	} else {
		dst.ProjectSchemaOwnersOneOfInnerAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ProjectSchemaOwnersOneOfInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ProjectSchemaOwnersOneOfInner) MarshalJSON() ([]byte, error) {
	if src.ProjectSchemaOwnersOneOfInnerAnyOf != nil {
		return json.Marshal(&src.ProjectSchemaOwnersOneOfInnerAnyOf)
	}

	if src.ProjectSchemaOwnersOneOfInnerAnyOf1 != nil {
		return json.Marshal(&src.ProjectSchemaOwnersOneOfInnerAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableProjectSchemaOwnersOneOfInner struct {
	value *ProjectSchemaOwnersOneOfInner
	isSet bool
}

func (v NullableProjectSchemaOwnersOneOfInner) Get() *ProjectSchemaOwnersOneOfInner {
	return v.value
}

func (v *NullableProjectSchemaOwnersOneOfInner) Set(val *ProjectSchemaOwnersOneOfInner) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectSchemaOwnersOneOfInner) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectSchemaOwnersOneOfInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectSchemaOwnersOneOfInner(val *ProjectSchemaOwnersOneOfInner) *NullableProjectSchemaOwnersOneOfInner {
	return &NullableProjectSchemaOwnersOneOfInner{value: val, isSet: true}
}

func (v NullableProjectSchemaOwnersOneOfInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectSchemaOwnersOneOfInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
