/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the EventSchemaData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventSchemaData{}

// EventSchemaData Extra associated data related to the event, such as feature toggle state, segment configuration, etc., if applicable.
type EventSchemaData struct {
	// Name of the feature toggle/strategy/environment that this event relates to
	Name *string `json:"name,omitempty"`
	// The description of the object this event relates to
	Description *string `json:"description,omitempty"`
	// If this event relates to a feature toggle, the type of feature toggle.
	Type *string `json:"type,omitempty"`
	// The project this event relates to
	Project *string `json:"project,omitempty"`
	// Is the feature toggle this event relates to stale
	Stale *bool `json:"stale,omitempty"`
	// Variants configured for this toggle
	Variants []VariantSchema `json:"variants,omitempty"`
	// The time the event happened as a RFC 3339-conformant timestamp.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The time the feature was last seen
	LastSeenAt NullableTime `json:"lastSeenAt,omitempty"`
	// Should [impression events](https://docs.getunleash.io/reference/impression-data) activate for this feature toggle
	ImpressionData       *bool `json:"impressionData,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EventSchemaData EventSchemaData

// NewEventSchemaData instantiates a new EventSchemaData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSchemaData() *EventSchemaData {
	this := EventSchemaData{}
	return &this
}

// NewEventSchemaDataWithDefaults instantiates a new EventSchemaData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSchemaDataWithDefaults() *EventSchemaData {
	this := EventSchemaData{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EventSchemaData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSchemaData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EventSchemaData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EventSchemaData) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EventSchemaData) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSchemaData) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EventSchemaData) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EventSchemaData) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventSchemaData) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSchemaData) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventSchemaData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventSchemaData) SetType(v string) {
	o.Type = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *EventSchemaData) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSchemaData) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *EventSchemaData) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *EventSchemaData) SetProject(v string) {
	o.Project = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *EventSchemaData) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSchemaData) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *EventSchemaData) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *EventSchemaData) SetStale(v bool) {
	o.Stale = &v
}

// GetVariants returns the Variants field value if set, zero value otherwise.
func (o *EventSchemaData) GetVariants() []VariantSchema {
	if o == nil || IsNil(o.Variants) {
		var ret []VariantSchema
		return ret
	}
	return o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSchemaData) GetVariantsOk() ([]VariantSchema, bool) {
	if o == nil || IsNil(o.Variants) {
		return nil, false
	}
	return o.Variants, true
}

// HasVariants returns a boolean if a field has been set.
func (o *EventSchemaData) HasVariants() bool {
	if o != nil && !IsNil(o.Variants) {
		return true
	}

	return false
}

// SetVariants gets a reference to the given []VariantSchema and assigns it to the Variants field.
func (o *EventSchemaData) SetVariants(v []VariantSchema) {
	o.Variants = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *EventSchemaData) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSchemaData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *EventSchemaData) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *EventSchemaData) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetLastSeenAt returns the LastSeenAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventSchemaData) GetLastSeenAt() time.Time {
	if o == nil || IsNil(o.LastSeenAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastSeenAt.Get()
}

// GetLastSeenAtOk returns a tuple with the LastSeenAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventSchemaData) GetLastSeenAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastSeenAt.Get(), o.LastSeenAt.IsSet()
}

// HasLastSeenAt returns a boolean if a field has been set.
func (o *EventSchemaData) HasLastSeenAt() bool {
	if o != nil && o.LastSeenAt.IsSet() {
		return true
	}

	return false
}

// SetLastSeenAt gets a reference to the given NullableTime and assigns it to the LastSeenAt field.
func (o *EventSchemaData) SetLastSeenAt(v time.Time) {
	o.LastSeenAt.Set(&v)
}

// SetLastSeenAtNil sets the value for LastSeenAt to be an explicit nil
func (o *EventSchemaData) SetLastSeenAtNil() {
	o.LastSeenAt.Set(nil)
}

// UnsetLastSeenAt ensures that no value is present for LastSeenAt, not even an explicit nil
func (o *EventSchemaData) UnsetLastSeenAt() {
	o.LastSeenAt.Unset()
}

// GetImpressionData returns the ImpressionData field value if set, zero value otherwise.
func (o *EventSchemaData) GetImpressionData() bool {
	if o == nil || IsNil(o.ImpressionData) {
		var ret bool
		return ret
	}
	return *o.ImpressionData
}

// GetImpressionDataOk returns a tuple with the ImpressionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSchemaData) GetImpressionDataOk() (*bool, bool) {
	if o == nil || IsNil(o.ImpressionData) {
		return nil, false
	}
	return o.ImpressionData, true
}

// HasImpressionData returns a boolean if a field has been set.
func (o *EventSchemaData) HasImpressionData() bool {
	if o != nil && !IsNil(o.ImpressionData) {
		return true
	}

	return false
}

// SetImpressionData gets a reference to the given bool and assigns it to the ImpressionData field.
func (o *EventSchemaData) SetImpressionData(v bool) {
	o.ImpressionData = &v
}

func (o EventSchemaData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventSchemaData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	if !IsNil(o.Variants) {
		toSerialize["variants"] = o.Variants
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.LastSeenAt.IsSet() {
		toSerialize["lastSeenAt"] = o.LastSeenAt.Get()
	}
	if !IsNil(o.ImpressionData) {
		toSerialize["impressionData"] = o.ImpressionData
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventSchemaData) UnmarshalJSON(bytes []byte) (err error) {
	varEventSchemaData := _EventSchemaData{}

	if err = json.Unmarshal(bytes, &varEventSchemaData); err == nil {
		*o = EventSchemaData(varEventSchemaData)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "type")
		delete(additionalProperties, "project")
		delete(additionalProperties, "stale")
		delete(additionalProperties, "variants")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "lastSeenAt")
		delete(additionalProperties, "impressionData")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventSchemaData struct {
	value *EventSchemaData
	isSet bool
}

func (v NullableEventSchemaData) Get() *EventSchemaData {
	return v.value
}

func (v *NullableEventSchemaData) Set(val *EventSchemaData) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSchemaData) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSchemaData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSchemaData(val *EventSchemaData) *NullableEventSchemaData {
	return &NullableEventSchemaData{value: val, isSet: true}
}

func (v NullableEventSchemaData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSchemaData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
