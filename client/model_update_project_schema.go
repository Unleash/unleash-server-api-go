/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.7.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateProjectSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProjectSchema{}

// UpdateProjectSchema Data used to update a [project](https://docs.getunleash.io/reference/projects)
type UpdateProjectSchema struct {
	// The new name of the project. The name must contain at least one non-whitespace character.
	Name string `json:"name" validate:"regexp=^(?!\\\\s*$).+"`
	// A new description for the project
	Description *string `json:"description,omitempty"`
	// A mode of the project affecting what actions are possible in this project
	Mode *string `json:"mode,omitempty"`
	// A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
	DefaultStickiness    *string `json:"defaultStickiness,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateProjectSchema UpdateProjectSchema

// NewUpdateProjectSchema instantiates a new UpdateProjectSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProjectSchema(name string) *UpdateProjectSchema {
	this := UpdateProjectSchema{}
	this.Name = name
	return &this
}

// NewUpdateProjectSchemaWithDefaults instantiates a new UpdateProjectSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProjectSchemaWithDefaults() *UpdateProjectSchema {
	this := UpdateProjectSchema{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateProjectSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateProjectSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateProjectSchema) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateProjectSchema) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProjectSchema) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateProjectSchema) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateProjectSchema) SetDescription(v string) {
	o.Description = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *UpdateProjectSchema) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProjectSchema) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *UpdateProjectSchema) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *UpdateProjectSchema) SetMode(v string) {
	o.Mode = &v
}

// GetDefaultStickiness returns the DefaultStickiness field value if set, zero value otherwise.
func (o *UpdateProjectSchema) GetDefaultStickiness() string {
	if o == nil || IsNil(o.DefaultStickiness) {
		var ret string
		return ret
	}
	return *o.DefaultStickiness
}

// GetDefaultStickinessOk returns a tuple with the DefaultStickiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProjectSchema) GetDefaultStickinessOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultStickiness) {
		return nil, false
	}
	return o.DefaultStickiness, true
}

// HasDefaultStickiness returns a boolean if a field has been set.
func (o *UpdateProjectSchema) HasDefaultStickiness() bool {
	if o != nil && !IsNil(o.DefaultStickiness) {
		return true
	}

	return false
}

// SetDefaultStickiness gets a reference to the given string and assigns it to the DefaultStickiness field.
func (o *UpdateProjectSchema) SetDefaultStickiness(v string) {
	o.DefaultStickiness = &v
}

func (o UpdateProjectSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProjectSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.DefaultStickiness) {
		toSerialize["defaultStickiness"] = o.DefaultStickiness
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateProjectSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateProjectSchema := _UpdateProjectSchema{}

	err = json.Unmarshal(data, &varUpdateProjectSchema)

	if err != nil {
		return err
	}

	*o = UpdateProjectSchema(varUpdateProjectSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "defaultStickiness")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateProjectSchema struct {
	value *UpdateProjectSchema
	isSet bool
}

func (v NullableUpdateProjectSchema) Get() *UpdateProjectSchema {
	return v.value
}

func (v *NullableUpdateProjectSchema) Set(val *UpdateProjectSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProjectSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProjectSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProjectSchema(val *UpdateProjectSchema) *NullableUpdateProjectSchema {
	return &NullableUpdateProjectSchema{value: val, isSet: true}
}

func (v NullableUpdateProjectSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProjectSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
