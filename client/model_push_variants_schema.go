/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PushVariantsSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PushVariantsSchema{}

// PushVariantsSchema struct for PushVariantsSchema
type PushVariantsSchema struct {
	Variants     []VariantSchema `json:"variants,omitempty"`
	Environments []string        `json:"environments,omitempty"`
}

// NewPushVariantsSchema instantiates a new PushVariantsSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPushVariantsSchema() *PushVariantsSchema {
	this := PushVariantsSchema{}
	return &this
}

// NewPushVariantsSchemaWithDefaults instantiates a new PushVariantsSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPushVariantsSchemaWithDefaults() *PushVariantsSchema {
	this := PushVariantsSchema{}
	return &this
}

// GetVariants returns the Variants field value if set, zero value otherwise.
func (o *PushVariantsSchema) GetVariants() []VariantSchema {
	if o == nil || IsNil(o.Variants) {
		var ret []VariantSchema
		return ret
	}
	return o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushVariantsSchema) GetVariantsOk() ([]VariantSchema, bool) {
	if o == nil || IsNil(o.Variants) {
		return nil, false
	}
	return o.Variants, true
}

// HasVariants returns a boolean if a field has been set.
func (o *PushVariantsSchema) HasVariants() bool {
	if o != nil && !IsNil(o.Variants) {
		return true
	}

	return false
}

// SetVariants gets a reference to the given []VariantSchema and assigns it to the Variants field.
func (o *PushVariantsSchema) SetVariants(v []VariantSchema) {
	o.Variants = v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *PushVariantsSchema) GetEnvironments() []string {
	if o == nil || IsNil(o.Environments) {
		var ret []string
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushVariantsSchema) GetEnvironmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *PushVariantsSchema) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *PushVariantsSchema) SetEnvironments(v []string) {
	o.Environments = v
}

func (o PushVariantsSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PushVariantsSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Variants) {
		toSerialize["variants"] = o.Variants
	}
	if !IsNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	return toSerialize, nil
}

type NullablePushVariantsSchema struct {
	value *PushVariantsSchema
	isSet bool
}

func (v NullablePushVariantsSchema) Get() *PushVariantsSchema {
	return v.value
}

func (v *NullablePushVariantsSchema) Set(val *PushVariantsSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePushVariantsSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePushVariantsSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePushVariantsSchema(val *PushVariantsSchema) *NullablePushVariantsSchema {
	return &NullablePushVariantsSchema{value: val, isSet: true}
}

func (v NullablePushVariantsSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePushVariantsSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
