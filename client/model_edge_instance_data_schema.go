/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.7.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the EdgeInstanceDataSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EdgeInstanceDataSchema{}

// EdgeInstanceDataSchema Represents Edge instance observability data.
type EdgeInstanceDataSchema struct {
	// The ID of the Edge process, typically a ULID. Newly generated for each restart of the instance.
	Identifier string `json:"identifier"`
	// The name of the application, configured by the user, typically persistent across restarts of Edge.
	AppName string `json:"appName"`
	// Which region the Edge instance is running in. Set to AWS_REGION by default (if present).
	Region NullableString `json:"region,omitempty"`
	// Which version (semver) of Edge is the Edge instance running.
	EdgeVersion    string                   `json:"edgeVersion"`
	ProcessMetrics EdgeProcessMetricsSchema `json:"processMetrics,omitempty"`
	// RFC3339 timestamp for when the Edge instance was started.
	Started         time.Time                 `json:"started"`
	Traffic         EdgeInstanceTrafficSchema `json:"traffic"`
	LatencyUpstream EdgeUpstreamLatencySchema `json:"latencyUpstream"`
	// How many streaming clients are connected to the Edge instance.
	ConnectedStreamingClients float32 `json:"connectedStreamingClients"`
	// A list of Edge instances connected to the Edge instance.
	ConnectedEdges       []EdgeInstanceDataSchema `json:"connectedEdges"`
	AdditionalProperties map[string]interface{}
}

type _EdgeInstanceDataSchema EdgeInstanceDataSchema

// NewEdgeInstanceDataSchema instantiates a new EdgeInstanceDataSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdgeInstanceDataSchema(identifier string, appName string, edgeVersion string, started time.Time, traffic EdgeInstanceTrafficSchema, latencyUpstream EdgeUpstreamLatencySchema, connectedStreamingClients float32, connectedEdges []EdgeInstanceDataSchema) *EdgeInstanceDataSchema {
	this := EdgeInstanceDataSchema{}
	this.Identifier = identifier
	this.AppName = appName
	this.EdgeVersion = edgeVersion
	this.Started = started
	this.Traffic = traffic
	this.LatencyUpstream = latencyUpstream
	this.ConnectedStreamingClients = connectedStreamingClients
	this.ConnectedEdges = connectedEdges
	return &this
}

// NewEdgeInstanceDataSchemaWithDefaults instantiates a new EdgeInstanceDataSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEdgeInstanceDataSchemaWithDefaults() *EdgeInstanceDataSchema {
	this := EdgeInstanceDataSchema{}
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *EdgeInstanceDataSchema) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *EdgeInstanceDataSchema) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *EdgeInstanceDataSchema) SetIdentifier(v string) {
	o.Identifier = v
}

// GetAppName returns the AppName field value
func (o *EdgeInstanceDataSchema) GetAppName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value
// and a boolean to check if the value has been set.
func (o *EdgeInstanceDataSchema) GetAppNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppName, true
}

// SetAppName sets field value
func (o *EdgeInstanceDataSchema) SetAppName(v string) {
	o.AppName = v
}

// GetRegion returns the Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EdgeInstanceDataSchema) GetRegion() string {
	if o == nil || IsNil(o.Region.Get()) {
		var ret string
		return ret
	}
	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EdgeInstanceDataSchema) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// HasRegion returns a boolean if a field has been set.
func (o *EdgeInstanceDataSchema) HasRegion() bool {
	if o != nil && o.Region.IsSet() {
		return true
	}

	return false
}

// SetRegion gets a reference to the given NullableString and assigns it to the Region field.
func (o *EdgeInstanceDataSchema) SetRegion(v string) {
	o.Region.Set(&v)
}

// SetRegionNil sets the value for Region to be an explicit nil
func (o *EdgeInstanceDataSchema) SetRegionNil() {
	o.Region.Set(nil)
}

// UnsetRegion ensures that no value is present for Region, not even an explicit nil
func (o *EdgeInstanceDataSchema) UnsetRegion() {
	o.Region.Unset()
}

// GetEdgeVersion returns the EdgeVersion field value
func (o *EdgeInstanceDataSchema) GetEdgeVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EdgeVersion
}

// GetEdgeVersionOk returns a tuple with the EdgeVersion field value
// and a boolean to check if the value has been set.
func (o *EdgeInstanceDataSchema) GetEdgeVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EdgeVersion, true
}

// SetEdgeVersion sets field value
func (o *EdgeInstanceDataSchema) SetEdgeVersion(v string) {
	o.EdgeVersion = v
}

// GetProcessMetrics returns the ProcessMetrics field value if set, zero value otherwise.
func (o *EdgeInstanceDataSchema) GetProcessMetrics() EdgeProcessMetricsSchema {
	if o == nil || IsNil(o.ProcessMetrics) {
		var ret EdgeProcessMetricsSchema
		return ret
	}
	return o.ProcessMetrics
}

// GetProcessMetricsOk returns a tuple with the ProcessMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdgeInstanceDataSchema) GetProcessMetricsOk() (EdgeProcessMetricsSchema, bool) {
	if o == nil || IsNil(o.ProcessMetrics) {
		return EdgeProcessMetricsSchema{}, false
	}
	return o.ProcessMetrics, true
}

// HasProcessMetrics returns a boolean if a field has been set.
func (o *EdgeInstanceDataSchema) HasProcessMetrics() bool {
	if o != nil && !IsNil(o.ProcessMetrics) {
		return true
	}

	return false
}

// SetProcessMetrics gets a reference to the given EdgeProcessMetricsSchema and assigns it to the ProcessMetrics field.
func (o *EdgeInstanceDataSchema) SetProcessMetrics(v EdgeProcessMetricsSchema) {
	o.ProcessMetrics = v
}

// GetStarted returns the Started field value
func (o *EdgeInstanceDataSchema) GetStarted() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Started
}

// GetStartedOk returns a tuple with the Started field value
// and a boolean to check if the value has been set.
func (o *EdgeInstanceDataSchema) GetStartedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Started, true
}

// SetStarted sets field value
func (o *EdgeInstanceDataSchema) SetStarted(v time.Time) {
	o.Started = v
}

// GetTraffic returns the Traffic field value
func (o *EdgeInstanceDataSchema) GetTraffic() EdgeInstanceTrafficSchema {
	if o == nil {
		var ret EdgeInstanceTrafficSchema
		return ret
	}

	return o.Traffic
}

// GetTrafficOk returns a tuple with the Traffic field value
// and a boolean to check if the value has been set.
func (o *EdgeInstanceDataSchema) GetTrafficOk() (EdgeInstanceTrafficSchema, bool) {
	if o == nil {
		return EdgeInstanceTrafficSchema{}, false
	}
	return o.Traffic, true
}

// SetTraffic sets field value
func (o *EdgeInstanceDataSchema) SetTraffic(v EdgeInstanceTrafficSchema) {
	o.Traffic = v
}

// GetLatencyUpstream returns the LatencyUpstream field value
func (o *EdgeInstanceDataSchema) GetLatencyUpstream() EdgeUpstreamLatencySchema {
	if o == nil {
		var ret EdgeUpstreamLatencySchema
		return ret
	}

	return o.LatencyUpstream
}

// GetLatencyUpstreamOk returns a tuple with the LatencyUpstream field value
// and a boolean to check if the value has been set.
func (o *EdgeInstanceDataSchema) GetLatencyUpstreamOk() (EdgeUpstreamLatencySchema, bool) {
	if o == nil {
		return EdgeUpstreamLatencySchema{}, false
	}
	return o.LatencyUpstream, true
}

// SetLatencyUpstream sets field value
func (o *EdgeInstanceDataSchema) SetLatencyUpstream(v EdgeUpstreamLatencySchema) {
	o.LatencyUpstream = v
}

// GetConnectedStreamingClients returns the ConnectedStreamingClients field value
func (o *EdgeInstanceDataSchema) GetConnectedStreamingClients() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ConnectedStreamingClients
}

// GetConnectedStreamingClientsOk returns a tuple with the ConnectedStreamingClients field value
// and a boolean to check if the value has been set.
func (o *EdgeInstanceDataSchema) GetConnectedStreamingClientsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectedStreamingClients, true
}

// SetConnectedStreamingClients sets field value
func (o *EdgeInstanceDataSchema) SetConnectedStreamingClients(v float32) {
	o.ConnectedStreamingClients = v
}

// GetConnectedEdges returns the ConnectedEdges field value
func (o *EdgeInstanceDataSchema) GetConnectedEdges() []EdgeInstanceDataSchema {
	if o == nil {
		var ret []EdgeInstanceDataSchema
		return ret
	}

	return o.ConnectedEdges
}

// GetConnectedEdgesOk returns a tuple with the ConnectedEdges field value
// and a boolean to check if the value has been set.
func (o *EdgeInstanceDataSchema) GetConnectedEdgesOk() ([]EdgeInstanceDataSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectedEdges, true
}

// SetConnectedEdges sets field value
func (o *EdgeInstanceDataSchema) SetConnectedEdges(v []EdgeInstanceDataSchema) {
	o.ConnectedEdges = v
}

func (o EdgeInstanceDataSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EdgeInstanceDataSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identifier"] = o.Identifier
	toSerialize["appName"] = o.AppName
	if o.Region.IsSet() {
		toSerialize["region"] = o.Region.Get()
	}
	toSerialize["edgeVersion"] = o.EdgeVersion
	if !IsNil(o.ProcessMetrics) {
		toSerialize["processMetrics"] = o.ProcessMetrics
	}
	toSerialize["started"] = o.Started
	toSerialize["traffic"] = o.Traffic
	toSerialize["latencyUpstream"] = o.LatencyUpstream
	toSerialize["connectedStreamingClients"] = o.ConnectedStreamingClients
	toSerialize["connectedEdges"] = o.ConnectedEdges

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EdgeInstanceDataSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"appName",
		"edgeVersion",
		"started",
		"traffic",
		"latencyUpstream",
		"connectedStreamingClients",
		"connectedEdges",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEdgeInstanceDataSchema := _EdgeInstanceDataSchema{}

	err = json.Unmarshal(data, &varEdgeInstanceDataSchema)

	if err != nil {
		return err
	}

	*o = EdgeInstanceDataSchema(varEdgeInstanceDataSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "identifier")
		delete(additionalProperties, "appName")
		delete(additionalProperties, "region")
		delete(additionalProperties, "edgeVersion")
		delete(additionalProperties, "processMetrics")
		delete(additionalProperties, "started")
		delete(additionalProperties, "traffic")
		delete(additionalProperties, "latencyUpstream")
		delete(additionalProperties, "connectedStreamingClients")
		delete(additionalProperties, "connectedEdges")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEdgeInstanceDataSchema struct {
	value *EdgeInstanceDataSchema
	isSet bool
}

func (v NullableEdgeInstanceDataSchema) Get() *EdgeInstanceDataSchema {
	return v.value
}

func (v *NullableEdgeInstanceDataSchema) Set(val *EdgeInstanceDataSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableEdgeInstanceDataSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableEdgeInstanceDataSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdgeInstanceDataSchema(val *EdgeInstanceDataSchema) *NullableEdgeInstanceDataSchema {
	return &NullableEdgeInstanceDataSchema{value: val, isSet: true}
}

func (v NullableEdgeInstanceDataSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdgeInstanceDataSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
