/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.4.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the AddonSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddonSchema{}

// AddonSchema An [addon](https://docs.getunleash.io/reference/addons) instance description. Contains data about what kind of provider it uses, whether it's enabled or not, what events it listens for, and more.
type AddonSchema struct {
	// The addon's unique identifier.
	Id int32 `json:"id"`
	// The addon provider, such as \"webhook\" or \"slack\".
	Provider string `json:"provider"`
	// A description of the addon. `null` if no description exists.
	Description NullableString `json:"description"`
	// Whether the addon is enabled or not.
	Enabled bool `json:"enabled"`
	// Parameters for the addon provider. This object has different required and optional properties depending on the provider you choose.
	Parameters map[string]interface{} `json:"parameters"`
	// The event types that trigger this specific addon.
	Events []string `json:"events"`
	// The projects that this addon listens to events from. An empty list means it listens to events from **all** projects.
	Projects []string `json:"projects,omitempty"`
	// The list of environments that this addon listens to events from. An empty list means it listens to events from **all** environments.
	Environments []string `json:"environments,omitempty"`
}

// NewAddonSchema instantiates a new AddonSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonSchema(id int32, provider string, description NullableString, enabled bool, parameters map[string]interface{}, events []string) *AddonSchema {
	this := AddonSchema{}
	this.Id = id
	this.Provider = provider
	this.Description = description
	this.Enabled = enabled
	this.Parameters = parameters
	this.Events = events
	return &this
}

// NewAddonSchemaWithDefaults instantiates a new AddonSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonSchemaWithDefaults() *AddonSchema {
	this := AddonSchema{}
	return &this
}

// GetId returns the Id field value
func (o *AddonSchema) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AddonSchema) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AddonSchema) SetId(v int32) {
	o.Id = v
}

// GetProvider returns the Provider field value
func (o *AddonSchema) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *AddonSchema) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *AddonSchema) SetProvider(v string) {
	o.Provider = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AddonSchema) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddonSchema) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *AddonSchema) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetEnabled returns the Enabled field value
func (o *AddonSchema) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddonSchema) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddonSchema) SetEnabled(v bool) {
	o.Enabled = v
}

// GetParameters returns the Parameters field value
func (o *AddonSchema) GetParameters() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value
// and a boolean to check if the value has been set.
func (o *AddonSchema) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// SetParameters sets field value
func (o *AddonSchema) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetEvents returns the Events field value
func (o *AddonSchema) GetEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *AddonSchema) GetEventsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *AddonSchema) SetEvents(v []string) {
	o.Events = v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *AddonSchema) GetProjects() []string {
	if o == nil || IsNil(o.Projects) {
		var ret []string
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonSchema) GetProjectsOk() ([]string, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *AddonSchema) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []string and assigns it to the Projects field.
func (o *AddonSchema) SetProjects(v []string) {
	o.Projects = v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *AddonSchema) GetEnvironments() []string {
	if o == nil || IsNil(o.Environments) {
		var ret []string
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonSchema) GetEnvironmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *AddonSchema) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *AddonSchema) SetEnvironments(v []string) {
	o.Environments = v
}

func (o AddonSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["provider"] = o.Provider
	toSerialize["description"] = o.Description.Get()
	toSerialize["enabled"] = o.Enabled
	toSerialize["parameters"] = o.Parameters
	toSerialize["events"] = o.Events
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	if !IsNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	return toSerialize, nil
}

type NullableAddonSchema struct {
	value *AddonSchema
	isSet bool
}

func (v NullableAddonSchema) Get() *AddonSchema {
	return v.value
}

func (v *NullableAddonSchema) Set(val *AddonSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonSchema(val *AddonSchema) *NullableAddonSchema {
	return &NullableAddonSchema{value: val, isSet: true}
}

func (v NullableAddonSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
