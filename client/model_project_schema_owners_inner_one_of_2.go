/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.1.10+main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the ProjectSchemaOwnersInnerOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectSchemaOwnersInnerOneOf2{}

// ProjectSchemaOwnersInnerOneOf2 struct for ProjectSchemaOwnersInnerOneOf2
type ProjectSchemaOwnersInnerOneOf2 struct {
	OwnerType            string `json:"ownerType"`
	AdditionalProperties map[string]interface{}
}

type _ProjectSchemaOwnersInnerOneOf2 ProjectSchemaOwnersInnerOneOf2

// NewProjectSchemaOwnersInnerOneOf2 instantiates a new ProjectSchemaOwnersInnerOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectSchemaOwnersInnerOneOf2(ownerType string) *ProjectSchemaOwnersInnerOneOf2 {
	this := ProjectSchemaOwnersInnerOneOf2{}
	this.OwnerType = ownerType
	return &this
}

// NewProjectSchemaOwnersInnerOneOf2WithDefaults instantiates a new ProjectSchemaOwnersInnerOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectSchemaOwnersInnerOneOf2WithDefaults() *ProjectSchemaOwnersInnerOneOf2 {
	this := ProjectSchemaOwnersInnerOneOf2{}
	return &this
}

// GetOwnerType returns the OwnerType field value
func (o *ProjectSchemaOwnersInnerOneOf2) GetOwnerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerType
}

// GetOwnerTypeOk returns a tuple with the OwnerType field value
// and a boolean to check if the value has been set.
func (o *ProjectSchemaOwnersInnerOneOf2) GetOwnerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerType, true
}

// SetOwnerType sets field value
func (o *ProjectSchemaOwnersInnerOneOf2) SetOwnerType(v string) {
	o.OwnerType = v
}

func (o ProjectSchemaOwnersInnerOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectSchemaOwnersInnerOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ownerType"] = o.OwnerType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProjectSchemaOwnersInnerOneOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ownerType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectSchemaOwnersInnerOneOf2 := _ProjectSchemaOwnersInnerOneOf2{}

	err = json.Unmarshal(data, &varProjectSchemaOwnersInnerOneOf2)

	if err != nil {
		return err
	}

	*o = ProjectSchemaOwnersInnerOneOf2(varProjectSchemaOwnersInnerOneOf2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ownerType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProjectSchemaOwnersInnerOneOf2 struct {
	value *ProjectSchemaOwnersInnerOneOf2
	isSet bool
}

func (v NullableProjectSchemaOwnersInnerOneOf2) Get() *ProjectSchemaOwnersInnerOneOf2 {
	return v.value
}

func (v *NullableProjectSchemaOwnersInnerOneOf2) Set(val *ProjectSchemaOwnersInnerOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectSchemaOwnersInnerOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectSchemaOwnersInnerOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectSchemaOwnersInnerOneOf2(val *ProjectSchemaOwnersInnerOneOf2) *NullableProjectSchemaOwnersInnerOneOf2 {
	return &NullableProjectSchemaOwnersInnerOneOf2{value: val, isSet: true}
}

func (v NullableProjectSchemaOwnersInnerOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectSchemaOwnersInnerOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
