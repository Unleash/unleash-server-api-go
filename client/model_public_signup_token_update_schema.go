/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the PublicSignupTokenUpdateSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicSignupTokenUpdateSchema{}

// PublicSignupTokenUpdateSchema Used by Unleash for updating a token's expiration date or, when deleting the invite link, it's status
type PublicSignupTokenUpdateSchema struct {
	// The token's expiration date.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	// Whether the token is active or not.
	Enabled *bool `json:"enabled,omitempty"`
}

// NewPublicSignupTokenUpdateSchema instantiates a new PublicSignupTokenUpdateSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicSignupTokenUpdateSchema() *PublicSignupTokenUpdateSchema {
	this := PublicSignupTokenUpdateSchema{}
	return &this
}

// NewPublicSignupTokenUpdateSchemaWithDefaults instantiates a new PublicSignupTokenUpdateSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicSignupTokenUpdateSchemaWithDefaults() *PublicSignupTokenUpdateSchema {
	this := PublicSignupTokenUpdateSchema{}
	return &this
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *PublicSignupTokenUpdateSchema) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicSignupTokenUpdateSchema) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *PublicSignupTokenUpdateSchema) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *PublicSignupTokenUpdateSchema) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PublicSignupTokenUpdateSchema) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicSignupTokenUpdateSchema) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PublicSignupTokenUpdateSchema) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PublicSignupTokenUpdateSchema) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o PublicSignupTokenUpdateSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicSignupTokenUpdateSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullablePublicSignupTokenUpdateSchema struct {
	value *PublicSignupTokenUpdateSchema
	isSet bool
}

func (v NullablePublicSignupTokenUpdateSchema) Get() *PublicSignupTokenUpdateSchema {
	return v.value
}

func (v *NullablePublicSignupTokenUpdateSchema) Set(val *PublicSignupTokenUpdateSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicSignupTokenUpdateSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicSignupTokenUpdateSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicSignupTokenUpdateSchema(val *PublicSignupTokenUpdateSchema) *NullablePublicSignupTokenUpdateSchema {
	return &NullablePublicSignupTokenUpdateSchema{value: val, isSet: true}
}

func (v NullablePublicSignupTokenUpdateSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicSignupTokenUpdateSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
