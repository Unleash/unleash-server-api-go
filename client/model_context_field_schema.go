/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ContextFieldSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContextFieldSchema{}

// ContextFieldSchema A representation of a [context field](https://docs.getunleash.io/reference/unleash-context).
type ContextFieldSchema struct {
	// The name of the context field
	Name string `json:"name"`
	// The description of the context field.
	Description NullableString `json:"description,omitempty"`
	// Does this context field support being used for [stickiness](https://docs.getunleash.io/reference/stickiness) calculations
	Stickiness *bool `json:"stickiness,omitempty"`
	// Used when sorting a list of context fields. Is also used as a tiebreaker if a list of context fields is sorted alphabetically.
	SortOrder *int32 `json:"sortOrder,omitempty"`
	// When this context field was created
	CreatedAt NullableTime `json:"createdAt,omitempty"`
	// Number of projects where this context field is used in
	UsedInFeatures NullableInt32 `json:"usedInFeatures,omitempty"`
	// Number of projects where this context field is used in
	UsedInProjects NullableInt32 `json:"usedInProjects,omitempty"`
	// Allowed values for this context field schema. Can be used to narrow down accepted input
	LegalValues          []LegalValueSchema `json:"legalValues,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ContextFieldSchema ContextFieldSchema

// NewContextFieldSchema instantiates a new ContextFieldSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContextFieldSchema(name string) *ContextFieldSchema {
	this := ContextFieldSchema{}
	this.Name = name
	return &this
}

// NewContextFieldSchemaWithDefaults instantiates a new ContextFieldSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextFieldSchemaWithDefaults() *ContextFieldSchema {
	this := ContextFieldSchema{}
	return &this
}

// GetName returns the Name field value
func (o *ContextFieldSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ContextFieldSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ContextFieldSchema) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContextFieldSchema) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContextFieldSchema) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ContextFieldSchema) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ContextFieldSchema) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ContextFieldSchema) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ContextFieldSchema) UnsetDescription() {
	o.Description.Unset()
}

// GetStickiness returns the Stickiness field value if set, zero value otherwise.
func (o *ContextFieldSchema) GetStickiness() bool {
	if o == nil || IsNil(o.Stickiness) {
		var ret bool
		return ret
	}
	return *o.Stickiness
}

// GetStickinessOk returns a tuple with the Stickiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextFieldSchema) GetStickinessOk() (*bool, bool) {
	if o == nil || IsNil(o.Stickiness) {
		return nil, false
	}
	return o.Stickiness, true
}

// HasStickiness returns a boolean if a field has been set.
func (o *ContextFieldSchema) HasStickiness() bool {
	if o != nil && !IsNil(o.Stickiness) {
		return true
	}

	return false
}

// SetStickiness gets a reference to the given bool and assigns it to the Stickiness field.
func (o *ContextFieldSchema) SetStickiness(v bool) {
	o.Stickiness = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *ContextFieldSchema) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder) {
		var ret int32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextFieldSchema) GetSortOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *ContextFieldSchema) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given int32 and assigns it to the SortOrder field.
func (o *ContextFieldSchema) SetSortOrder(v int32) {
	o.SortOrder = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContextFieldSchema) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContextFieldSchema) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ContextFieldSchema) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableTime and assigns it to the CreatedAt field.
func (o *ContextFieldSchema) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *ContextFieldSchema) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *ContextFieldSchema) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetUsedInFeatures returns the UsedInFeatures field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContextFieldSchema) GetUsedInFeatures() int32 {
	if o == nil || IsNil(o.UsedInFeatures.Get()) {
		var ret int32
		return ret
	}
	return *o.UsedInFeatures.Get()
}

// GetUsedInFeaturesOk returns a tuple with the UsedInFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContextFieldSchema) GetUsedInFeaturesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsedInFeatures.Get(), o.UsedInFeatures.IsSet()
}

// HasUsedInFeatures returns a boolean if a field has been set.
func (o *ContextFieldSchema) HasUsedInFeatures() bool {
	if o != nil && o.UsedInFeatures.IsSet() {
		return true
	}

	return false
}

// SetUsedInFeatures gets a reference to the given NullableInt32 and assigns it to the UsedInFeatures field.
func (o *ContextFieldSchema) SetUsedInFeatures(v int32) {
	o.UsedInFeatures.Set(&v)
}

// SetUsedInFeaturesNil sets the value for UsedInFeatures to be an explicit nil
func (o *ContextFieldSchema) SetUsedInFeaturesNil() {
	o.UsedInFeatures.Set(nil)
}

// UnsetUsedInFeatures ensures that no value is present for UsedInFeatures, not even an explicit nil
func (o *ContextFieldSchema) UnsetUsedInFeatures() {
	o.UsedInFeatures.Unset()
}

// GetUsedInProjects returns the UsedInProjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContextFieldSchema) GetUsedInProjects() int32 {
	if o == nil || IsNil(o.UsedInProjects.Get()) {
		var ret int32
		return ret
	}
	return *o.UsedInProjects.Get()
}

// GetUsedInProjectsOk returns a tuple with the UsedInProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContextFieldSchema) GetUsedInProjectsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsedInProjects.Get(), o.UsedInProjects.IsSet()
}

// HasUsedInProjects returns a boolean if a field has been set.
func (o *ContextFieldSchema) HasUsedInProjects() bool {
	if o != nil && o.UsedInProjects.IsSet() {
		return true
	}

	return false
}

// SetUsedInProjects gets a reference to the given NullableInt32 and assigns it to the UsedInProjects field.
func (o *ContextFieldSchema) SetUsedInProjects(v int32) {
	o.UsedInProjects.Set(&v)
}

// SetUsedInProjectsNil sets the value for UsedInProjects to be an explicit nil
func (o *ContextFieldSchema) SetUsedInProjectsNil() {
	o.UsedInProjects.Set(nil)
}

// UnsetUsedInProjects ensures that no value is present for UsedInProjects, not even an explicit nil
func (o *ContextFieldSchema) UnsetUsedInProjects() {
	o.UsedInProjects.Unset()
}

// GetLegalValues returns the LegalValues field value if set, zero value otherwise.
func (o *ContextFieldSchema) GetLegalValues() []LegalValueSchema {
	if o == nil || IsNil(o.LegalValues) {
		var ret []LegalValueSchema
		return ret
	}
	return o.LegalValues
}

// GetLegalValuesOk returns a tuple with the LegalValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextFieldSchema) GetLegalValuesOk() ([]LegalValueSchema, bool) {
	if o == nil || IsNil(o.LegalValues) {
		return nil, false
	}
	return o.LegalValues, true
}

// HasLegalValues returns a boolean if a field has been set.
func (o *ContextFieldSchema) HasLegalValues() bool {
	if o != nil && !IsNil(o.LegalValues) {
		return true
	}

	return false
}

// SetLegalValues gets a reference to the given []LegalValueSchema and assigns it to the LegalValues field.
func (o *ContextFieldSchema) SetLegalValues(v []LegalValueSchema) {
	o.LegalValues = v
}

func (o ContextFieldSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContextFieldSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Stickiness) {
		toSerialize["stickiness"] = o.Stickiness
	}
	if !IsNil(o.SortOrder) {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if o.CreatedAt.IsSet() {
		toSerialize["createdAt"] = o.CreatedAt.Get()
	}
	if o.UsedInFeatures.IsSet() {
		toSerialize["usedInFeatures"] = o.UsedInFeatures.Get()
	}
	if o.UsedInProjects.IsSet() {
		toSerialize["usedInProjects"] = o.UsedInProjects.Get()
	}
	if !IsNil(o.LegalValues) {
		toSerialize["legalValues"] = o.LegalValues
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContextFieldSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContextFieldSchema := _ContextFieldSchema{}

	err = json.Unmarshal(data, &varContextFieldSchema)

	if err != nil {
		return err
	}

	*o = ContextFieldSchema(varContextFieldSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "stickiness")
		delete(additionalProperties, "sortOrder")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "usedInFeatures")
		delete(additionalProperties, "usedInProjects")
		delete(additionalProperties, "legalValues")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContextFieldSchema struct {
	value *ContextFieldSchema
	isSet bool
}

func (v NullableContextFieldSchema) Get() *ContextFieldSchema {
	return v.value
}

func (v *NullableContextFieldSchema) Set(val *ContextFieldSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableContextFieldSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableContextFieldSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextFieldSchema(val *ContextFieldSchema) *NullableContextFieldSchema {
	return &NullableContextFieldSchema{value: val, isSet: true}
}

func (v NullableContextFieldSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextFieldSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
