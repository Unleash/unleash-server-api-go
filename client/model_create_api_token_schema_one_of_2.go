/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.1.10+main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CreateApiTokenSchemaOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateApiTokenSchemaOneOf2{}

// CreateApiTokenSchemaOneOf2 struct for CreateApiTokenSchemaOneOf2
type CreateApiTokenSchemaOneOf2 struct {
	// The time when this token should expire.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	// A client or frontend token. Must be one of the strings \"client\" or \"frontend\" (not case sensitive).
	Type string `json:"type" validate:"regexp=^([Cc][Ll][Ii][Ee][Nn][Tt]|[Ff][Rr][Oo][Nn][Tt][Ee][Nn][Dd])$"`
	// The environment that the token should be valid for. Defaults to \"default\"
	Environment *string `json:"environment,omitempty"`
	// The project that the token should be valid for. Defaults to \"*\" meaning every project. This property is mutually incompatible with the `projects` property. If you specify one, you cannot specify the other.
	Project *string `json:"project,omitempty"`
	// A list of projects that the token should be valid for. This property is mutually incompatible with the `project` property. If you specify one, you cannot specify the other.
	Projects []string `json:"projects,omitempty"`
	// The name of the token.
	TokenName            string `json:"tokenName"`
	AdditionalProperties map[string]interface{}
}

type _CreateApiTokenSchemaOneOf2 CreateApiTokenSchemaOneOf2

// NewCreateApiTokenSchemaOneOf2 instantiates a new CreateApiTokenSchemaOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateApiTokenSchemaOneOf2(type_ string, tokenName string) *CreateApiTokenSchemaOneOf2 {
	this := CreateApiTokenSchemaOneOf2{}
	this.Type = type_
	this.TokenName = tokenName
	return &this
}

// NewCreateApiTokenSchemaOneOf2WithDefaults instantiates a new CreateApiTokenSchemaOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateApiTokenSchemaOneOf2WithDefaults() *CreateApiTokenSchemaOneOf2 {
	this := CreateApiTokenSchemaOneOf2{}
	return &this
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *CreateApiTokenSchemaOneOf2) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateApiTokenSchemaOneOf2) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *CreateApiTokenSchemaOneOf2) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *CreateApiTokenSchemaOneOf2) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetType returns the Type field value
func (o *CreateApiTokenSchemaOneOf2) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateApiTokenSchemaOneOf2) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateApiTokenSchemaOneOf2) SetType(v string) {
	o.Type = v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *CreateApiTokenSchemaOneOf2) GetEnvironment() string {
	if o == nil || IsNil(o.Environment) {
		var ret string
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateApiTokenSchemaOneOf2) GetEnvironmentOk() (*string, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *CreateApiTokenSchemaOneOf2) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given string and assigns it to the Environment field.
func (o *CreateApiTokenSchemaOneOf2) SetEnvironment(v string) {
	o.Environment = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *CreateApiTokenSchemaOneOf2) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateApiTokenSchemaOneOf2) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *CreateApiTokenSchemaOneOf2) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *CreateApiTokenSchemaOneOf2) SetProject(v string) {
	o.Project = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *CreateApiTokenSchemaOneOf2) GetProjects() []string {
	if o == nil || IsNil(o.Projects) {
		var ret []string
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateApiTokenSchemaOneOf2) GetProjectsOk() ([]string, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *CreateApiTokenSchemaOneOf2) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []string and assigns it to the Projects field.
func (o *CreateApiTokenSchemaOneOf2) SetProjects(v []string) {
	o.Projects = v
}

// GetTokenName returns the TokenName field value
func (o *CreateApiTokenSchemaOneOf2) GetTokenName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenName
}

// GetTokenNameOk returns a tuple with the TokenName field value
// and a boolean to check if the value has been set.
func (o *CreateApiTokenSchemaOneOf2) GetTokenNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenName, true
}

// SetTokenName sets field value
func (o *CreateApiTokenSchemaOneOf2) SetTokenName(v string) {
	o.TokenName = v
}

func (o CreateApiTokenSchemaOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateApiTokenSchemaOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	toSerialize["tokenName"] = o.TokenName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateApiTokenSchemaOneOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"tokenName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateApiTokenSchemaOneOf2 := _CreateApiTokenSchemaOneOf2{}

	err = json.Unmarshal(data, &varCreateApiTokenSchemaOneOf2)

	if err != nil {
		return err
	}

	*o = CreateApiTokenSchemaOneOf2(varCreateApiTokenSchemaOneOf2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "expiresAt")
		delete(additionalProperties, "type")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "project")
		delete(additionalProperties, "projects")
		delete(additionalProperties, "tokenName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateApiTokenSchemaOneOf2 struct {
	value *CreateApiTokenSchemaOneOf2
	isSet bool
}

func (v NullableCreateApiTokenSchemaOneOf2) Get() *CreateApiTokenSchemaOneOf2 {
	return v.value
}

func (v *NullableCreateApiTokenSchemaOneOf2) Set(val *CreateApiTokenSchemaOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateApiTokenSchemaOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateApiTokenSchemaOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateApiTokenSchemaOneOf2(val *CreateApiTokenSchemaOneOf2) *NullableCreateApiTokenSchemaOneOf2 {
	return &NullableCreateApiTokenSchemaOneOf2{value: val, isSet: true}
}

func (v NullableCreateApiTokenSchemaOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateApiTokenSchemaOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
