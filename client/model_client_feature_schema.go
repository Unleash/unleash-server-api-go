/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ClientFeatureSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientFeatureSchema{}

// ClientFeatureSchema Feature toggle configuration used by SDKs to evaluate state of a toggle
type ClientFeatureSchema struct {
	// The unique name of a feature toggle. Is validated to be URL safe on creation
	Name string `json:"name"`
	// What kind of feature flag is this. Refer to the documentation on [feature toggle types](https://docs.getunleash.io/reference/feature-toggle-types) for more information
	Type *string `json:"type,omitempty"`
	// A description of the toggle
	Description NullableString `json:"description,omitempty"`
	// Whether the feature flag is enabled for the current API key or not. This is ANDed with the evaluation results of the strategies list, so if this is false, the evaluation result will always be false
	Enabled bool `json:"enabled"`
	// If this is true Unleash believes this feature toggle has been active longer than Unleash expects a toggle of this type to be active
	Stale *bool `json:"stale,omitempty"`
	// Set to true if SDKs should trigger [impression events](https://docs.getunleash.io/reference/impression-data) when this toggle is evaluated
	ImpressionData NullableBool `json:"impressionData,omitempty"`
	// Which project this feature toggle belongs to
	Project *string `json:"project,omitempty"`
	// Evaluation strategies for this toggle. Each entry in this list will be evaluated and ORed together
	Strategies []FeatureStrategySchema `json:"strategies,omitempty"`
	// [Variants](https://docs.getunleash.io/reference/feature-toggle-variants#what-are-variants) configured for this toggle
	Variants []VariantSchema `json:"variants,omitempty"`
}

// NewClientFeatureSchema instantiates a new ClientFeatureSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientFeatureSchema(name string, enabled bool) *ClientFeatureSchema {
	this := ClientFeatureSchema{}
	this.Name = name
	this.Enabled = enabled
	return &this
}

// NewClientFeatureSchemaWithDefaults instantiates a new ClientFeatureSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientFeatureSchemaWithDefaults() *ClientFeatureSchema {
	this := ClientFeatureSchema{}
	return &this
}

// GetName returns the Name field value
func (o *ClientFeatureSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ClientFeatureSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ClientFeatureSchema) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ClientFeatureSchema) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFeatureSchema) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ClientFeatureSchema) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ClientFeatureSchema) SetType(v string) {
	o.Type = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClientFeatureSchema) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClientFeatureSchema) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ClientFeatureSchema) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ClientFeatureSchema) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ClientFeatureSchema) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ClientFeatureSchema) UnsetDescription() {
	o.Description.Unset()
}

// GetEnabled returns the Enabled field value
func (o *ClientFeatureSchema) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ClientFeatureSchema) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ClientFeatureSchema) SetEnabled(v bool) {
	o.Enabled = v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *ClientFeatureSchema) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFeatureSchema) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *ClientFeatureSchema) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *ClientFeatureSchema) SetStale(v bool) {
	o.Stale = &v
}

// GetImpressionData returns the ImpressionData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClientFeatureSchema) GetImpressionData() bool {
	if o == nil || IsNil(o.ImpressionData.Get()) {
		var ret bool
		return ret
	}
	return *o.ImpressionData.Get()
}

// GetImpressionDataOk returns a tuple with the ImpressionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClientFeatureSchema) GetImpressionDataOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImpressionData.Get(), o.ImpressionData.IsSet()
}

// HasImpressionData returns a boolean if a field has been set.
func (o *ClientFeatureSchema) HasImpressionData() bool {
	if o != nil && o.ImpressionData.IsSet() {
		return true
	}

	return false
}

// SetImpressionData gets a reference to the given NullableBool and assigns it to the ImpressionData field.
func (o *ClientFeatureSchema) SetImpressionData(v bool) {
	o.ImpressionData.Set(&v)
}
// SetImpressionDataNil sets the value for ImpressionData to be an explicit nil
func (o *ClientFeatureSchema) SetImpressionDataNil() {
	o.ImpressionData.Set(nil)
}

// UnsetImpressionData ensures that no value is present for ImpressionData, not even an explicit nil
func (o *ClientFeatureSchema) UnsetImpressionData() {
	o.ImpressionData.Unset()
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ClientFeatureSchema) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFeatureSchema) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ClientFeatureSchema) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *ClientFeatureSchema) SetProject(v string) {
	o.Project = &v
}

// GetStrategies returns the Strategies field value if set, zero value otherwise.
func (o *ClientFeatureSchema) GetStrategies() []FeatureStrategySchema {
	if o == nil || IsNil(o.Strategies) {
		var ret []FeatureStrategySchema
		return ret
	}
	return o.Strategies
}

// GetStrategiesOk returns a tuple with the Strategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientFeatureSchema) GetStrategiesOk() ([]FeatureStrategySchema, bool) {
	if o == nil || IsNil(o.Strategies) {
		return nil, false
	}
	return o.Strategies, true
}

// HasStrategies returns a boolean if a field has been set.
func (o *ClientFeatureSchema) HasStrategies() bool {
	if o != nil && !IsNil(o.Strategies) {
		return true
	}

	return false
}

// SetStrategies gets a reference to the given []FeatureStrategySchema and assigns it to the Strategies field.
func (o *ClientFeatureSchema) SetStrategies(v []FeatureStrategySchema) {
	o.Strategies = v
}

// GetVariants returns the Variants field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClientFeatureSchema) GetVariants() []VariantSchema {
	if o == nil {
		var ret []VariantSchema
		return ret
	}
	return o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClientFeatureSchema) GetVariantsOk() ([]VariantSchema, bool) {
	if o == nil || IsNil(o.Variants) {
		return nil, false
	}
	return o.Variants, true
}

// HasVariants returns a boolean if a field has been set.
func (o *ClientFeatureSchema) HasVariants() bool {
	if o != nil && IsNil(o.Variants) {
		return true
	}

	return false
}

// SetVariants gets a reference to the given []VariantSchema and assigns it to the Variants field.
func (o *ClientFeatureSchema) SetVariants(v []VariantSchema) {
	o.Variants = v
}

func (o ClientFeatureSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientFeatureSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	if o.ImpressionData.IsSet() {
		toSerialize["impressionData"] = o.ImpressionData.Get()
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Strategies) {
		toSerialize["strategies"] = o.Strategies
	}
	if o.Variants != nil {
		toSerialize["variants"] = o.Variants
	}
	return toSerialize, nil
}

type NullableClientFeatureSchema struct {
	value *ClientFeatureSchema
	isSet bool
}

func (v NullableClientFeatureSchema) Get() *ClientFeatureSchema {
	return v.value
}

func (v *NullableClientFeatureSchema) Set(val *ClientFeatureSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableClientFeatureSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableClientFeatureSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientFeatureSchema(val *ClientFeatureSchema) *NullableClientFeatureSchema {
	return &NullableClientFeatureSchema{value: val, isSet: true}
}

func (v NullableClientFeatureSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientFeatureSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


