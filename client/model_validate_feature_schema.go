/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.4.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ValidateFeatureSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidateFeatureSchema{}

// ValidateFeatureSchema Data used to validate a feature toggle's name.
type ValidateFeatureSchema struct {
	// The feature name to validate.
	Name string `json:"name"`
	// The id of the project that the feature flag will belong to. If the target project has a feature naming pattern defined, the name will be validated against that pattern.
	ProjectId NullableString `json:"projectId,omitempty"`
}

// NewValidateFeatureSchema instantiates a new ValidateFeatureSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateFeatureSchema(name string) *ValidateFeatureSchema {
	this := ValidateFeatureSchema{}
	this.Name = name
	return &this
}

// NewValidateFeatureSchemaWithDefaults instantiates a new ValidateFeatureSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateFeatureSchemaWithDefaults() *ValidateFeatureSchema {
	this := ValidateFeatureSchema{}
	return &this
}

// GetName returns the Name field value
func (o *ValidateFeatureSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ValidateFeatureSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ValidateFeatureSchema) SetName(v string) {
	o.Name = v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ValidateFeatureSchema) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId.Get()) {
		var ret string
		return ret
	}
	return *o.ProjectId.Get()
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ValidateFeatureSchema) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectId.Get(), o.ProjectId.IsSet()
}

// HasProjectId returns a boolean if a field has been set.
func (o *ValidateFeatureSchema) HasProjectId() bool {
	if o != nil && o.ProjectId.IsSet() {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given NullableString and assigns it to the ProjectId field.
func (o *ValidateFeatureSchema) SetProjectId(v string) {
	o.ProjectId.Set(&v)
}

// SetProjectIdNil sets the value for ProjectId to be an explicit nil
func (o *ValidateFeatureSchema) SetProjectIdNil() {
	o.ProjectId.Set(nil)
}

// UnsetProjectId ensures that no value is present for ProjectId, not even an explicit nil
func (o *ValidateFeatureSchema) UnsetProjectId() {
	o.ProjectId.Unset()
}

func (o ValidateFeatureSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidateFeatureSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.ProjectId.IsSet() {
		toSerialize["projectId"] = o.ProjectId.Get()
	}
	return toSerialize, nil
}

type NullableValidateFeatureSchema struct {
	value *ValidateFeatureSchema
	isSet bool
}

func (v NullableValidateFeatureSchema) Get() *ValidateFeatureSchema {
	return v.value
}

func (v *NullableValidateFeatureSchema) Set(val *ValidateFeatureSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateFeatureSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateFeatureSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateFeatureSchema(val *ValidateFeatureSchema) *NullableValidateFeatureSchema {
	return &NullableValidateFeatureSchema{value: val, isSet: true}
}

func (v NullableValidateFeatureSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateFeatureSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
