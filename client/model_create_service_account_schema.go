/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.7.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateServiceAccountSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateServiceAccountSchema{}

// CreateServiceAccountSchema Describes the properties required to create a new service account
type CreateServiceAccountSchema struct {
	// The username of the service account
	Username string `json:"username"`
	// The name of the service account
	Name string `json:"name"`
	// The id of the root role for the service account
	RootRole             int32 `json:"rootRole"`
	AdditionalProperties map[string]interface{}
}

type _CreateServiceAccountSchema CreateServiceAccountSchema

// NewCreateServiceAccountSchema instantiates a new CreateServiceAccountSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateServiceAccountSchema(username string, name string, rootRole int32) *CreateServiceAccountSchema {
	this := CreateServiceAccountSchema{}
	this.Username = username
	this.Name = name
	this.RootRole = rootRole
	return &this
}

// NewCreateServiceAccountSchemaWithDefaults instantiates a new CreateServiceAccountSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateServiceAccountSchemaWithDefaults() *CreateServiceAccountSchema {
	this := CreateServiceAccountSchema{}
	return &this
}

// GetUsername returns the Username field value
func (o *CreateServiceAccountSchema) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *CreateServiceAccountSchema) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *CreateServiceAccountSchema) SetUsername(v string) {
	o.Username = v
}

// GetName returns the Name field value
func (o *CreateServiceAccountSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateServiceAccountSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateServiceAccountSchema) SetName(v string) {
	o.Name = v
}

// GetRootRole returns the RootRole field value
func (o *CreateServiceAccountSchema) GetRootRole() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RootRole
}

// GetRootRoleOk returns a tuple with the RootRole field value
// and a boolean to check if the value has been set.
func (o *CreateServiceAccountSchema) GetRootRoleOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootRole, true
}

// SetRootRole sets field value
func (o *CreateServiceAccountSchema) SetRootRole(v int32) {
	o.RootRole = v
}

func (o CreateServiceAccountSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateServiceAccountSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["name"] = o.Name
	toSerialize["rootRole"] = o.RootRole

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateServiceAccountSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"name",
		"rootRole",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateServiceAccountSchema := _CreateServiceAccountSchema{}

	err = json.Unmarshal(data, &varCreateServiceAccountSchema)

	if err != nil {
		return err
	}

	*o = CreateServiceAccountSchema(varCreateServiceAccountSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "username")
		delete(additionalProperties, "name")
		delete(additionalProperties, "rootRole")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateServiceAccountSchema struct {
	value *CreateServiceAccountSchema
	isSet bool
}

func (v NullableCreateServiceAccountSchema) Get() *CreateServiceAccountSchema {
	return v.value
}

func (v *NullableCreateServiceAccountSchema) Set(val *CreateServiceAccountSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateServiceAccountSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateServiceAccountSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateServiceAccountSchema(val *CreateServiceAccountSchema) *NullableCreateServiceAccountSchema {
	return &NullableCreateServiceAccountSchema{value: val, isSet: true}
}

func (v NullableCreateServiceAccountSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateServiceAccountSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
