/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ApplicationsSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationsSchema{}

// ApplicationsSchema struct for ApplicationsSchema
type ApplicationsSchema struct {
	// Contains a list of applications that have connected via an SDK
	Applications []ApplicationSchema `json:"applications,omitempty"`
}

// NewApplicationsSchema instantiates a new ApplicationsSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationsSchema() *ApplicationsSchema {
	this := ApplicationsSchema{}
	return &this
}

// NewApplicationsSchemaWithDefaults instantiates a new ApplicationsSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationsSchemaWithDefaults() *ApplicationsSchema {
	this := ApplicationsSchema{}
	return &this
}

// GetApplications returns the Applications field value if set, zero value otherwise.
func (o *ApplicationsSchema) GetApplications() []ApplicationSchema {
	if o == nil || IsNil(o.Applications) {
		var ret []ApplicationSchema
		return ret
	}
	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationsSchema) GetApplicationsOk() ([]ApplicationSchema, bool) {
	if o == nil || IsNil(o.Applications) {
		return nil, false
	}
	return o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *ApplicationsSchema) HasApplications() bool {
	if o != nil && !IsNil(o.Applications) {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []ApplicationSchema and assigns it to the Applications field.
func (o *ApplicationsSchema) SetApplications(v []ApplicationSchema) {
	o.Applications = v
}

func (o ApplicationsSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationsSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Applications) {
		toSerialize["applications"] = o.Applications
	}
	return toSerialize, nil
}

type NullableApplicationsSchema struct {
	value *ApplicationsSchema
	isSet bool
}

func (v NullableApplicationsSchema) Get() *ApplicationsSchema {
	return v.value
}

func (v *NullableApplicationsSchema) Set(val *ApplicationsSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationsSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationsSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationsSchema(val *ApplicationsSchema) *NullableApplicationsSchema {
	return &NullableApplicationsSchema{value: val, isSet: true}
}

func (v NullableApplicationsSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationsSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
