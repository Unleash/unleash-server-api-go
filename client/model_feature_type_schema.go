/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the FeatureTypeSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureTypeSchema{}

// FeatureTypeSchema struct for FeatureTypeSchema
type FeatureTypeSchema struct {
	Id           string          `json:"id"`
	Name         string          `json:"name"`
	Description  string          `json:"description"`
	LifetimeDays NullableFloat32 `json:"lifetimeDays"`
}

// NewFeatureTypeSchema instantiates a new FeatureTypeSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureTypeSchema(id string, name string, description string, lifetimeDays NullableFloat32) *FeatureTypeSchema {
	this := FeatureTypeSchema{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.LifetimeDays = lifetimeDays
	return &this
}

// NewFeatureTypeSchemaWithDefaults instantiates a new FeatureTypeSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureTypeSchemaWithDefaults() *FeatureTypeSchema {
	this := FeatureTypeSchema{}
	return &this
}

// GetId returns the Id field value
func (o *FeatureTypeSchema) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FeatureTypeSchema) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FeatureTypeSchema) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *FeatureTypeSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FeatureTypeSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FeatureTypeSchema) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *FeatureTypeSchema) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *FeatureTypeSchema) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *FeatureTypeSchema) SetDescription(v string) {
	o.Description = v
}

// GetLifetimeDays returns the LifetimeDays field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *FeatureTypeSchema) GetLifetimeDays() float32 {
	if o == nil || o.LifetimeDays.Get() == nil {
		var ret float32
		return ret
	}

	return *o.LifetimeDays.Get()
}

// GetLifetimeDaysOk returns a tuple with the LifetimeDays field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureTypeSchema) GetLifetimeDaysOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LifetimeDays.Get(), o.LifetimeDays.IsSet()
}

// SetLifetimeDays sets field value
func (o *FeatureTypeSchema) SetLifetimeDays(v float32) {
	o.LifetimeDays.Set(&v)
}

func (o FeatureTypeSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureTypeSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["lifetimeDays"] = o.LifetimeDays.Get()
	return toSerialize, nil
}

type NullableFeatureTypeSchema struct {
	value *FeatureTypeSchema
	isSet bool
}

func (v NullableFeatureTypeSchema) Get() *FeatureTypeSchema {
	return v.value
}

func (v *NullableFeatureTypeSchema) Set(val *FeatureTypeSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureTypeSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureTypeSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureTypeSchema(val *FeatureTypeSchema) *NullableFeatureTypeSchema {
	return &NullableFeatureTypeSchema{value: val, isSet: true}
}

func (v NullableFeatureTypeSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureTypeSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
