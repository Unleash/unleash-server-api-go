/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the ProjectSchemaOwnersOneOfInner1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectSchemaOwnersOneOfInner1{}

// ProjectSchemaOwnersOneOfInner1 struct for ProjectSchemaOwnersOneOfInner1
type ProjectSchemaOwnersOneOfInner1 struct {
	OwnerType            string `json:"ownerType"`
	AdditionalProperties map[string]interface{}
}

type _ProjectSchemaOwnersOneOfInner1 ProjectSchemaOwnersOneOfInner1

// NewProjectSchemaOwnersOneOfInner1 instantiates a new ProjectSchemaOwnersOneOfInner1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectSchemaOwnersOneOfInner1(ownerType string) *ProjectSchemaOwnersOneOfInner1 {
	this := ProjectSchemaOwnersOneOfInner1{}
	this.OwnerType = ownerType
	return &this
}

// NewProjectSchemaOwnersOneOfInner1WithDefaults instantiates a new ProjectSchemaOwnersOneOfInner1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectSchemaOwnersOneOfInner1WithDefaults() *ProjectSchemaOwnersOneOfInner1 {
	this := ProjectSchemaOwnersOneOfInner1{}
	return &this
}

// GetOwnerType returns the OwnerType field value
func (o *ProjectSchemaOwnersOneOfInner1) GetOwnerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerType
}

// GetOwnerTypeOk returns a tuple with the OwnerType field value
// and a boolean to check if the value has been set.
func (o *ProjectSchemaOwnersOneOfInner1) GetOwnerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerType, true
}

// SetOwnerType sets field value
func (o *ProjectSchemaOwnersOneOfInner1) SetOwnerType(v string) {
	o.OwnerType = v
}

func (o ProjectSchemaOwnersOneOfInner1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectSchemaOwnersOneOfInner1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ownerType"] = o.OwnerType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProjectSchemaOwnersOneOfInner1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ownerType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectSchemaOwnersOneOfInner1 := _ProjectSchemaOwnersOneOfInner1{}

	err = json.Unmarshal(data, &varProjectSchemaOwnersOneOfInner1)

	if err != nil {
		return err
	}

	*o = ProjectSchemaOwnersOneOfInner1(varProjectSchemaOwnersOneOfInner1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ownerType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProjectSchemaOwnersOneOfInner1 struct {
	value *ProjectSchemaOwnersOneOfInner1
	isSet bool
}

func (v NullableProjectSchemaOwnersOneOfInner1) Get() *ProjectSchemaOwnersOneOfInner1 {
	return v.value
}

func (v *NullableProjectSchemaOwnersOneOfInner1) Set(val *ProjectSchemaOwnersOneOfInner1) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectSchemaOwnersOneOfInner1) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectSchemaOwnersOneOfInner1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectSchemaOwnersOneOfInner1(val *ProjectSchemaOwnersOneOfInner1) *NullableProjectSchemaOwnersOneOfInner1 {
	return &NullableProjectSchemaOwnersOneOfInner1{value: val, isSet: true}
}

func (v NullableProjectSchemaOwnersOneOfInner1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectSchemaOwnersOneOfInner1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
