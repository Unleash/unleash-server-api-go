/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the BatchStaleSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchStaleSchema{}

// BatchStaleSchema A list of features to operate on and whether they should be marked as stale or as not stale.
type BatchStaleSchema struct {
	// A list of features to mark as (not) stale
	Features []string `json:"features"`
	// Whether the list of features should be marked as stale or not stale. If `true`, the features will be marked as stale. If `false`, the features will be marked as not stale.
	Stale bool `json:"stale"`
}

// NewBatchStaleSchema instantiates a new BatchStaleSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchStaleSchema(features []string, stale bool) *BatchStaleSchema {
	this := BatchStaleSchema{}
	this.Features = features
	this.Stale = stale
	return &this
}

// NewBatchStaleSchemaWithDefaults instantiates a new BatchStaleSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchStaleSchemaWithDefaults() *BatchStaleSchema {
	this := BatchStaleSchema{}
	return &this
}

// GetFeatures returns the Features field value
func (o *BatchStaleSchema) GetFeatures() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value
// and a boolean to check if the value has been set.
func (o *BatchStaleSchema) GetFeaturesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Features, true
}

// SetFeatures sets field value
func (o *BatchStaleSchema) SetFeatures(v []string) {
	o.Features = v
}

// GetStale returns the Stale field value
func (o *BatchStaleSchema) GetStale() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Stale
}

// GetStaleOk returns a tuple with the Stale field value
// and a boolean to check if the value has been set.
func (o *BatchStaleSchema) GetStaleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stale, true
}

// SetStale sets field value
func (o *BatchStaleSchema) SetStale(v bool) {
	o.Stale = v
}

func (o BatchStaleSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchStaleSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["features"] = o.Features
	toSerialize["stale"] = o.Stale
	return toSerialize, nil
}

type NullableBatchStaleSchema struct {
	value *BatchStaleSchema
	isSet bool
}

func (v NullableBatchStaleSchema) Get() *BatchStaleSchema {
	return v.value
}

func (v *NullableBatchStaleSchema) Set(val *BatchStaleSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchStaleSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchStaleSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchStaleSchema(val *BatchStaleSchema) *NullableBatchStaleSchema {
	return &NullableBatchStaleSchema{value: val, isSet: true}
}

func (v NullableBatchStaleSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchStaleSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
