/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.6.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the CreateProjectSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateProjectSchema{}

// CreateProjectSchema Data used to create a new [project](https://docs.getunleash.io/reference/projects).
type CreateProjectSchema struct {
	// The project's identifier.
	Id string `json:"id"`
	// The project's name.
	Name string `json:"name"`
	// The project's description.
	Description NullableString `json:"description,omitempty"`
	// A mode of the project affecting what actions are possible in this project
	Mode *string `json:"mode,omitempty"`
	// A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
	DefaultStickiness *string `json:"defaultStickiness,omitempty"`
}

// NewCreateProjectSchema instantiates a new CreateProjectSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProjectSchema(id string, name string) *CreateProjectSchema {
	this := CreateProjectSchema{}
	this.Id = id
	this.Name = name
	return &this
}

// NewCreateProjectSchemaWithDefaults instantiates a new CreateProjectSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProjectSchemaWithDefaults() *CreateProjectSchema {
	this := CreateProjectSchema{}
	return &this
}

// GetId returns the Id field value
func (o *CreateProjectSchema) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CreateProjectSchema) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CreateProjectSchema) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CreateProjectSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateProjectSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateProjectSchema) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateProjectSchema) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateProjectSchema) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateProjectSchema) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CreateProjectSchema) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CreateProjectSchema) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CreateProjectSchema) UnsetDescription() {
	o.Description.Unset()
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *CreateProjectSchema) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectSchema) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *CreateProjectSchema) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *CreateProjectSchema) SetMode(v string) {
	o.Mode = &v
}

// GetDefaultStickiness returns the DefaultStickiness field value if set, zero value otherwise.
func (o *CreateProjectSchema) GetDefaultStickiness() string {
	if o == nil || IsNil(o.DefaultStickiness) {
		var ret string
		return ret
	}
	return *o.DefaultStickiness
}

// GetDefaultStickinessOk returns a tuple with the DefaultStickiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectSchema) GetDefaultStickinessOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultStickiness) {
		return nil, false
	}
	return o.DefaultStickiness, true
}

// HasDefaultStickiness returns a boolean if a field has been set.
func (o *CreateProjectSchema) HasDefaultStickiness() bool {
	if o != nil && !IsNil(o.DefaultStickiness) {
		return true
	}

	return false
}

// SetDefaultStickiness gets a reference to the given string and assigns it to the DefaultStickiness field.
func (o *CreateProjectSchema) SetDefaultStickiness(v string) {
	o.DefaultStickiness = &v
}

func (o CreateProjectSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateProjectSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.DefaultStickiness) {
		toSerialize["defaultStickiness"] = o.DefaultStickiness
	}
	return toSerialize, nil
}

type NullableCreateProjectSchema struct {
	value *CreateProjectSchema
	isSet bool
}

func (v NullableCreateProjectSchema) Get() *CreateProjectSchema {
	return v.value
}

func (v *NullableCreateProjectSchema) Set(val *CreateProjectSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProjectSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProjectSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProjectSchema(val *CreateProjectSchema) *NullableCreateProjectSchema {
	return &NullableCreateProjectSchema{value: val, isSet: true}
}

func (v NullableCreateProjectSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProjectSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
