/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.1.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateProjectSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateProjectSchema{}

// CreateProjectSchema Data used to create a new [project](https://docs.getunleash.io/reference/projects).
type CreateProjectSchema struct {
	// The project's identifier. If this property is not present or is an empty string, Unleash will generate the project id automatically. This property is deprecated.
	// Deprecated
	Id *string `json:"id,omitempty" validate:"regexp=[A-Za-z0-9_~.-]*"`
	// The project's name. The name must contain at least one non-whitespace character.
	Name string `json:"name" validate:"regexp=^(?!\\\\s*$).+"`
	// The project's description.
	Description NullableString `json:"description,omitempty"`
	// A mode of the project affecting what actions are possible in this project
	Mode *string `json:"mode,omitempty"`
	// A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
	DefaultStickiness *string `json:"defaultStickiness,omitempty"`
	// A list of environments that should be enabled for this project. When provided, the list must contain at least one environment. If this property is missing, Unleash will default to enabling all non-deprecated environments for the project.
	Environments []string `json:"environments,omitempty"`
	// A list of environments that should have change requests enabled. If the list includes environments not in the `environments` list, they will still have change requests enabled.
	ChangeRequestEnvironments []CreateProjectSchemaChangeRequestEnvironmentsInner `json:"changeRequestEnvironments,omitempty"`
	AdditionalProperties      map[string]interface{}
}

type _CreateProjectSchema CreateProjectSchema

// NewCreateProjectSchema instantiates a new CreateProjectSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProjectSchema(name string) *CreateProjectSchema {
	this := CreateProjectSchema{}
	this.Name = name
	var mode string = "open"
	this.Mode = &mode
	var defaultStickiness string = "default"
	this.DefaultStickiness = &defaultStickiness
	return &this
}

// NewCreateProjectSchemaWithDefaults instantiates a new CreateProjectSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProjectSchemaWithDefaults() *CreateProjectSchema {
	this := CreateProjectSchema{}
	var mode string = "open"
	this.Mode = &mode
	var defaultStickiness string = "default"
	this.DefaultStickiness = &defaultStickiness
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
// Deprecated
func (o *CreateProjectSchema) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CreateProjectSchema) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CreateProjectSchema) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
// Deprecated
func (o *CreateProjectSchema) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *CreateProjectSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateProjectSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateProjectSchema) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateProjectSchema) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateProjectSchema) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateProjectSchema) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CreateProjectSchema) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CreateProjectSchema) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CreateProjectSchema) UnsetDescription() {
	o.Description.Unset()
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *CreateProjectSchema) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectSchema) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *CreateProjectSchema) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *CreateProjectSchema) SetMode(v string) {
	o.Mode = &v
}

// GetDefaultStickiness returns the DefaultStickiness field value if set, zero value otherwise.
func (o *CreateProjectSchema) GetDefaultStickiness() string {
	if o == nil || IsNil(o.DefaultStickiness) {
		var ret string
		return ret
	}
	return *o.DefaultStickiness
}

// GetDefaultStickinessOk returns a tuple with the DefaultStickiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectSchema) GetDefaultStickinessOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultStickiness) {
		return nil, false
	}
	return o.DefaultStickiness, true
}

// HasDefaultStickiness returns a boolean if a field has been set.
func (o *CreateProjectSchema) HasDefaultStickiness() bool {
	if o != nil && !IsNil(o.DefaultStickiness) {
		return true
	}

	return false
}

// SetDefaultStickiness gets a reference to the given string and assigns it to the DefaultStickiness field.
func (o *CreateProjectSchema) SetDefaultStickiness(v string) {
	o.DefaultStickiness = &v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *CreateProjectSchema) GetEnvironments() []string {
	if o == nil || IsNil(o.Environments) {
		var ret []string
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectSchema) GetEnvironmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *CreateProjectSchema) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *CreateProjectSchema) SetEnvironments(v []string) {
	o.Environments = v
}

// GetChangeRequestEnvironments returns the ChangeRequestEnvironments field value if set, zero value otherwise.
func (o *CreateProjectSchema) GetChangeRequestEnvironments() []CreateProjectSchemaChangeRequestEnvironmentsInner {
	if o == nil || IsNil(o.ChangeRequestEnvironments) {
		var ret []CreateProjectSchemaChangeRequestEnvironmentsInner
		return ret
	}
	return o.ChangeRequestEnvironments
}

// GetChangeRequestEnvironmentsOk returns a tuple with the ChangeRequestEnvironments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectSchema) GetChangeRequestEnvironmentsOk() ([]CreateProjectSchemaChangeRequestEnvironmentsInner, bool) {
	if o == nil || IsNil(o.ChangeRequestEnvironments) {
		return nil, false
	}
	return o.ChangeRequestEnvironments, true
}

// HasChangeRequestEnvironments returns a boolean if a field has been set.
func (o *CreateProjectSchema) HasChangeRequestEnvironments() bool {
	if o != nil && !IsNil(o.ChangeRequestEnvironments) {
		return true
	}

	return false
}

// SetChangeRequestEnvironments gets a reference to the given []CreateProjectSchemaChangeRequestEnvironmentsInner and assigns it to the ChangeRequestEnvironments field.
func (o *CreateProjectSchema) SetChangeRequestEnvironments(v []CreateProjectSchemaChangeRequestEnvironmentsInner) {
	o.ChangeRequestEnvironments = v
}

func (o CreateProjectSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateProjectSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.DefaultStickiness) {
		toSerialize["defaultStickiness"] = o.DefaultStickiness
	}
	if !IsNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	if !IsNil(o.ChangeRequestEnvironments) {
		toSerialize["changeRequestEnvironments"] = o.ChangeRequestEnvironments
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateProjectSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateProjectSchema := _CreateProjectSchema{}

	err = json.Unmarshal(data, &varCreateProjectSchema)

	if err != nil {
		return err
	}

	*o = CreateProjectSchema(varCreateProjectSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "defaultStickiness")
		delete(additionalProperties, "environments")
		delete(additionalProperties, "changeRequestEnvironments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateProjectSchema struct {
	value *CreateProjectSchema
	isSet bool
}

func (v NullableCreateProjectSchema) Get() *CreateProjectSchema {
	return v.value
}

func (v *NullableCreateProjectSchema) Set(val *CreateProjectSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProjectSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProjectSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProjectSchema(val *CreateProjectSchema) *NullableCreateProjectSchema {
	return &NullableCreateProjectSchema{value: val, isSet: true}
}

func (v NullableCreateProjectSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProjectSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
