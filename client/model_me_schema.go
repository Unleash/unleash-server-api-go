/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.4.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the MeSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeSchema{}

// MeSchema Detailed user information
type MeSchema struct {
	User UserSchema `json:"user"`
	// User permissions for projects and environments
	Permissions []PermissionSchema `json:"permissions"`
	// User feedback information
	Feedback []FeedbackResponseSchema `json:"feedback"`
	// Splash screen configuration
	Splash map[string]bool `json:"splash"`
}

// NewMeSchema instantiates a new MeSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeSchema(user UserSchema, permissions []PermissionSchema, feedback []FeedbackResponseSchema, splash map[string]bool) *MeSchema {
	this := MeSchema{}
	this.User = user
	this.Permissions = permissions
	this.Feedback = feedback
	this.Splash = splash
	return &this
}

// NewMeSchemaWithDefaults instantiates a new MeSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeSchemaWithDefaults() *MeSchema {
	this := MeSchema{}
	return &this
}

// GetUser returns the User field value
func (o *MeSchema) GetUser() UserSchema {
	if o == nil {
		var ret UserSchema
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *MeSchema) GetUserOk() (*UserSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *MeSchema) SetUser(v UserSchema) {
	o.User = v
}

// GetPermissions returns the Permissions field value
func (o *MeSchema) GetPermissions() []PermissionSchema {
	if o == nil {
		var ret []PermissionSchema
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *MeSchema) GetPermissionsOk() ([]PermissionSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *MeSchema) SetPermissions(v []PermissionSchema) {
	o.Permissions = v
}

// GetFeedback returns the Feedback field value
func (o *MeSchema) GetFeedback() []FeedbackResponseSchema {
	if o == nil {
		var ret []FeedbackResponseSchema
		return ret
	}

	return o.Feedback
}

// GetFeedbackOk returns a tuple with the Feedback field value
// and a boolean to check if the value has been set.
func (o *MeSchema) GetFeedbackOk() ([]FeedbackResponseSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Feedback, true
}

// SetFeedback sets field value
func (o *MeSchema) SetFeedback(v []FeedbackResponseSchema) {
	o.Feedback = v
}

// GetSplash returns the Splash field value
func (o *MeSchema) GetSplash() map[string]bool {
	if o == nil {
		var ret map[string]bool
		return ret
	}

	return o.Splash
}

// GetSplashOk returns a tuple with the Splash field value
// and a boolean to check if the value has been set.
func (o *MeSchema) GetSplashOk() (*map[string]bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Splash, true
}

// SetSplash sets field value
func (o *MeSchema) SetSplash(v map[string]bool) {
	o.Splash = v
}

func (o MeSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user"] = o.User
	toSerialize["permissions"] = o.Permissions
	toSerialize["feedback"] = o.Feedback
	toSerialize["splash"] = o.Splash
	return toSerialize, nil
}

type NullableMeSchema struct {
	value *MeSchema
	isSet bool
}

func (v NullableMeSchema) Get() *MeSchema {
	return v.value
}

func (v *NullableMeSchema) Set(val *MeSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableMeSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableMeSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeSchema(val *MeSchema) *NullableMeSchema {
	return &NullableMeSchema{value: val, isSet: true}
}

func (v NullableMeSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
