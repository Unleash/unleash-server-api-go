/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// UiConfigSchemaFlagsValue struct for UiConfigSchemaFlagsValue
type UiConfigSchemaFlagsValue struct {
	VariantFlagSchema *VariantFlagSchema
	bool              *bool
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *UiConfigSchemaFlagsValue) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into VariantFlagSchema
	err = json.Unmarshal(data, &dst.VariantFlagSchema)
	if err == nil {
		jsonVariantFlagSchema, _ := json.Marshal(dst.VariantFlagSchema)
		if string(jsonVariantFlagSchema) == "{}" { // empty struct
			dst.VariantFlagSchema = nil
		} else {
			return nil // data stored in dst.VariantFlagSchema, return on the first match
		}
	} else {
		dst.VariantFlagSchema = nil
	}

	// try to unmarshal JSON data into bool
	err = json.Unmarshal(data, &dst.bool)
	if err == nil {
		jsonbool, _ := json.Marshal(dst.bool)
		if string(jsonbool) == "{}" { // empty struct
			dst.bool = nil
		} else {
			return nil // data stored in dst.bool, return on the first match
		}
	} else {
		dst.bool = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(UiConfigSchemaFlagsValue)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *UiConfigSchemaFlagsValue) MarshalJSON() ([]byte, error) {
	if src.VariantFlagSchema != nil {
		return json.Marshal(&src.VariantFlagSchema)
	}

	if src.bool != nil {
		return json.Marshal(&src.bool)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableUiConfigSchemaFlagsValue struct {
	value *UiConfigSchemaFlagsValue
	isSet bool
}

func (v NullableUiConfigSchemaFlagsValue) Get() *UiConfigSchemaFlagsValue {
	return v.value
}

func (v *NullableUiConfigSchemaFlagsValue) Set(val *UiConfigSchemaFlagsValue) {
	v.value = val
	v.isSet = true
}

func (v NullableUiConfigSchemaFlagsValue) IsSet() bool {
	return v.isSet
}

func (v *NullableUiConfigSchemaFlagsValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUiConfigSchemaFlagsValue(val *UiConfigSchemaFlagsValue) *NullableUiConfigSchemaFlagsValue {
	return &NullableUiConfigSchemaFlagsValue{value: val, isSet: true}
}

func (v NullableUiConfigSchemaFlagsValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUiConfigSchemaFlagsValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
