/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.0-main
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PasswordSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordSchema{}

// PasswordSchema Fields used to create new password or update old password
type PasswordSchema struct {
	// The new password to change or validate.
	Password string `json:"password"`
	// The old password the user is changing. This field is for the non-admin users changing their own password.
	OldPassword *string `json:"oldPassword,omitempty"`
	// The confirmation of the new password. This field is for the non-admin users changing their own password.
	ConfirmPassword *string `json:"confirmPassword,omitempty"`
}

// NewPasswordSchema instantiates a new PasswordSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordSchema(password string) *PasswordSchema {
	this := PasswordSchema{}
	this.Password = password
	return &this
}

// NewPasswordSchemaWithDefaults instantiates a new PasswordSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordSchemaWithDefaults() *PasswordSchema {
	this := PasswordSchema{}
	return &this
}

// GetPassword returns the Password field value
func (o *PasswordSchema) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *PasswordSchema) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *PasswordSchema) SetPassword(v string) {
	o.Password = v
}

// GetOldPassword returns the OldPassword field value if set, zero value otherwise.
func (o *PasswordSchema) GetOldPassword() string {
	if o == nil || IsNil(o.OldPassword) {
		var ret string
		return ret
	}
	return *o.OldPassword
}

// GetOldPasswordOk returns a tuple with the OldPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordSchema) GetOldPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.OldPassword) {
		return nil, false
	}
	return o.OldPassword, true
}

// HasOldPassword returns a boolean if a field has been set.
func (o *PasswordSchema) HasOldPassword() bool {
	if o != nil && !IsNil(o.OldPassword) {
		return true
	}

	return false
}

// SetOldPassword gets a reference to the given string and assigns it to the OldPassword field.
func (o *PasswordSchema) SetOldPassword(v string) {
	o.OldPassword = &v
}

// GetConfirmPassword returns the ConfirmPassword field value if set, zero value otherwise.
func (o *PasswordSchema) GetConfirmPassword() string {
	if o == nil || IsNil(o.ConfirmPassword) {
		var ret string
		return ret
	}
	return *o.ConfirmPassword
}

// GetConfirmPasswordOk returns a tuple with the ConfirmPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordSchema) GetConfirmPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ConfirmPassword) {
		return nil, false
	}
	return o.ConfirmPassword, true
}

// HasConfirmPassword returns a boolean if a field has been set.
func (o *PasswordSchema) HasConfirmPassword() bool {
	if o != nil && !IsNil(o.ConfirmPassword) {
		return true
	}

	return false
}

// SetConfirmPassword gets a reference to the given string and assigns it to the ConfirmPassword field.
func (o *PasswordSchema) SetConfirmPassword(v string) {
	o.ConfirmPassword = &v
}

func (o PasswordSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["password"] = o.Password
	if !IsNil(o.OldPassword) {
		toSerialize["oldPassword"] = o.OldPassword
	}
	if !IsNil(o.ConfirmPassword) {
		toSerialize["confirmPassword"] = o.ConfirmPassword
	}
	return toSerialize, nil
}

type NullablePasswordSchema struct {
	value *PasswordSchema
	isSet bool
}

func (v NullablePasswordSchema) Get() *PasswordSchema {
	return v.value
}

func (v *NullablePasswordSchema) Set(val *PasswordSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordSchema(val *PasswordSchema) *NullablePasswordSchema {
	return &NullablePasswordSchema{value: val, isSet: true}
}

func (v NullablePasswordSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
