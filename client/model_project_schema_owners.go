/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ProjectSchemaOwners - The users and/or groups that have the \"owner\" role in this project. If no such users or groups exist, the list will contain the \"system\" owner instead.
type ProjectSchemaOwners struct {
	ArrayOfProjectSchemaOwnersOneOfInner  *[]ProjectSchemaOwnersOneOfInner
	ArrayOfProjectSchemaOwnersOneOfInner1 *[]ProjectSchemaOwnersOneOfInner1
}

// []ProjectSchemaOwnersOneOfInnerAsProjectSchemaOwners is a convenience function that returns []ProjectSchemaOwnersOneOfInner wrapped in ProjectSchemaOwners
func ArrayOfProjectSchemaOwnersOneOfInnerAsProjectSchemaOwners(v *[]ProjectSchemaOwnersOneOfInner) ProjectSchemaOwners {
	return ProjectSchemaOwners{
		ArrayOfProjectSchemaOwnersOneOfInner: v,
	}
}

// []ProjectSchemaOwnersOneOfInner1AsProjectSchemaOwners is a convenience function that returns []ProjectSchemaOwnersOneOfInner1 wrapped in ProjectSchemaOwners
func ArrayOfProjectSchemaOwnersOneOfInner1AsProjectSchemaOwners(v *[]ProjectSchemaOwnersOneOfInner1) ProjectSchemaOwners {
	return ProjectSchemaOwners{
		ArrayOfProjectSchemaOwnersOneOfInner1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ProjectSchemaOwners) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfProjectSchemaOwnersOneOfInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfProjectSchemaOwnersOneOfInner)
	if err == nil {
		jsonArrayOfProjectSchemaOwnersOneOfInner, _ := json.Marshal(dst.ArrayOfProjectSchemaOwnersOneOfInner)
		if string(jsonArrayOfProjectSchemaOwnersOneOfInner) == "{}" { // empty struct
			dst.ArrayOfProjectSchemaOwnersOneOfInner = nil
		} else {
			if err = validator.Validate(dst.ArrayOfProjectSchemaOwnersOneOfInner); err != nil {
				dst.ArrayOfProjectSchemaOwnersOneOfInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfProjectSchemaOwnersOneOfInner = nil
	}

	// try to unmarshal data into ArrayOfProjectSchemaOwnersOneOfInner1
	err = newStrictDecoder(data).Decode(&dst.ArrayOfProjectSchemaOwnersOneOfInner1)
	if err == nil {
		jsonArrayOfProjectSchemaOwnersOneOfInner1, _ := json.Marshal(dst.ArrayOfProjectSchemaOwnersOneOfInner1)
		if string(jsonArrayOfProjectSchemaOwnersOneOfInner1) == "{}" { // empty struct
			dst.ArrayOfProjectSchemaOwnersOneOfInner1 = nil
		} else {
			if err = validator.Validate(dst.ArrayOfProjectSchemaOwnersOneOfInner1); err != nil {
				dst.ArrayOfProjectSchemaOwnersOneOfInner1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfProjectSchemaOwnersOneOfInner1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfProjectSchemaOwnersOneOfInner = nil
		dst.ArrayOfProjectSchemaOwnersOneOfInner1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ProjectSchemaOwners)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ProjectSchemaOwners)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ProjectSchemaOwners) MarshalJSON() ([]byte, error) {
	if src.ArrayOfProjectSchemaOwnersOneOfInner != nil {
		return json.Marshal(&src.ArrayOfProjectSchemaOwnersOneOfInner)
	}

	if src.ArrayOfProjectSchemaOwnersOneOfInner1 != nil {
		return json.Marshal(&src.ArrayOfProjectSchemaOwnersOneOfInner1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ProjectSchemaOwners) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfProjectSchemaOwnersOneOfInner != nil {
		return obj.ArrayOfProjectSchemaOwnersOneOfInner
	}

	if obj.ArrayOfProjectSchemaOwnersOneOfInner1 != nil {
		return obj.ArrayOfProjectSchemaOwnersOneOfInner1
	}

	// all schemas are nil
	return nil
}

type NullableProjectSchemaOwners struct {
	value *ProjectSchemaOwners
	isSet bool
}

func (v NullableProjectSchemaOwners) Get() *ProjectSchemaOwners {
	return v.value
}

func (v *NullableProjectSchemaOwners) Set(val *ProjectSchemaOwners) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectSchemaOwners) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectSchemaOwners) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectSchemaOwners(val *ProjectSchemaOwners) *NullableProjectSchemaOwners {
	return &NullableProjectSchemaOwners{value: val, isSet: true}
}

func (v NullableProjectSchemaOwners) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectSchemaOwners) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
