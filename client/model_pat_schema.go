/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 6.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PatSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatSchema{}

// PatSchema Describes a [personal access token](https://docs.getunleash.io/how-to/how-to-create-personal-access-tokens), or PAT. PATs are automatically scoped to the authenticated user.
type PatSchema struct {
	// The PAT's ID. PAT IDs are incrementing integers. In other words, a more recently created PAT will always have a higher ID than an older one.
	Id int32 `json:"id"`
	// The token used for authentication. It is automatically generated by Unleash when the PAT is created and that is the only time this property is returned.
	Secret *string `json:"secret,omitempty"`
	// The date and time of when the PAT was created.
	CreatedAt time.Time `json:"createdAt"`
	// When the PAT was last seen/used to authenticate with. `null` if it has not been used yet.
	SeenAt NullableTime `json:"seenAt,omitempty"`
	// The ID of the user this PAT belongs to.
	UserId *int32 `json:"userId,omitempty"`
	// The PAT's description.
	Description string `json:"description"`
	// The PAT's expiration date.
	ExpiresAt            time.Time `json:"expiresAt"`
	AdditionalProperties map[string]interface{}
}

type _PatSchema PatSchema

// NewPatSchema instantiates a new PatSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatSchema(id int32, createdAt time.Time, description string, expiresAt time.Time) *PatSchema {
	this := PatSchema{}
	this.Id = id
	this.CreatedAt = createdAt
	this.Description = description
	this.ExpiresAt = expiresAt
	return &this
}

// NewPatSchemaWithDefaults instantiates a new PatSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatSchemaWithDefaults() *PatSchema {
	this := PatSchema{}
	return &this
}

// GetId returns the Id field value
func (o *PatSchema) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PatSchema) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PatSchema) SetId(v int32) {
	o.Id = v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *PatSchema) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatSchema) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *PatSchema) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *PatSchema) SetSecret(v string) {
	o.Secret = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PatSchema) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PatSchema) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PatSchema) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetSeenAt returns the SeenAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatSchema) GetSeenAt() time.Time {
	if o == nil || IsNil(o.SeenAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.SeenAt.Get()
}

// GetSeenAtOk returns a tuple with the SeenAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatSchema) GetSeenAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeenAt.Get(), o.SeenAt.IsSet()
}

// HasSeenAt returns a boolean if a field has been set.
func (o *PatSchema) HasSeenAt() bool {
	if o != nil && o.SeenAt.IsSet() {
		return true
	}

	return false
}

// SetSeenAt gets a reference to the given NullableTime and assigns it to the SeenAt field.
func (o *PatSchema) SetSeenAt(v time.Time) {
	o.SeenAt.Set(&v)
}

// SetSeenAtNil sets the value for SeenAt to be an explicit nil
func (o *PatSchema) SetSeenAtNil() {
	o.SeenAt.Set(nil)
}

// UnsetSeenAt ensures that no value is present for SeenAt, not even an explicit nil
func (o *PatSchema) UnsetSeenAt() {
	o.SeenAt.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PatSchema) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatSchema) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PatSchema) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *PatSchema) SetUserId(v int32) {
	o.UserId = &v
}

// GetDescription returns the Description field value
func (o *PatSchema) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PatSchema) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PatSchema) SetDescription(v string) {
	o.Description = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *PatSchema) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *PatSchema) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *PatSchema) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

func (o PatSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	toSerialize["createdAt"] = o.CreatedAt
	if o.SeenAt.IsSet() {
		toSerialize["seenAt"] = o.SeenAt.Get()
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	toSerialize["description"] = o.Description
	toSerialize["expiresAt"] = o.ExpiresAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"createdAt",
		"description",
		"expiresAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatSchema := _PatSchema{}

	err = json.Unmarshal(data, &varPatSchema)

	if err != nil {
		return err
	}

	*o = PatSchema(varPatSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "secret")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "seenAt")
		delete(additionalProperties, "userId")
		delete(additionalProperties, "description")
		delete(additionalProperties, "expiresAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatSchema struct {
	value *PatSchema
	isSet bool
}

func (v NullablePatSchema) Get() *PatSchema {
	return v.value
}

func (v *NullablePatSchema) Set(val *PatSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePatSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePatSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatSchema(val *PatSchema) *NullablePatSchema {
	return &NullablePatSchema{value: val, isSet: true}
}

func (v NullablePatSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
