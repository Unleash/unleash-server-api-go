/*
Unleash API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 5.2.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the PublicSignupTokenCreateSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicSignupTokenCreateSchema{}

// PublicSignupTokenCreateSchema Used for creating a [public invite link](https://docs.getunleash.io/reference/public-signup#public-sign-up-tokens)
type PublicSignupTokenCreateSchema struct {
	// The token's name.
	Name string `json:"name"`
	// The token's expiration date.
	ExpiresAt time.Time `json:"expiresAt"`
}

// NewPublicSignupTokenCreateSchema instantiates a new PublicSignupTokenCreateSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicSignupTokenCreateSchema(name string, expiresAt time.Time) *PublicSignupTokenCreateSchema {
	this := PublicSignupTokenCreateSchema{}
	this.Name = name
	this.ExpiresAt = expiresAt
	return &this
}

// NewPublicSignupTokenCreateSchemaWithDefaults instantiates a new PublicSignupTokenCreateSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicSignupTokenCreateSchemaWithDefaults() *PublicSignupTokenCreateSchema {
	this := PublicSignupTokenCreateSchema{}
	return &this
}

// GetName returns the Name field value
func (o *PublicSignupTokenCreateSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublicSignupTokenCreateSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublicSignupTokenCreateSchema) SetName(v string) {
	o.Name = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *PublicSignupTokenCreateSchema) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *PublicSignupTokenCreateSchema) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *PublicSignupTokenCreateSchema) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

func (o PublicSignupTokenCreateSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicSignupTokenCreateSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["expiresAt"] = o.ExpiresAt
	return toSerialize, nil
}

type NullablePublicSignupTokenCreateSchema struct {
	value *PublicSignupTokenCreateSchema
	isSet bool
}

func (v NullablePublicSignupTokenCreateSchema) Get() *PublicSignupTokenCreateSchema {
	return v.value
}

func (v *NullablePublicSignupTokenCreateSchema) Set(val *PublicSignupTokenCreateSchema) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicSignupTokenCreateSchema) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicSignupTokenCreateSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicSignupTokenCreateSchema(val *PublicSignupTokenCreateSchema) *NullablePublicSignupTokenCreateSchema {
	return &NullablePublicSignupTokenCreateSchema{value: val, isSet: true}
}

func (v NullablePublicSignupTokenCreateSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicSignupTokenCreateSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
