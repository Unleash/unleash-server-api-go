{
  "openapi": "3.0.3",
  "info": {
    "title": "Unleash API",
    "version": "5.6.0-main"
  },
  "servers": [
    {
      "url": "https://us.app.unleash-hosted.com/ushosted"
    }
  ],
  "paths": {
    "/api/admin/roles": {
      "get": {
        "operationId": "getRoles",
        "summary": "Get a list of roles",
        "description": "Get a list of project, root and custom roles for Role-Based Access Control",
        "responses": {
          "200": {
            "description": "rolesWithVersionSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rolesWithVersionSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "post": {
        "operationId": "createRole",
        "summary": "Create a new role",
        "description": "Create a new custom role for Role-Based Access Control",
        "requestBody": {
          "description": "createRoleWithPermissionsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createRoleWithPermissionsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "roleWithVersionSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/roleWithVersionSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "ValidationError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent []."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NameExistsError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\"."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/admin/roles/{roleId}": {
      "get": {
        "operationId": "getRoleById",
        "summary": "Get a single role",
        "description": "Get a single role by role id",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "roleWithPermissionsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/roleWithPermissionsSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "ValidationError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent []."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\"."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "put": {
        "operationId": "updateRole",
        "summary": "Update a role",
        "description": "Update a custom role by role id",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "createRoleWithPermissionsSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createRoleWithPermissionsSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "roleWithVersionSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/roleWithVersionSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "ValidationError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent []."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\"."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NameExistsError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "There is already a feature called \"my-awesome-feature\"."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "deleteRole",
        "summary": "Delete a custom role",
        "description": "Delete a custom role by id. You cannot delete built-in roles or roles that are in use.",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "ValidationError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent []."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\"."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/admin/projects": {
      "get": {
        "operationId": "getProjects",
        "summary": "Get a list of all projects.",
        "description": "This endpoint returns an list of all the projects in the Unleash instance.",
        "responses": {
          "200": {
            "description": "projectsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "operationId": "createProject",
        "summary": "Create project",
        "description": "Create a new [Unleash project](https://docs.getunleash.io/reference/projects).",
        "requestBody": {
          "description": "createProjectSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createProjectSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The resource was successfully created.",
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectCreatedSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "ValidationError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent []."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "ContentTypeerror"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/admin/projects/{projectId}": {
      "put": {
        "operationId": "updateProject",
        "summary": "Update project",
        "description": "Update a project with new configuration. Any fields not provided are ignored.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "updateProjectSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateProjectSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "ValidationError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent []."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\"."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "ContentTypeerror"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Projects"
        ]
      },
      "delete": {
        "operationId": "deleteProject",
        "summary": "Delete project",
        "description": "Permanently delete the provided project. All feature toggles in the project must be archived before you can delete it. This permanently deletes the project and its archived toggles. It can not be undone.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "ValidationError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent []."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/admin/projects/{projectId}/access": {
      "get": {
        "operationId": "getProjectAccess",
        "summary": "Get users and groups in project",
        "description": "Get all groups, users and their roles, and available roles for the given project.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "projectAccessSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectAccessSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Projects"
        ]
      },
      "put": {
        "operationId": "setProjectAccess",
        "summary": "Set users and groups to roles in the current project",
        "description": "Sets all groups, users and their roles for the given project, overriding any existing configuration.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "projectAccessConfigurationSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/projectAccessConfigurationSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/admin/permissions": {
      "get": {
        "operationId": "getPermissions",
        "summary": "Gets available permissions",
        "description": "Returns a list of available permissions",
        "responses": {
          "200": {
            "description": "adminPermissionsSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminPermissionsSchema"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/admin/api-tokens": {
      "get": {
        "operationId": "getAllApiTokens",
        "summary": "Get API tokens",
        "description": "Retrieves all API tokens that exist in the Unleash instance.",
        "responses": {
          "200": {
            "description": "apiTokensSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokensSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "API tokens"
        ]
      },
      "post": {
        "operationId": "createApiToken",
        "summary": "Create API token",
        "description": "Create an API token of a specific type: one of client, admin, frontend.",
        "requestBody": {
          "description": "createApiTokenSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createApiTokenSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The resource was successfully created.",
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokenSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "ContentTypeerror"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "API tokens"
        ]
      }
    },
    "/api/admin/api-tokens/{name}": {
      "get": {
        "operationId": "getApiTokensByName",
        "summary": "Get API tokens by name",
        "description": "Retrieves all API tokens that match a given token name. Because token names are not unique, this endpoint will always return a list. If no tokens with the provided name exist, the list will be empty. Otherwise, it will contain all the tokens with the given name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "apiTokensSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokensSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "API tokens"
        ]
      }
    },
    "/api/admin/api-tokens/{token}": {
      "put": {
        "operationId": "updateApiToken",
        "summary": "Update API token",
        "description": "Updates an existing API token with a new expiry date. The `token` path parameter is the token's `secret`. If the token does not exist, this endpoint returns a 200 OK, but does nothing.",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "updateApiTokenSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateApiTokenSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "The operation does not support request payloads of the provided type. Please ensure that you're using one of the listed payload types and that you have specified the right content type in the \"content-type\" header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "ContentTypeerror"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "We do not accept the content-type you provided (application/xml). Try using one of the content-types we do accept instead (application/json) and make sure the body is in the corresponding format."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "API tokens"
        ]
      },
      "delete": {
        "operationId": "deleteApiToken",
        "summary": "Delete API token",
        "description": "Deletes an existing API token. The `token` path parameter is the token's `secret`. If the token does not exist, this endpoint returns a 200 OK, but does nothing.",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "API tokens"
        ]
      }
    },
    "/api/admin/user-admin": {
      "post": {
        "operationId": "createUser",
        "summary": "Create a new user",
        "description": "Creates a new user with the given root role.",
        "requestBody": {
          "description": "createUserSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createUserSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The resource was successfully created.",
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createUserResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "ValidationError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent []."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/admin/user-admin/{id}": {
      "get": {
        "operationId": "getUser",
        "summary": "Get user",
        "description": "Will return a single user by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "userSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "ValidationError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent []."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\"."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "put": {
        "operationId": "updateUser",
        "summary": "Update a user",
        "description": "Only the explicitly specified fields get updated.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "updateUserSchema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateUserSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "createUserResponseSchema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createUserResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "The request data does not match what we expect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "ValidationError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "The request payload you provided doesn't conform to the schema. The .parameters property should be object. You sent []."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\"."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "deleteUser",
        "summary": "Delete a user",
        "description": "Deletes the user with the given userId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response has no body."
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the `authorization` header, e.g. `authorization:*.*.my-admin-token`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "AuthenticationRequired"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You must log in to use Unleash. Your request had no authorization header, so we could not authorize you. Try logging in at /auth/simple/login."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The provided user credentials are valid, but the user does not have the necessary permissions to perform this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NoAccessError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "You need the \"UPDATE_ADDON\" permission to perform this action in the \"development\" environment."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the error instance",
                      "type": "string",
                      "example": "9c40958a-daac-400e-98fb-3bb438567008"
                    },
                    "name": {
                      "description": "The name of the error kind",
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "message": {
                      "description": "A description of what went wrong.",
                      "type": "string",
                      "example": "Could not find the addon with ID \"12345\"."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "apiTokenSchema": {
        "description": "An overview of an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys).",
        "type": "object",
        "properties": {
          "secret": {
            "description": "The token used for authentication.",
            "type": "string",
            "example": "project:environment.xyzrandomstring"
          },
          "username": {
            "description": "This property was deprecated in Unleash v5. Prefer the `tokenName` property instead.",
            "type": "string",
            "example": "a-name",
            "deprecated": true
          },
          "tokenName": {
            "description": "A unique name for this particular token",
            "type": "string",
            "example": "some-user"
          },
          "type": {
            "description": "The type of API token",
            "type": "string",
            "example": "client",
            "enum": [
              "client",
              "admin",
              "frontend"
            ]
          },
          "environment": {
            "description": "The environment the token has access to. `*` if it has access to all environments.",
            "type": "string",
            "example": "development"
          },
          "project": {
            "description": "The project this token belongs to.",
            "type": "string",
            "example": "developerexperience"
          },
          "projects": {
            "description": "The list of projects this token has access to. If the token has access to specific projects they will be listed here. If the token has access to all projects it will be represented as `[*]`",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "developerexperience",
              "enterprisegrowth"
            ]
          },
          "expiresAt": {
            "description": "The token's expiration date. NULL if the token doesn't have an expiration set.",
            "type": "string",
            "format": "date-time",
            "example": "2023-04-19T08:15:14.000Z",
            "nullable": true
          },
          "createdAt": {
            "description": "When the token was created.",
            "type": "string",
            "format": "date-time",
            "example": "2023-04-19T08:15:14.000Z"
          },
          "seenAt": {
            "description": "When the token was last seen/used to authenticate with. NULL if the token has not yet been used for authentication.",
            "type": "string",
            "format": "date-time",
            "example": "2023-04-19T08:15:14.000Z",
            "nullable": true
          },
          "alias": {
            "description": "Alias is no longer in active use and will often be NULL. It's kept around as a way of allowing old proxy tokens created with the old metadata format to keep working.",
            "type": "string",
            "example": "randomid-or-some-alias",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "required": [
          "secret",
          "tokenName",
          "type",
          "project",
          "projects",
          "createdAt"
        ]
      },
      "apiTokensSchema": {
        "description": "An object with [Unleash API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys)",
        "type": "object",
        "properties": {
          "tokens": {
            "description": "A list of Unleash API tokens.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/apiTokenSchema"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "tokens"
        ]
      },
      "createApiTokenSchema": {
        "description": "The data required to create an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys).",
        "type": "object",
        "oneOf": [
          {
            "required": [
              "type",
              "tokenName"
            ],
            "type": "object",
            "properties": {
              "expiresAt": {
                "description": "The time when this token should expire.",
                "type": "string",
                "format": "date-time",
                "example": "2023-07-04T11:26:24+02:00"
              },
              "type": {
                "description": "An admin token. Must be the string \"admin\" (not case sensitive).",
                "type": "string",
                "example": "admin",
                "pattern": "^[Aa][Dd][Mm][Ii][Nn]$"
              },
              "tokenName": {
                "description": "The name of the token.",
                "type": "string",
                "example": "token-64522"
              }
            }
          },
          {
            "required": [
              "type",
              "username"
            ],
            "type": "object",
            "properties": {
              "expiresAt": {
                "description": "The time when this token should expire.",
                "type": "string",
                "format": "date-time",
                "example": "2023-07-04T11:26:24+02:00"
              },
              "type": {
                "description": "An admin token. Must be the string \"admin\" (not case sensitive).",
                "type": "string",
                "example": "admin",
                "pattern": "^[Aa][Dd][Mm][Ii][Nn]$"
              },
              "username": {
                "description": "The name of the token. This property is deprecated. Use `tokenName` instead.",
                "type": "string",
                "example": "token-64523",
                "deprecated": true
              }
            }
          },
          {
            "required": [
              "type",
              "tokenName"
            ],
            "type": "object",
            "properties": {
              "expiresAt": {
                "description": "The time when this token should expire.",
                "type": "string",
                "format": "date-time",
                "example": "2023-07-04T11:26:24+02:00"
              },
              "type": {
                "description": "A client or frontend token. Must be one of the strings \"client\" or \"frontend\" (not case sensitive).",
                "type": "string",
                "example": "frontend",
                "pattern": "^([Cc][Ll][Ii][Ee][Nn][Tt]|[Ff][Rr][Oo][Nn][Tt][Ee][Nn][Dd])$"
              },
              "environment": {
                "description": "The environment that the token should be valid for. Defaults to \"default\"",
                "type": "string",
                "example": "development"
              },
              "project": {
                "description": "The project that the token should be valid for. Defaults to \"*\" meaning every project. This property is mutually incompatible with the `projects` property. If you specify one, you cannot specify the other.",
                "type": "string",
                "example": "project-851"
              },
              "projects": {
                "description": "A list of projects that the token should be valid for. This property is mutually incompatible with the `project` property. If you specify one, you cannot specify the other.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "project-851",
                  "project-852"
                ]
              },
              "tokenName": {
                "description": "The name of the token.",
                "type": "string",
                "example": "token-64522"
              }
            }
          },
          {
            "required": [
              "type",
              "username"
            ],
            "type": "object",
            "properties": {
              "expiresAt": {
                "description": "The time when this token should expire.",
                "type": "string",
                "format": "date-time",
                "example": "2023-07-04T11:26:24+02:00"
              },
              "type": {
                "description": "A client or frontend token. Must be one of the strings \"client\" or \"frontend\" (not case sensitive).",
                "type": "string",
                "example": "frontend",
                "pattern": "^([Cc][Ll][Ii][Ee][Nn][Tt]|[Ff][Rr][Oo][Nn][Tt][Ee][Nn][Dd])$"
              },
              "environment": {
                "description": "The environment that the token should be valid for. Defaults to \"default\"",
                "type": "string",
                "example": "development"
              },
              "project": {
                "description": "The project that the token should be valid for. Defaults to \"*\" meaning every project. This property is mutually incompatible with the `projects` property. If you specify one, you cannot specify the other.",
                "type": "string",
                "example": "project-851"
              },
              "projects": {
                "description": "A list of projects that the token should be valid for. This property is mutually incompatible with the `project` property. If you specify one, you cannot specify the other.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "project-851",
                  "project-852"
                ]
              },
              "username": {
                "description": "The name of the token. This property is deprecated. Use `tokenName` instead.",
                "type": "string",
                "example": "token-64523",
                "deprecated": true
              }
            }
          }
        ]
      },
      "createUserSchema": {
        "description": "The payload must contain at least one of the name and email properties, though which one is up to you. For the user to be able to log in to the system, the user must have an email.",
        "type": "object",
        "properties": {
          "username": {
            "description": "The user's username. Must be provided if email is not provided.",
            "type": "string",
            "example": "hunter"
          },
          "email": {
            "description": "The user's email address. Must be provided if username is not provided.",
            "type": "string",
            "example": "user@example.com"
          },
          "name": {
            "description": "The user's name (not the user's username).",
            "type": "string",
            "example": "Sam Seawright"
          },
          "password": {
            "description": "Password for the user",
            "type": "string",
            "example": "k!5As3HquUrQ"
          },
          "rootRole": {
            "description": "The role to assign to the user. Can be either the role's ID or its unique name.",
            "oneOf": [
              {
                "type": "integer",
                "example": 1,
                "minimum": 0
              },
              {
                "type": "string",
                "example": "Admin",
                "enum": [
                  "Admin",
                  "Editor",
                  "Viewer",
                  "Owner",
                  "Member"
                ]
              }
            ]
          },
          "sendEmail": {
            "description": "Whether to send a welcome email with a login link to the user or not. Defaults to `true`.",
            "type": "boolean",
            "example": false
          }
        },
        "additionalProperties": false,
        "required": [
          "rootRole"
        ]
      },
      "groupUserModelSchema": {
        "description": "Details for a single user belonging to a group",
        "type": "object",
        "properties": {
          "joinedAt": {
            "description": "The date when the user joined the group",
            "type": "string",
            "format": "date-time",
            "example": "2023-06-30T11:41:00.123Z"
          },
          "createdBy": {
            "description": "The username of the user who added this user to this group",
            "type": "string",
            "example": "admin",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/userSchema"
          }
        },
        "additionalProperties": false,
        "required": [
          "user"
        ]
      },
      "projectSchema": {
        "description": "A definition of the project used for projects listing purposes",
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of this project",
            "type": "string",
            "example": "dx-squad"
          },
          "name": {
            "description": "The name of this project",
            "type": "string",
            "example": "DX-Squad"
          },
          "description": {
            "description": "Additional information about the project",
            "type": "string",
            "example": "DX squad feature release",
            "nullable": true
          },
          "health": {
            "description": "An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating) on a scale from 0 to 100",
            "type": "number",
            "example": 50
          },
          "featureCount": {
            "description": "The number of features this project has",
            "type": "number",
            "example": 10
          },
          "memberCount": {
            "description": "The number of members this project has",
            "type": "number",
            "example": 4
          },
          "createdAt": {
            "description": "When this project was created.",
            "type": "string",
            "format": "date-time",
            "example": "2023-07-27T12:12:28Z"
          },
          "updatedAt": {
            "description": "When this project was last updated.",
            "type": "string",
            "format": "date-time",
            "example": "2023-07-28T12:12:28Z",
            "nullable": true
          },
          "favorite": {
            "description": "`true` if the project was favorited, otherwise `false`.",
            "type": "boolean",
            "example": true
          },
          "mode": {
            "description": "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.",
            "type": "string",
            "example": "open",
            "enum": [
              "open",
              "protected",
              "private"
            ]
          },
          "defaultStickiness": {
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy",
            "type": "string",
            "example": "userId"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ]
      },
      "projectsSchema": {
        "description": "An overview of all the projects in the Unleash instance",
        "type": "object",
        "properties": {
          "version": {
            "description": "The schema version used to represent the project data.",
            "type": "integer",
            "example": 1
          },
          "projects": {
            "description": "A list of projects in the Unleash instance",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/projectSchema"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "version",
          "projects"
        ]
      },
      "roleSchema": {
        "description": "A role holds permissions to allow Unleash to decide what actions a role holder is allowed to perform",
        "type": "object",
        "properties": {
          "id": {
            "description": "The role id",
            "type": "integer",
            "example": 9,
            "minimum": 0
          },
          "type": {
            "description": "A role can either be a global root role (applies to all projects) or a project role",
            "type": "string",
            "example": "root"
          },
          "name": {
            "description": "The name of the role",
            "type": "string",
            "example": "Editor"
          },
          "description": {
            "description": "A more detailed description of the role and what use it's intended for",
            "type": "string",
            "example": "Users with the editor role have access to most features in Unleash but can not manage users and roles in the global scope. Editors will be added as project owners when creating projects and get superuser rights within the context of these projects. Users with the editor role will also get access to most permissions on the default project by default."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "name"
        ]
      },
      "updateApiTokenSchema": {
        "description": "An object with fields to updated for a given API token.",
        "type": "object",
        "properties": {
          "expiresAt": {
            "description": "The new time when this token should expire.",
            "type": "string",
            "format": "date-time",
            "example": "2023-09-04T11:26:24+02:00"
          }
        },
        "required": [
          "expiresAt"
        ]
      },
      "updateUserSchema": {
        "description": "All fields that can be directly changed for the user",
        "type": "object",
        "properties": {
          "email": {
            "description": "The user's email address. Must be provided if username is not provided.",
            "type": "string",
            "example": "user@example.com"
          },
          "name": {
            "description": "The user's name (not the user's username).",
            "type": "string",
            "example": "Sam Seawright"
          },
          "rootRole": {
            "description": "The role to assign to the user. Can be either the role's ID or its unique name.",
            "oneOf": [
              {
                "type": "integer",
                "example": 1,
                "minimum": 0
              },
              {
                "type": "string",
                "example": "Admin",
                "enum": [
                  "Admin",
                  "Editor",
                  "Viewer",
                  "Owner",
                  "Member"
                ]
              }
            ]
          }
        }
      },
      "userSchema": {
        "description": "An Unleash user",
        "type": "object",
        "properties": {
          "id": {
            "description": "The user id",
            "type": "integer",
            "example": 123,
            "minimum": 0
          },
          "isAPI": {
            "description": "(Deprecated): Used internally to know which operations the user should be allowed to perform",
            "type": "boolean",
            "example": true,
            "deprecated": true
          },
          "name": {
            "description": "Name of the user",
            "type": "string",
            "example": "User",
            "nullable": true
          },
          "email": {
            "description": "Email of the user",
            "type": "string",
            "example": "user@example.com"
          },
          "username": {
            "description": "A unique username for the user",
            "type": "string",
            "example": "hunter"
          },
          "imageUrl": {
            "description": "URL used for the userprofile image",
            "type": "string",
            "example": "https://example.com/242x200.png"
          },
          "inviteLink": {
            "description": "If the user is actively inviting other users, this is the link that can be shared with other users",
            "type": "string",
            "example": "http://localhost:4242/invite-link/some-secret"
          },
          "loginAttempts": {
            "description": "How many unsuccessful attempts at logging in has the user made",
            "type": "integer",
            "example": 3,
            "minimum": 0
          },
          "emailSent": {
            "description": "Is the welcome email sent to the user or not",
            "type": "boolean",
            "example": false
          },
          "rootRole": {
            "description": "Which [root role](https://docs.getunleash.io/reference/rbac#predefined-roles) this user is assigned",
            "type": "integer",
            "example": 1,
            "minimum": 0
          },
          "seenAt": {
            "description": "The last time this user logged in",
            "type": "string",
            "format": "date-time",
            "example": "2023-06-30T11:42:00.345Z",
            "nullable": true
          },
          "createdAt": {
            "description": "The user was created at this time",
            "type": "string",
            "format": "date-time",
            "example": "2023-06-30T11:41:00.123Z"
          },
          "accountType": {
            "description": "A user is either an actual User or a Service Account",
            "type": "string",
            "example": "User"
          },
          "permissions": {
            "description": "Deprecated",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "createUserResponseSchema": {
        "description": "An Unleash user after creation",
        "type": "object",
        "properties": {
          "id": {
            "description": "The user id",
            "type": "integer",
            "example": 123,
            "minimum": 0
          },
          "isAPI": {
            "description": "(Deprecated): Used internally to know which operations the user should be allowed to perform",
            "type": "boolean",
            "example": true,
            "deprecated": true
          },
          "name": {
            "description": "Name of the user",
            "type": "string",
            "example": "User",
            "nullable": true
          },
          "email": {
            "description": "Email of the user",
            "type": "string",
            "example": "user@example.com"
          },
          "username": {
            "description": "A unique username for the user",
            "type": "string",
            "example": "hunter"
          },
          "imageUrl": {
            "description": "URL used for the userprofile image",
            "type": "string",
            "example": "https://example.com/242x200.png"
          },
          "inviteLink": {
            "description": "If the user is actively inviting other users, this is the link that can be shared with other users",
            "type": "string",
            "example": "http://localhost:4242/invite-link/some-secret"
          },
          "loginAttempts": {
            "description": "How many unsuccessful attempts at logging in has the user made",
            "type": "integer",
            "example": 3,
            "minimum": 0
          },
          "emailSent": {
            "description": "Is the welcome email sent to the user or not",
            "type": "boolean",
            "example": false
          },
          "rootRole": {
            "description": "Which [root role](https://docs.getunleash.io/reference/rbac#predefined-roles) this user is assigned. Usually a numeric role ID, but can be a string when returning newly created user with an explicit string role.",
            "oneOf": [
              {
                "type": "integer",
                "example": 1,
                "minimum": 0
              },
              {
                "type": "string",
                "example": "Admin",
                "enum": [
                  "Admin",
                  "Editor",
                  "Viewer",
                  "Owner",
                  "Member"
                ]
              }
            ]
          },
          "seenAt": {
            "description": "The last time this user logged in",
            "type": "string",
            "format": "date-time",
            "example": "2023-06-30T11:42:00.345Z",
            "nullable": true
          },
          "createdAt": {
            "description": "The user was created at this time",
            "type": "string",
            "format": "date-time",
            "example": "2023-06-30T11:41:00.123Z"
          },
          "accountType": {
            "description": "A user is either an actual User or a Service Account",
            "type": "string",
            "example": "User"
          },
          "permissions": {
            "description": "Deprecated",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "adminPermissionSchema": {
        "description": "Describes a single permission",
        "type": "object",
        "properties": {
          "id": {
            "description": "The identifier for this permission",
            "type": "integer",
            "example": 3
          },
          "name": {
            "description": "The name of this permission",
            "type": "string",
            "example": "UPDATE_FEATURE"
          },
          "displayName": {
            "description": "The name to display in listings of permissions",
            "type": "string",
            "example": "Update feature toggles"
          },
          "type": {
            "description": "What level this permission applies to. Either root, project or the name of the environment it applies to",
            "type": "string",
            "example": "project"
          },
          "environment": {
            "description": "Which environment this permission applies to",
            "type": "string",
            "example": "development"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "displayName",
          "type"
        ]
      },
      "adminPermissionsSchema": {
        "description": "What kind of permissions are available",
        "type": "object",
        "properties": {
          "permissions": {
            "description": "Returns permissions available at all three levels (root|project|environment)",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "root": {
                "description": "Permissions available at the root level, i.e. not connected to any specific project or environment",
                "items": {
                  "$ref": "#/components/schemas/adminPermissionSchema"
                },
                "type": "array"
              },
              "project": {
                "description": "Permissions available at the project level",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/adminPermissionSchema"
                }
              },
              "environments": {
                "description": "A list of environments with available permissions per environment",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name",
                    "permissions"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "name": {
                      "description": "The name of the environment",
                      "type": "string",
                      "example": "development"
                    },
                    "permissions": {
                      "description": "Permissions available for this environment",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/adminPermissionSchema"
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "project",
              "environments"
            ]
          },
          "version": {
            "description": "The api version of this response. A natural increasing number. Only increases if format changes",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              2
            ],
            "minimum": 1
          }
        },
        "additionalProperties": false,
        "required": [
          "permissions",
          "version"
        ]
      },
      "createProjectSchema": {
        "description": "Data used to create a new [project](https://docs.getunleash.io/reference/projects).",
        "type": "object",
        "properties": {
          "id": {
            "description": "The project's identifier.",
            "type": "string",
            "example": "pet-shop",
            "pattern": "[A-Za-z0-9_~.-]+"
          },
          "name": {
            "description": "The project's name.",
            "type": "string",
            "example": "Pet shop",
            "minLength": 1
          },
          "description": {
            "description": "The project's description.",
            "type": "string",
            "example": "This project contains features related to the new pet shop.",
            "nullable": true
          },
          "mode": {
            "description": "A mode of the project affecting what actions are possible in this project",
            "type": "string",
            "example": "open",
            "enum": [
              "open",
              "protected",
              "private"
            ]
          },
          "defaultStickiness": {
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy",
            "type": "string",
            "example": "userId"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "createRoleWithPermissionsSchema": {
        "description": "A write model for the custom role and permissions to allow Unleash to decide what actions a role holder is allowed to perform",
        "type": "object",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "The name of the custom role",
                "type": "string",
                "example": "external-contributors"
              },
              "description": {
                "description": "A more detailed description of the custom role and what use it's intended for",
                "type": "string",
                "example": "Users with external-contributors role have limited access to most features in Unleash"
              },
              "type": {
                "description": "[Custom root roles](https://docs.getunleash.io/reference/rbac#custom-root-roles) (type=root-custom) are root roles with a custom set of permissions. [Custom project roles](https://docs.getunleash.io/reference/rbac#custom-project-roles) (type=custom) contain a specific set of permissions for project resources.",
                "type": "string",
                "example": "root-custom",
                "enum": [
                  "root-custom",
                  "custom"
                ]
              },
              "permissions": {
                "description": "A list of permissions assigned to this role",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "The name of the permission",
                      "type": "string",
                      "example": "CREATE_PROJECT"
                    },
                    "environment": {
                      "description": "The environments of the permission if the permission is environment specific",
                      "type": "string",
                      "example": "development"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "The name of the custom role",
                "type": "string",
                "example": "external-contributors"
              },
              "description": {
                "description": "A more detailed description of the custom role and what use it's intended for",
                "type": "string",
                "example": "Users with external-contributors role have limited access to most features in Unleash"
              },
              "type": {
                "description": "[Custom project roles](https://docs.getunleash.io/reference/rbac#custom-project-roles) contain a specific set of permissions for project resources.",
                "type": "string",
                "example": "custom",
                "enum": [
                  "custom"
                ]
              },
              "permissions": {
                "description": "A list of permissions assigned to this role",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "description": "The id of the permission",
                      "type": "number",
                      "example": 2
                    },
                    "name": {
                      "description": "The name of the permission",
                      "type": "string",
                      "example": "CREATE_PROJECT"
                    },
                    "environment": {
                      "description": "The environments of the permission if the permission is environment specific",
                      "type": "string",
                      "example": "development"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "projectAccessConfigurationSchema": {
        "description": "An object describing roles for a project and what users and groups are part of that role.",
        "type": "object",
        "properties": {
          "roles": {
            "description": "A list of roles that are available within this project.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the role.",
                  "type": "integer",
                  "example": 1,
                  "minimum": 1
                },
                "groups": {
                  "description": "A list of group ids that will be assigned this role",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "example": [
                    1,
                    2,
                    3
                  ]
                },
                "users": {
                  "description": "A list of user ids that will be assigned this role",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "example": [
                    1,
                    2,
                    3
                  ]
                }
              }
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "roles"
        ]
      },
      "projectAccessSchema": {
        "description": "An object describing access permissions for a given project.",
        "type": "object",
        "properties": {
          "groups": {
            "description": "A list of groups that have access to this project",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/groupWithProjectRoleSchema"
            }
          },
          "users": {
            "description": "A list of users and their roles within this project",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userWithProjectRoleSchema"
            }
          },
          "roles": {
            "description": "A list of roles that are available within this project.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/roleSchema"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "roles",
          "users",
          "groups"
        ]
      },
      "projectCreatedSchema": {
        "description": "Details about the newly created project.",
        "type": "object",
        "properties": {
          "id": {
            "description": "The project's identifier.",
            "type": "string",
            "example": "pet-shop",
            "pattern": "[A-Za-z0-9_~.-]+"
          },
          "name": {
            "description": "The project's name.",
            "type": "string",
            "example": "Pet shop",
            "minLength": 1
          },
          "description": {
            "description": "The project's description.",
            "type": "string",
            "example": "This project contains features related to the new pet shop.",
            "nullable": true
          },
          "featureLimit": {
            "description": "A limit on the number of features allowed in the project. `null` if no limit.",
            "type": "integer",
            "example": 100,
            "nullable": true
          },
          "mode": {
            "description": "A mode of the project affecting what actions are possible in this project",
            "type": "string",
            "example": "open",
            "enum": [
              "open",
              "protected",
              "private"
            ]
          },
          "defaultStickiness": {
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy",
            "type": "string",
            "example": "userId"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ]
      },
      "roleWithPermissionsSchema": {
        "description": "A read model for the role and permissions to allow Unleash to decide what actions a role holder is allowed to perform",
        "type": "object",
        "properties": {
          "id": {
            "description": "The role id",
            "type": "number",
            "example": 9
          },
          "type": {
            "description": "A role can either be a global `root` role, or a `project` role or a `custom` project role or a custom global `root-custom` role",
            "type": "string",
            "example": "root"
          },
          "name": {
            "description": "The name of the role",
            "type": "string",
            "example": "Editor"
          },
          "description": {
            "description": "A more detailed description of the role and what use it's intended for",
            "type": "string",
            "example": "Users with the editor role have access to most features in Unleash but can not manage users and roles in the global scope. Editors will be added as project owners when creating projects and get superuser rights within the context of these projects. Users with the editor role will also get access to most permissions on the default project by default."
          },
          "permissions": {
            "description": "A list of permissions assigned to this role",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/adminPermissionSchema"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "name",
          "permissions"
        ]
      },
      "roleWithVersionSchema": {
        "description": "A single user role received after creation or update of a role",
        "type": "object",
        "properties": {
          "version": {
            "description": "The version of this schema",
            "type": "integer",
            "example": 1,
            "minimum": 1
          },
          "roles": {
            "description": "A single role",
            "$ref": "#/components/schemas/roleSchema"
          }
        },
        "additionalProperties": false,
        "required": [
          "version",
          "roles"
        ]
      },
      "rolesWithVersionSchema": {
        "description": "A collection of user roles",
        "type": "object",
        "properties": {
          "version": {
            "description": "The version of this schema",
            "type": "integer",
            "example": 1,
            "minimum": 1
          },
          "roles": {
            "description": "A list of roles",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/roleSchema"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "version",
          "roles"
        ]
      },
      "updateProjectSchema": {
        "description": "Data used to update a [project](https://docs.getunleash.io/reference/projects)",
        "type": "object",
        "properties": {
          "name": {
            "description": "The new name of the project",
            "type": "string",
            "example": "my-renamed-project"
          },
          "description": {
            "description": "A new description for the project",
            "type": "string",
            "example": "Anything related to the new UI"
          },
          "mode": {
            "description": "A mode of the project affecting what actions are possible in this project",
            "type": "string",
            "example": "open",
            "enum": [
              "open",
              "protected",
              "private"
            ]
          },
          "defaultStickiness": {
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy",
            "type": "string",
            "example": "userId"
          }
        },
        "required": [
          "name"
        ]
      },
      "userWithProjectRoleSchema": {
        "description": "Data about a user including their project role",
        "type": "object",
        "properties": {
          "isAPI": {
            "description": "Whether this user is authenticated through Unleash tokens or logged in with a session",
            "type": "boolean",
            "example": false,
            "deprecated": true
          },
          "name": {
            "description": "The name of the user",
            "type": "string",
            "example": "Hunter Burgan"
          },
          "email": {
            "description": "The user's email address",
            "type": "string",
            "example": "hunter@hunter.com",
            "nullable": true
          },
          "id": {
            "description": "The user's ID in the Unleash system",
            "type": "integer",
            "example": 1,
            "minimum": 0
          },
          "imageUrl": {
            "description": "A URL pointing to the user's image.",
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "addedAt": {
            "description": "When this user was added to the project",
            "type": "string",
            "format": "date-time",
            "example": "2023-08-01T14:35:16Z"
          },
          "roleId": {
            "description": "The ID of the role this user has in the given project",
            "type": "integer",
            "example": 5,
            "minimum": 0
          },
          "roles": {
            "description": "A list of roles this user has in the given project",
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0,
              "example": 5
            }
          }
        },
        "required": [
          "id"
        ]
      },
      "groupWithProjectRoleSchema": {
        "description": "Data about a group including their project role",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the group",
            "type": "string",
            "example": "DX team"
          },
          "id": {
            "description": "The group's ID in the Unleash system",
            "type": "integer",
            "example": 1,
            "minimum": 0
          },
          "addedAt": {
            "description": "When this group was added to the project",
            "type": "string",
            "format": "date-time",
            "example": "2023-08-01T14:35:16Z"
          },
          "roleId": {
            "description": "The ID of the role this group has in the given project",
            "type": "integer",
            "example": 5,
            "minimum": 0
          },
          "roles": {
            "description": "A list of roles this user has in the given project",
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0,
              "example": 5
            }
          },
          "description": {
            "description": "A custom description of the group",
            "type": "string",
            "example": "Current members of the DX squad",
            "nullable": true
          },
          "mappingsSSO": {
            "description": "A list of SSO groups that should map to this Unleash group",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SSOGroup1",
              "SSOGroup2"
            ]
          },
          "rootRole": {
            "description": "A role id that is used as the root role for all users in this group. This can be either the id of the Viewer, Editor or Admin role.",
            "type": "number",
            "example": 1,
            "nullable": true
          },
          "createdBy": {
            "description": "A user who created this group",
            "type": "string",
            "example": "admin",
            "nullable": true
          },
          "createdAt": {
            "description": "When was this group created",
            "type": "string",
            "format": "date-time",
            "example": "2023-06-30T11:41:00.123Z",
            "nullable": true
          },
          "users": {
            "description": "A list of users belonging to this group",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/groupUserModelSchema"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  },
  "tags": [
    {
      "name": "Addons",
      "description": "Create, update, and delete [Unleash addons](https://docs.getunleash.io/addons)."
    },
    {
      "name": "Admin UI",
      "description": "Configuration for the Unleash Admin UI. These endpoints should not be relied upon and can change at any point without prior notice."
    },
    {
      "name": "API tokens",
      "description": "Create, update, and delete [Unleash API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys)."
    },
    {
      "name": "Archive",
      "description": "Revive or permanently delete [archived feature toggles](https://docs.getunleash.io/advanced/archived_toggles)."
    },
    {
      "name": "Auth",
      "description": "Manage logins, passwords, etc."
    },
    {
      "name": "Change Requests",
      "description": "API for managing [change requests](https://docs.getunleash.io/reference/change-requests)."
    },
    {
      "name": "Client",
      "description": "Endpoints for [Unleash server-side clients](https://docs.getunleash.io/reference/sdks)."
    },
    {
      "name": "Context",
      "description": "Create, update, and delete [context fields](https://docs.getunleash.io/reference/unleash-context) that Unleash is aware of."
    },
    {
      "name": "Edge",
      "description": "Endpoints related to Unleash on the Edge."
    },
    {
      "name": "Environments",
      "description": "Create, update, delete, enable or disable [environments](https://docs.getunleash.io/reference/environments) for this Unleash instance."
    },
    {
      "name": "Events",
      "description": "Read events from this Unleash instance."
    },
    {
      "name": "Feature Types",
      "description": "Manage [feature toggle types](https://docs.getunleash.io/reference/feature-toggle-types)."
    },
    {
      "name": "Features",
      "description": "Create, update, and delete [features toggles](https://docs.getunleash.io/reference/feature-toggles)."
    },
    {
      "name": "Frontend API",
      "description": "API for connecting client-side (frontend) applications to Unleash."
    },
    {
      "name": "Import/Export",
      "description": "[Import and export](https://docs.getunleash.io/deploy/import_export) the state of your Unleash instance."
    },
    {
      "name": "Instance Admin",
      "description": "Instance admin endpoints used to manage the Unleash instance itself."
    },
    {
      "name": "Maintenance",
      "description": "Enable/disable the maintenance mode of Unleash."
    },
    {
      "name": "Metrics",
      "description": "Register, read, or delete metrics recorded by Unleash."
    },
    {
      "name": "Notifications",
      "description": "API for managing [notifications](https://docs.getunleash.io/reference/notifications)."
    },
    {
      "name": "Operational",
      "description": "Endpoints related to the operational status of this Unleash instance."
    },
    {
      "name": "Personal access tokens",
      "description": "Create, update, and delete [Personal access tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens)."
    },
    {
      "name": "Playground",
      "description": "Evaluate an Unleash context against your feature toggles."
    },
    {
      "name": "Projects",
      "description": "Create, update, and delete [Unleash projects](https://docs.getunleash.io/reference/projects)."
    },
    {
      "name": "Public signup tokens",
      "description": "Create, update, and delete [Unleash Public Signup tokens](https://docs.getunleash.io/reference/public-signup-tokens)."
    },
    {
      "name": "Segments",
      "description": "Create, update, delete, and manage [segments](https://docs.getunleash.io/reference/segments)."
    },
    {
      "name": "Service Accounts",
      "description": "Endpoints for managing [Service Accounts](https://docs.getunleash.io/reference/service-accounts), which enable programmatic access to the Unleash API."
    },
    {
      "name": "Strategies",
      "description": "Create, update, delete, manage [custom strategies](https://docs.getunleash.io/reference/custom-activation-strategies)."
    },
    {
      "name": "Tags",
      "description": "Create, update, and delete [tags and tag types](https://docs.getunleash.io/reference/tags)."
    },
    {
      "name": "Telemetry",
      "description": "API for information about telemetry collection"
    },
    {
      "name": "Unstable",
      "description": "Experimental endpoints that may change or disappear at any time."
    },
    {
      "name": "Users",
      "description": "Manage users and passwords."
    }
  ],
  "security": [
    {
      "apiKey": []
    }
  ]
}